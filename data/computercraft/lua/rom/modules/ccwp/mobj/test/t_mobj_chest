local T_Chest = {}
local corelog = require "corelog"
local coreutils = require "coreutils"
local coremove = require "coremove"

local role_fuel_worker = require "role_fuel_worker"

local Callback = require "obj_callback"
local Location = require "obj_location"
local Inventory = require "obj_inventory"
local URL = require "obj_url"

local Chest = require "mobj_chest"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_chests = require "enterprise_chests"

function T_Chest.T_All()
    -- base methods
    T_Chest.T_Getters()
    T_Chest.T_IsOfType()
    T_Chest.T_isSame()
    T_Chest.T_copy()

    -- service methods
    T_Chest.T_needsTo_ProvideItemsTo_SSrv()
    T_Chest.T_can_ProvideItems_QSrv()
end

local location1  = Location:new({_x= -6, _y= 0, _z= 1, _dx=0, _dy=1})
local location2  = Location:new({_x= -6, _y= 6, _z= 1, _dx=0, _dy=1})
local accessDirection1 = "top"
local inventory1 = Inventory:new() -- ToDo: add elements

local compact = { compact = true }

--    _                                     _   _               _
--   | |                                   | | | |             | |
--   | |__   __ _ ___  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   | '_ \ / _` / __|/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   | |_) | (_| \__ \  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |_.__/ \__,_|___/\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/

function T_Chest.T_Getters()
    -- prepare test
    corelog.WriteToLog("* Chest getter tests")
    local id = coreutils.NewId()
    local className = "Chest"
    local chest = T_Chest.CreateChest(location1, accessDirection1, inventory1, id) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test
    assert(chest:getClassName() == className, "gotten className(="..chest:getClassName()..") not the same as expected(="..className..")")
    assert(chest:getId() == id, "gotten id(="..chest:getId()..") not the same as expected(="..id..")")
    assert(chest:getLocation() == location1, "gotten getLocation(="..textutils.serialize(chest:getId())..") not the same as expected(="..textutils.serialize(location1)..")")
    assert(chest:getAccessDirection() == accessDirection1, "gotten getAccessDirection(="..chest:getAccessDirection()..") not the same as expected(="..accessDirection1..")")
    assert(chest:getInventory():isSame(inventory1), "gotten getInventory(="..textutils.serialize(chest:getInventory(), compact)..") not the same as expected(="..textutils.serialize(inventory1, compact)..")")

    -- cleanup test
end

function T_Chest.CreateChest(location, accessDirection, inventory, id)
    -- check input
    location = location or location1
    id = id or coreutils.NewId()
    accessDirection = accessDirection or accessDirection1
    inventory = inventory or inventory1

    -- create Chest object
    local chest = Chest:new({
        _id                     = id,

        _location               = location,
        _accessDirection        = accessDirection,
        _inventory              = inventory,
    })

    -- end
    return chest
end

function T_Chest.T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* Chest.IsOfType() tests")
    local chest = T_Chest.CreateChest() if not chest then corelog.Error("failed obtaining Chest") return end

    -- test valid
    local isOfType = Chest.IsOfType(chest)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = Chest.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid _location
    chest._location = "a string"
    isOfType = Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._location = location1

    -- test invalid _accessDirection
    chest._accessDirection = 20
    isOfType = Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._accessDirection = accessDirection1

    -- test invalid _inventory
    chest._inventory = 20
    isOfType = Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._inventory = inventory1

    -- cleanup test
end

function T_Chest.T_isSame()
    -- prepare test
    corelog.WriteToLog("* Chest:isSame() tests")
    local id = coreutils.NewId()
    local chest = T_Chest.CreateChest(location1, accessDirection1, inventory1, id) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test same
    local chest1 = T_Chest.CreateChest(location1, accessDirection1, inventory1, id)
    local isSame = chest1:isSame(chest)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different _location
    chest._location = Location:new({_x= 100, _y= 0, _z= 100, _dx=0, _dy=1})
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._location = location1

    -- test different _accessDirection
    chest._accessDirection = "bottom"
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._accessDirection = accessDirection1

    -- test different _itemsInventory
    chest._inventory = { "ToDo: add some elements here" } -- ToDo
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._inventory = inventory1

    -- cleanup test
end

function T_Chest.T_copy()
    -- prepare test
    corelog.WriteToLog("* Chest:copy() tests")
    local chest = T_Chest.CreateChest(location1, accessDirection1, inventory1) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test
    local copy = chest:copy()
    assert(copy:isSame(chest), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(chest, compact)..")")

    -- cleanup test
end

--                        _                           _   _               _
--                       (_)                         | | | |             | |
--    ___  ___ _ ____   ___  ___ ___   _ __ ___   ___| |_| |__   ___   __| |___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   \__ \  __/ |   \ V /| | (_|  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |___/\___|_|    \_/ |_|\___\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/

local function provideItemsTo_AOSrv_Test(itemDepotLocator, toStr)
    -- prepare test (cont)
    corelog.WriteToLog("* Chest:provideItemsTo_AOSrv() test (to "..toStr..")")
    local chest = T_Chest.CreateChest(location1:getRelativeLocation(2, 5, 0)) if not chest then corelog.Error("failed obtaining chest") return end
    --note: as a test short cut we do not have to set the Inventory content here. We just assume the test Chest is present. FetchItemsFromChestIntoTurtle_Task should make sure the inventory is obtained
    local chestLocator = enterprise_chests:getObjectLocator(chest)

    local provideItems = {
        ["minecraft:birch_log"]  = 5,
    }
    local expectedDestinationItemsLocator = itemDepotLocator:copy()
    expectedDestinationItemsLocator:setQuery(provideItems)
    local callback = Callback:new({
        _moduleName     = "T_Chest",
        _methodName     = "provideItemsTo_AOSrv_Callback",
        _data           = {
            ["expectedDestinationItemsLocator"] = expectedDestinationItemsLocator,
            ["chestLocator"]                    = chestLocator,
            ["itemDepotLocator"]                = itemDepotLocator,
        },
    })

    -- test
    local scheduleResult = chest:provideItemsTo_AOSrv({
        provideItems    = provideItems,
        itemDepotLocator= itemDepotLocator,
    }, callback)
    assert(scheduleResult == true, "failed to schedule async service")
end

function T_Chest.T_provideItemsTo_AOSrv_Turtle()
    -- prepare test
    local itemDepotLocator = enterprise_turtle.GetHostLocator_Att()
    itemDepotLocator:setPort(os.getComputerID())

    -- test
    provideItemsTo_AOSrv_Test(itemDepotLocator, "Turtle")
end

function T_Chest.T_provideItemsTo_AOSrv_Chest()
    -- prepare test
    local chest2 = T_Chest.CreateChest(location2:getRelativeLocation(2, 5, 0)) if not chest2 then corelog.Error("failed obtaining chest 2") return end
    local itemDepotLocator = enterprise_chests:saveObject(chest2)

    -- test
    provideItemsTo_AOSrv_Test(itemDepotLocator, "Chest")
end

function T_Chest.provideItemsTo_AOSrv_Callback(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")

    local destinationItemsLocator = URL:new(serviceResults.destinationItemsLocator)
    local expectedDestinationItemsLocator = URL:new(callbackData["expectedDestinationItemsLocator"])
    assert(destinationItemsLocator:isSame(expectedDestinationItemsLocator), "gotten destinationItemsLocator(="..textutils.serialize(destinationItemsLocator, compact)..") not the same as expected(="..textutils.serialize(expectedDestinationItemsLocator, compact)..")")

    -- cleanup test
    local chestLocator = callbackData["chestLocator"]
    enterprise_chests:deleteResource(chestLocator)
    local itemDepotLocator = callbackData["itemDepotLocator"]
    if enterprise_chests:isLocatorFromHost(itemDepotLocator) then
        enterprise_chests:deleteResource(itemDepotLocator)
    end

    -- end
    return true
end

local function storeItemsFrom_ASrv_Test(itemsLocator, toStr)
    -- prepare test (cont)
    corelog.WriteToLog("* Chest:storeItemsFrom_ASrv() test (to "..toStr..")")
    local chest = T_Chest.CreateChest(location1:getRelativeLocation(2, 5, 0)) if not chest then corelog.Error("failed obtaining chest") return end
    --note: as a test short cut we do not have to set the Inventory content here. We just assume the test Chest is present. FetchItemsFromChestIntoTurtle_Task should make sure the inventory is obtained
    local chestLocator = enterprise_chests:getObjectLocator(chest)

    local provideItems = {
        ["minecraft:birch_log"]  = 5,
    }
    itemsLocator:setQuery(provideItems)

    local expectedDestinationItemsLocator = chestLocator:copy()
    expectedDestinationItemsLocator:setQuery(provideItems)
    local callback = Callback:new({
        _moduleName     = "T_Chest",
        _methodName     = "storeItemsFrom_ASrv_Callback",
        _data           = {
            ["expectedDestinationItemsLocator"] = expectedDestinationItemsLocator,
            ["chestLocator"]                    = chestLocator,
            ["itemsLocator"]                    = itemsLocator:copy(),
        },
    })

    -- test
    local scheduleResult = chest:storeItemsFrom_ASrv({
        itemsLocator    = itemsLocator,
    }, callback)
    assert(scheduleResult == true, "failed to schedule async service")
end

function T_Chest.T_storeItemsFrom_ASrv_Turtle()
    -- prepare test
    local itemsLocator = enterprise_turtle.GetHostLocator_Att()
    itemsLocator:setPort(os.getComputerID())

    -- test
    storeItemsFrom_ASrv_Test(itemsLocator, "Turtle")
end

function T_Chest.T_storeItemsFrom_ASrv_Chest()
    -- prepare test
    local chest2 = T_Chest.CreateChest(location2:getRelativeLocation(2, 5, 0)) if not chest2 then corelog.Error("failed obtaining chest 2") return end
    local itemsLocator = enterprise_chests:saveObject(chest2)

    -- test
    storeItemsFrom_ASrv_Test(itemsLocator, "Chest")
end

function T_Chest.storeItemsFrom_ASrv_Callback(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")

    local destinationItemsLocator = URL:new(serviceResults.destinationItemsLocator)
    local expectedDestinationItemsLocator = URL:new(callbackData["expectedDestinationItemsLocator"])
    assert(destinationItemsLocator:isSame(expectedDestinationItemsLocator), "gotten destinationItemsLocator(="..textutils.serialize(destinationItemsLocator, compact)..") not the same as expected(="..textutils.serialize(expectedDestinationItemsLocator, compact)..")")

    -- cleanup test
    local chestLocator = callbackData["chestLocator"]
    enterprise_chests:deleteResource(chestLocator)
    local itemsLocator = callbackData["itemsLocator"]
    if enterprise_chests:isLocatorFromHost(itemsLocator) then
        enterprise_chests:deleteResource(itemsLocator)
    end

    -- end
    return true
end

function T_Chest.T_needsTo_ProvideItemsTo_SSrv()
    -- prepare test
    corelog.WriteToLog("* Chest:needsTo_ProvideItemsTo_SSrv() tests")
    local chest = T_Chest.CreateChest() if not chest then corelog.Error("failed obtaining chest") return end
    local provideItems = {
        ["minecraft:birch_log"]  = 5,
    }
    local itemDepotLocator = enterprise_turtle.GetHostLocator_Att()
    local itemDepotLocation = Location:new(coremove.GetLocation())

    -- test
    local needsTo_Provide = chest:needsTo_ProvideItemsTo_SSrv({
        provideItems    = provideItems,
        itemDepotLocator= itemDepotLocator,
    })
    local expectedFuelNeed = 1 * role_fuel_worker.NeededFuelToFrom(itemDepotLocation, chest:getLocation())
    assert(needsTo_Provide.success, "needsTo_ProvideItemsTo_SSrv failed")
    assert(needsTo_Provide.fuelNeed == expectedFuelNeed, "fuelNeed(="..needsTo_Provide.fuelNeed..") not the same as expected(="..expectedFuelNeed..")")
    assert(#needsTo_Provide.ingredientsNeed == 0, "ingredientsNeed(="..#needsTo_Provide.ingredientsNeed..") not the same as expected(=0)")

    -- cleanup test
end

function T_Chest.T_can_ProvideItems_QSrv()
    -- prepare test
    corelog.WriteToLog("* Chest:can_ProvideItems_QSrv() tests")
    local inventory = Inventory:new({
        _slotTable = {
            { name = "minecraft:dirt", count = 20 },
        }
    })
    local chest = T_Chest.CreateChest(location1, accessDirection1, inventory) if not chest then corelog.Error("failed obtaining chest") return end

    -- test can
    local itemName = "minecraft:dirt"
    local itemCount = 10
    local serviceResults = chest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(serviceResults.success, "can_ProvideItems_QSrv incorrectly failed for "..itemCount.." "..itemName.."'s")

    -- test can not
    itemName = "minecraft:furnace"
    itemCount = 1
    serviceResults = chest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(not serviceResults.success, "can_ProvideItems_QSrv incorrectly success for "..itemCount.." "..itemName.."'s")

    -- cleanup test
end

function T_Chest.T_updateChestRecord_AOSrv()
    -- prepare test
    corelog.WriteToLog("* Chest:updateChestRecord_AOSrv test")
    local chest = T_Chest.CreateChest(location1:getRelativeLocation(2, 5, 0)) if not chest then corelog.Error("failed obtaining chest") return end
    local chestLocator = enterprise_chests:getObjectLocator(chest)

    local callback = Callback:new({
        _moduleName     = "T_Chest",
        _methodName     = "updateChestRecord_AOSrv_Callback",
        _data           = {
            ["chestLocator"]                    = chestLocator,
        },
    })


    -- test
    local scheduleResult = chest:updateChestRecord_AOSrv({}, callback)
    assert(scheduleResult == true, "failed to schedule async service")
end

function T_Chest.updateChestRecord_AOSrv_Callback(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")
    local chestLocator = callbackData["chestLocator"]
    local updatedChest = enterprise_chests:getObject(chestLocator)
    assert (updatedChest, "Chest not saved")

    -- cleanup test
    enterprise_chests:deleteResource(chestLocator)

    -- end
    return true
end

return T_Chest
