local T_ProductionSpot = {}
local corelog = require "corelog"

local IObj = require "i_obj"
local Location = require "obj_location"

local ProductionSpot = require "mobj_production_spot"

function T_ProductionSpot.T_All()
    -- interfaces
    T_ProductionSpot.T_ImplementsIObj()

    -- base methods
    T_ProductionSpot.T_new()
    T_ProductionSpot.T_isTypeOf()
    T_ProductionSpot.T_isSame()
    T_ProductionSpot.T_copy()

    -- specific methods
end

local location1  = Location:new({_x= -6, _y= 0, _z= 1, _dx=0, _dy=1})
local isCraftingSpot1 = true
local isCraftingSpot2 = false
local obj1 = ProductionSpot:new({
    _baseLocation   = location1,
    _isCraftingSpot = isCraftingSpot1,
})

local compact = { compact = true }

--    _       _             __
--   (_)     | |           / _|
--    _ _ __ | |_ ___ _ __| |_ __ _  ___ ___  ___
--   | | '_ \| __/ _ \ '__|  _/ _` |/ __/ _ \/ __|
--   | | | | | ||  __/ |  | || (_| | (_|  __/\__ \
--   |_|_| |_|\__\___|_|  |_| \__,_|\___\___||___/

function T_ProductionSpot.T_ImplementsIObj()
    -- prepare test
    corelog.WriteToLog("* ProductionSpot IObj interface test")
    local obj = ProductionSpot:new({
        _baseLocation   = location1,
        _isCraftingSpot = isCraftingSpot1,
    }) if not obj then corelog.Error("failed obtaining ProductionSpot") return end

    -- test
    local implementsInterface = IObj.ImplementsInterface(obj)
    assert(implementsInterface, "ProductionSpot class does not (fully) implement IObj interface")

    -- cleanup test
end

--    _                                     _   _               _
--   | |                                   | | | |             | |
--   | |__   __ _ ___  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   | '_ \ / _` / __|/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   | |_) | (_| \__ \  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |_.__/ \__,_|___/\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/

function T_ProductionSpot.T_new()
    -- prepare test
    corelog.WriteToLog("* ProductionSpot:new() tests")

    -- test
    local obj = ProductionSpot:new({
        _baseLocation   = location1,
        _isCraftingSpot = isCraftingSpot1,
    })
    assert(location1:isSame(obj:getBaseLocation()), "gotten getBaseLocation(="..textutils.serialise(obj:getBaseLocation(), compact)..") not the same as expected(="..textutils.serialise(location1, compact)..")")
    assert(isCraftingSpot1 == obj:isCraftingSpot(), "gotten isCraftingSpot(="..textutils.serialise(obj:isCraftingSpot(), compact)..") not the same as expected(="..textutils.serialise(isCraftingSpot1, compact)..")")

    -- cleanup test
end

function T_ProductionSpot.T_isTypeOf()
    -- prepare test
    corelog.WriteToLog("* ProductionSpot:isTypeOf() tests")
    local obj2 = ProductionSpot:new({
        _baseLocation   = location1,
        _isCraftingSpot = isCraftingSpot1,
    })

    -- test valid
    local isTypeOf = ProductionSpot:isTypeOf(obj2)
    local expectedIsTypeOf = true
    assert(isTypeOf == expectedIsTypeOf, "gotten isTypeOf(="..tostring(isTypeOf)..") not the same as expected(="..tostring(expectedIsTypeOf)..")")

    -- test different object
    isTypeOf = ProductionSpot:isTypeOf("a atring")
    expectedIsTypeOf = false
    assert(isTypeOf == expectedIsTypeOf, "gotten isTypeOf(="..tostring(isTypeOf)..") not the same as expected(="..tostring(expectedIsTypeOf)..")")

    -- cleanup test
end

function T_ProductionSpot.T_isSame()
    -- prepare test
    corelog.WriteToLog("* ProductionSpot:isSame() tests")
    local obj2 = ProductionSpot:new({
        _baseLocation   = location1,
        _isCraftingSpot = isCraftingSpot1,
    })

    -- test same
    local isSame = obj1:isSame(obj2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different _baseLocation
    obj2._baseLocation = Location:new({_x= 100, _y= 0, _z= 100, _dx=0, _dy=1})
    isSame = obj1:isSame(obj2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    obj2._baseLocation = location1

    -- test different _isCraftingSpot
    obj2._isCraftingSpot = isCraftingSpot2
    isSame = obj1:isSame(obj2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    obj2._isCraftingSpot = isCraftingSpot1

    -- cleanup test
end

function T_ProductionSpot.T_copy()
    -- prepare test
    corelog.WriteToLog("* ProductionSpot:copy() tests")

    -- test
    local copy = obj1:copy()
    assert(copy:isSame(obj1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(obj1, compact)..")")

    -- cleanup test
end

--                        _  __ _                       _   _               _
--                       (_)/ _(_)                     | | | |             | |
--    ___ _ __   ___  ___ _| |_ _  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   / __| '_ \ / _ \/ __| |  _| |/ __| | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   \__ \ |_) |  __/ (__| | | | | (__  | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |___/ .__/ \___|\___|_|_| |_|\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/
--       | |
--       |_|

return T_ProductionSpot
