local CallDef = {
    _moduleName  = "",
    _methodName  = "",
    _data  = {},
}

local corelog = require "corelog"

local InputChecker = require "input_checker"

--[[
    This module implements the class CallDef.

    A CallDef defines the function call of a Method of a Module, including a table with possible method arguments.
--]]

--    _                                     _   _               _
--   | |                                   | | | |             | |
--   | |__   __ _ ___  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   | '_ \ / _` / __|/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   | |_) | (_| \__ \  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |_.__/ \__,_|___/\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/

function CallDef:new(...)
    -- get & check input from description
    local checkSuccess, o = InputChecker.Check([[
        Construct a CallDef from table.

        Parameters:
            o                       + (table, {}) table with object fields
                _moduleName         - (string, "") name of module to call
                _methodName         - (string, "") name of method to call
                _data               - (table, {}) with arguments to pass to method call
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("CallDef:new: Invalid input") return {} end

    -- set class info
    setmetatable(o, self)
    self.__index = self

    -- end
    return o
end

function CallDef:getClassName()
    return "CallDef"
end

function CallDef:getModuleName()
    return self._moduleName
end

function CallDef:setModuleName(moduleName)
    self._moduleName = moduleName
end

function CallDef:getMethodName()
    return self._methodName
end

function CallDef:setMethodName(methodName)
    self._methodName = methodName
end

function CallDef:getData()
    return self._data
end

function CallDef:setData(data)
    self._data = data
end

function CallDef.HasFieldsOfType(obj)
    -- check
    if type(obj) ~= "table" then return false end
    if type(obj._moduleName) ~= "string" then return false end
    if type(obj._methodName) ~= "string" then return false end
    if type(obj._data) ~= "table" then return false end

    -- end
    return true
end

function CallDef.HasClassNameOfType(obj)
    -- check
    if not obj.getClassName or obj:getClassName() ~= CallDef:getClassName() then return false end

    -- end
    return true
end

function CallDef:isTypeOf(obj)
    local metatable = getmetatable(obj)
    while metatable do
        if metatable.__index == self or obj == self then
            return true
        end
        metatable = getmetatable(metatable.__index)
    end
    return false
end

function CallDef:isSame(obj)
    -- check input
    if not CallDef:isTypeOf(obj) then return false end

    -- check same
    local isSame = self._moduleName == obj._moduleName and self._methodName == obj._methodName
    isSame = isSame and self._data == obj._data -- ToDo: note: now an identity check. consider checking elements

    -- end
    return isSame
end

function CallDef:copy()
    local copy = CallDef:new({
        _moduleName  = self._moduleName,
        _methodName  = self._methodName,
        _data  = self._data, -- ToDo: note: now an identity copy. consider copying elements
    })

    return copy
end

--                        _  __ _                       _   _               _
--                       (_)/ _(_)                     | | | |             | |
--    ___ _ __   ___  ___ _| |_ _  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   / __| '_ \ / _ \/ __| |  _| |/ __| | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   \__ \ |_) |  __/ (__| | | | | (__  | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |___/ .__/ \___|\___|_|_| |_|\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/
--       | |
--       |_|

return CallDef
