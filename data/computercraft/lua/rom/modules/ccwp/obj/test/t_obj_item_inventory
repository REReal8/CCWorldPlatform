local T_ItemInventory = {}
local corelog = require "corelog"

local InputChecker = require "input_checker"

local ItemInventory = require "obj_item_inventory"

function T_ItemInventory.T_All()
    T_ItemInventory.T_IsItemTable()
    T_ItemInventory.T_IsSameItemTable()
    T_ItemInventory.T_ItemTableCopy()

    T_ItemInventory.T_IsSlotTable()

    T_ItemInventory.T_new()
    T_ItemInventory.T_IsOfType()
    T_ItemInventory.T_isSame()
    T_ItemInventory.T_copy()
    T_ItemInventory.T_ParseWithCheckInput()
    T_ItemInventory.T_setFromSlotTable()
end

local saplingItemName = "minecraft:birch_sapling"
local saplingCount1 = 10
local saplingCount2 = 10
local furnaceItemName = "minecraft:furnace"
local furnaceCount1 = 1
local chestItemName = "minecraft:chest"
local chestCount1 = 5
local itemTable1 = {
    [saplingItemName] = saplingCount1,
    [chestItemName] = chestCount1,
}
local itemTable2 = {
    [saplingItemName] = saplingCount2,
    [furnaceItemName] = furnaceCount1,
}

local compact = { compact = true }

function T_ItemInventory.T_IsItemTable()
    -- prepare test
    corelog.WriteToLog("* ItemInventory.IsItemTable() tests")

    -- test valid
    local isItemTable = ItemInventory.IsItemTable( itemTable1 )
    local expectedIsItemTable = true
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")

    -- test with wrong name type
    itemTable1[20] = 50
    isItemTable = ItemInventory.IsItemTable( itemTable1 )
    expectedIsItemTable = false
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")
    itemTable1[20] = nil

    -- test with wrong count type
    itemTable1.something = "a string"
    isItemTable = ItemInventory.IsItemTable( itemTable1 )
    expectedIsItemTable = false
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")
    itemTable1.something = nil

    -- cleanup test
end

function T_ItemInventory.T_IsSameItemTable()
    -- prepare test
    corelog.WriteToLog("* ItemInventory.IsSameItemTable() tests")

    -- test same
    local isSameItemTable = ItemInventory.IsSameItemTable(itemTable1, itemTable1)
    local expectedIsSameItemTable = true
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- test with 2 empty lists
    isSameItemTable = ItemInventory.IsSameItemTable(
        { },
        { }
    )
    expectedIsSameItemTable = true
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- test with different items
    isSameItemTable = ItemInventory.IsSameItemTable(itemTable1, itemTable2)
    expectedIsSameItemTable = false
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- cleanup test
end

function T_ItemInventory.T_ItemTableCopy()
    -- prepare test
    corelog.WriteToLog("* ItemInventory.ItemTableCopy() tests")

    -- test
    local copy = ItemInventory.ItemTableCopy(itemTable1)
    local expectedCopy = itemTable1
    assert(ItemInventory.IsSameItemTable(copy, expectedCopy), "gotten ItemTableCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(expectedCopy, compact)..")")

    -- cleanup test
end

local slotTable1 = {
    { name = saplingItemName, count = saplingCount1 },
    { name = chestItemName, count = chestCount1 },
}

function T_ItemInventory.T_IsSlotTable()
    -- prepare test
    corelog.WriteToLog("* ItemInventory.IsSlotTable() tests")

    -- test valid
    local isSlotTable = ItemInventory.IsSlotTable( slotTable1 )
    local expectedIsSlotTable = true
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")

    -- test with wrong slotItem name type
    slotTable1[1] = { name = 40, count = saplingCount1 }
    isSlotTable = ItemInventory.IsSlotTable( slotTable1 )
    expectedIsSlotTable = false
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")
    slotTable1[1] = { name = saplingItemName, count = saplingCount1 }

    -- test with wrong slotItem count type
    slotTable1[1] = { name = saplingItemName, count =  "a string" }
    isSlotTable = ItemInventory.IsSlotTable( slotTable1 )
    expectedIsSlotTable = false
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")
    slotTable1[1] = { name = saplingItemName, count = saplingCount1 }

    -- cleanup test
end

local itemInventory1 = ItemInventory:new({
    _itemTable  = itemTable1,
})

function T_ItemInventory.T_new()
    -- prepare test
    corelog.WriteToLog("* ItemInventory:new() tests")

    -- test full
    local itemInventory = ItemInventory:new({
        _itemTable  = ItemInventory.ItemTableCopy(itemTable1),
    })
    assert(ItemInventory.IsSameItemTable(itemInventory:getItemTable(), itemTable1), "gotten getItemTable(="..textutils.serialize(itemInventory:getItemTable(), compact)..") not the same as expected(="..textutils.serialize(itemTable1)..")")

    -- test default
    itemInventory = ItemInventory:new()
    assert(ItemInventory.IsSameItemTable(itemInventory:getItemTable(), {}), "gotten getItemTable(="..textutils.serialize(itemInventory:getItemTable(), compact)..") not the same as expected(="..textutils.serialize({})..")")

    -- cleanup test
end

function T_ItemInventory.T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* ItemInventory.IsOfType() tests")
    local itemInventory = ItemInventory:new({
        _itemTable  = ItemInventory.ItemTableCopy(itemTable1),
    })

    -- test valid
    local isOfType = ItemInventory.IsOfType(itemInventory)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = ItemInventory.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid _itemTable
    itemInventory._itemTable = 1000
    isOfType = ItemInventory.IsOfType(itemInventory)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    itemInventory._itemTable = ItemInventory.ItemTableCopy(itemTable1)

    -- cleanup test
end

function T_ItemInventory.T_isSame()
    -- prepare test
    corelog.WriteToLog("* ItemInventory:isSame() tests")
    local itemInventory2 = ItemInventory:new({
        _itemTable  = ItemInventory.ItemTableCopy(itemTable1),
    })

    -- test same
    local isSame = itemInventory1:isSame(itemInventory2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different
    itemInventory2:setItemTable(itemTable2)
    isSame = itemInventory1:isSame(itemInventory2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    itemInventory2:setItemTable(itemTable1)

    -- cleanup test
end

function T_ItemInventory.T_copy()
    -- prepare test
    corelog.WriteToLog("* ItemInventory:copy() tests")

    -- test
    local copy = itemInventory1:copy()
    assert(copy:isSame(itemInventory1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(itemInventory1, compact)..")")

    -- cleanup test
end

function T_ItemInventory.T_ParseWithCheckInput()
    -- prepare test
    corelog.WriteToLog("* ItemInventory parsing with CheckInput tests")

    -- test
    local checkSuccess, itemInventory = InputChecker.Check([[
        Parameters:
            itemInventory   + (ItemInventory) object to retrieve from arg
    ]], table.unpack({ textutils.unserialize(textutils.serialize(itemInventory1)) }))
    assert(checkSuccess == true, "Invalid input")

    local isOfType = ItemInventory.IsOfType(itemInventory)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- cleanup test
end

function T_ItemInventory.T_setFromSlotTable()
    -- prepare test
    corelog.WriteToLog("* ItemInventory:setFromSlotTable tests")

    -- test
    local itemInventory = ItemInventory:new()
    itemInventory:setFromSlotTable(slotTable1)
    local isSame = itemInventory:isSame(itemInventory1)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- cleanup test
end

return T_ItemInventory
