local T_Location = {}

local corelog = require "corelog"

local Location = require "obj_location"

function T_Location.T_All()
    T_Location.T_new()
    T_Location.T_IsOfType()
    T_Location.T_isSame()
    T_Location.T_copy()
end

local x1 = 1
local x2 = 2
local y1 = 10
local y2 = 20
local z1 = -10
local z2 = -20
local dx1 = 0
local dx2 = -1
local dy1 = 1
local dy2 = 0

local compact = { compact = true }

function T_Location.T_new()
    -- prepare test
    corelog.WriteToLog("* Location:new() tests")

    -- test full
    local location = Location:new({
        _x  = x1,
        _y  = y1,
        _z  = z1,
        _dx = dx1,
        _dy = dy1,
    })
    assert(location:getX() == x1, "gotten getX(="..location:getX()..") not the same as expected(="..x1..")")
    assert(location:getY() == y1, "gotten getY(="..location:getY()..") not the same as expected(="..y1..")")
    assert(location:getZ() == z1, "gotten getY(="..location:getZ()..") not the same as expected(="..z1..")")
    assert(location:getDX() == dx1, "gotten getDX(="..location:getDX()..") not the same as expected(="..dx1..")")
    assert(location:getDY() == dy1, "gotten getDY(="..location:getDY()..") not the same as expected(="..dy1..")")

    -- test default
    location = Location:new()
    assert(location:getX() == 0, "gotten getX(="..location:getX()..") not the same as expected(=0)")
    assert(location:getY() == 0, "gotten getY(="..location:getY()..") not the same as expected(=0)")
    assert(location:getZ() == 0, "gotten getY(="..location:getZ()..") not the same as expected(=0)")
    assert(location:getDX() == 0, "gotten getDX(="..location:getDX()..") not the same as expected(=0)")
    assert(location:getDY() == 1, "gotten getDY(="..location:getDY()..") not the same as expected(=1)")

    -- cleanup test
end

function T_Location.T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* Location.IsOfType() tests")
    local location2 = Location:new({
        _x  = x1,
        _y  = y1,
        _z  = z1,
        _dx = dx1,
        _dy = dy1,
    })

    -- test valid
    local isOfType = Location.IsOfType(location2)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = Location.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid x
    location2._x = "a string"
    isOfType = Location.IsOfType(location2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    location2:setX(x1)

    -- test invalid y
    location2._y = "a string"
    isOfType = Location.IsOfType(location2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    location2:setY(y1)

    -- test invalid z
    location2._z = "a string"
    isOfType = Location.IsOfType(location2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    location2:setZ(z1)

    -- test invalid dx
    location2._dx = "a string"
    isOfType = Location.IsOfType(location2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    location2:setDX(dx1)

    -- test invalid dy
    location2._dy = "a string"
    isOfType = Location.IsOfType(location2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    location2:setDY(dy1)

    -- cleanup test
end

function T_Location.T_isSame()
    -- prepare test
    corelog.WriteToLog("* Location:isSame() tests")
    local location1 = Location:new({
        _x  = x1,
        _y  = y1,
        _z  = z1,
        _dx = dx1,
        _dy = dy1,
    })
    local location2 = Location:new({
        _x  = x1,
        _y  = y1,
        _z  = z1,
        _dx = dx1,
        _dy = dy1,
    })

    -- test same
    local isSame = location1:isSame(location2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different x
    location2:setX(x2)
    isSame = location1:isSame(location2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    location2:setX(x1)

    -- test different y
    location2:setY(y2)
    isSame = location1:isSame(location2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    location2:setY(y1)

    -- test different z
    location2:setZ(z2)
    isSame = location1:isSame(location2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    location2:setZ(z1)

    -- test different dx
    location2:setDX(dx2)
    isSame = location1:isSame(location2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    location2:setDX(dx1)

    -- test different dy
    location2:setDY(dy2)
    isSame = location1:isSame(location2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    location2:setDY(dy1)

    -- cleanup test
end

function T_Location.T_copy()
    -- prepare test
    corelog.WriteToLog("* Location:copy() tests")
    local location1 = Location:new({
        _x  = x1,
        _y  = y1,
        _z  = z1,
        _dx = dx1,
        _dy = dy1,
    })

    -- test
    local copy = location1:copy()
    assert(copy:isSame(location1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(location1, compact)..")")

    -- cleanup test
end

return T_Location
