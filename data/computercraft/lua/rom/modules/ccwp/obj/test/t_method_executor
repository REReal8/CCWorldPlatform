local T_MethodExecutor = {}

local corelog = require "corelog"

local ModuleRegistry = require "module_registry"
local moduleRegistry = ModuleRegistry:getInstance()

local MethodExecutor = require "method_executor"

function T_MethodExecutor.T_All()
    T_MethodExecutor.T_CallMethod()
    T_MethodExecutor.T_CallModuleMethod()

    T_MethodExecutor.T_DoSyncService()
end

local testMethod = function(num)
    return num + 1
end

function T_MethodExecutor.T_CallMethod()
    -- prepare test
    corelog.WriteToLog("* MethodExecutor.CallMethod() test")
    local myObject = {
        increment = testMethod
    }

    -- test
    local result = MethodExecutor.CallMethod(myObject, "increment", {5})
    assert(result == 6, "Unexpected result from increment method: " .. tostring(result))

    -- cleanup test
end

function T_MethodExecutor.T_CallModuleMethod()
    -- prepare test
    corelog.WriteToLog("* MethodExecutor.CallModuleMethod() test")
    local myModule = {
        increment = testMethod
    }
    moduleRegistry:registerModule("myModule", myModule)

    -- test
    local result = MethodExecutor.CallModuleMethod("myModule", "increment", {5})
    assert(result == 6, "Unexpected result from increment method: " .. tostring(result))

    -- cleanup test
    moduleRegistry:delistModule("myModule")
end

function T_MethodExecutor.T_DoCallback()
    -- test DoCallback
    corelog.WriteToLog("# Test DoCallback")
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}
    local result = {"some task result"}

    corelog.WriteToLog("T_coreutils_DoCallback calling DoCallback("..callbackFunction..", "..textutils.serialize(callbackData)..", "..textutils.serialize(result)..")")
    MethodExecutor.DoCallback(callbackFunction, callbackData, result)
end

function T_MethodExecutor.T_DoSyncService()
    -- prepare test
    corelog.WriteToLog("* MethodExecutor.DoSyncService() test")
    local moduleName = "enterprise_test"
    local serviceName = "TestPureLogicService_SSrv"
    assert(moduleRegistry:isRegistered(moduleName), "Module "..moduleName.." is not registered in the registry.")
    local testValue = 20
    local serviceData = {
        testArg = testValue,
    }

    -- test
    local results = MethodExecutor.DoSyncService(moduleName, serviceName, serviceData)
    assert(results.input == testValue, "Unexpected result from myService: " .. tostring(results.input))

    -- cleanup test
end

return T_MethodExecutor
