local T_Callback = {}

local corelog = require "corelog"

local Callback = require "obj_callback"

function T_Callback.T_All()
    T_Callback.T_call()
end

local moduleName1 = "T_Callback"
local methodName1 = "Call_Callback"
local data1 = {"some callback data"}

local compact = { compact = true }

local resultData1 = { someResult = "some result", success = true }

function T_Callback.T_call()
    -- prepare test
    corelog.WriteToLog("* Callback:call() test")
    local callback = Callback:new({
        _moduleName     = moduleName1,
        _methodName     = methodName1,
        _data           = data1,
    })

    -- test
    callback:call(resultData1)

    -- cleanup test
end

function T_Callback.Call_Callback(callbackData, resultData)
    -- test (cont)
    assert(callbackData == data1, "gotten callbackData(="..textutils.serialise(callbackData, compact)..") not the same as expected(="..textutils.serialise(data1, compact)..")")
    assert(resultData == resultData1, "gotten resultData(="..textutils.serialise(resultData, compact)..") not the same as expected(="..textutils.serialise(resultData1, compact)..")")

    -- cleanup test
end

return T_Callback
