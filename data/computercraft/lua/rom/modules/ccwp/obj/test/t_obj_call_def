local T_CallDef = {}

local corelog = require "corelog"

local CallDef = require "obj_callback"

function T_CallDef.T_All()
    -- base methods
    T_CallDef.T_new()
    T_CallDef.T_isTypeOf()
    T_CallDef.T_isEqual()
    T_CallDef.T_copy()

    -- specific methods
end

local moduleName1 = "T_CallDef"
local moduleName2 = "moduleName2"
local methodName1 = "Call_Callback"
local methodName2 = "methodName2"
local data1 = {"some callback data"}
local data2 = {"some other callback data"}

local callback1 = CallDef:new({
    _moduleName     = moduleName1,
    _methodName     = methodName1,
    _data           = data1,
})

local compact = { compact = true }

--    _       _ _   _       _ _           _   _
--   (_)     (_) | (_)     | (_)         | | (_)
--    _ _ __  _| |_ _  __ _| |_ ___  __ _| |_ _  ___  _ __
--   | | '_ \| | __| |/ _` | | / __|/ _` | __| |/ _ \| '_ \
--   | | | | | | |_| | (_| | | \__ \ (_| | |_| | (_) | | | |
--   |_|_| |_|_|\__|_|\__,_|_|_|___/\__,_|\__|_|\___/|_| |_|

function T_CallDef.T_new()
    -- prepare test
    corelog.WriteToLog("* CallDef:new() tests")

    -- test full
    local callback = CallDef:new({
        _moduleName     = moduleName1,
        _methodName     = methodName1,
        _data           = data1,
    })
    assert(callback:getModuleName() == moduleName1, "gotten getModuleName(="..callback:getModuleName()..") not the same as expected(="..moduleName1..")")
    assert(callback:getMethodName() == methodName1, "gotten getMethodName(="..callback:getMethodName()..") not the same as expected(="..methodName1..")")
    local data = callback:getData()
    assert(data == data1, "gotten getData(="..textutils.serialise(callback:getData(), compact)..") not the same as expected(="..textutils.serialise(data1, compact)..")")

    -- test default
    callback = CallDef:new()
    assert(callback:getModuleName() == "", "gotten getModuleName(="..(callback:getModuleName() or "nil")..") not the same as expected(='')")
    assert(callback:getMethodName() == "", "gotten getMethodName(="..(callback:getMethodName() or "nil")..") not the same as expected(='')")
    data = callback:getData()
    assert(type(data) == "table" and next(data) == nil , "gotten getData(="..textutils.serialise(callback:getData(), compact)..") not the same as expected(={})")

    -- cleanup test
end

function T_CallDef.T_isTypeOf()
    -- prepare test
    corelog.WriteToLog("* CallDef:isTypeOf() tests")
    local callback2 = CallDef:new({
        _moduleName     = moduleName1,
        _methodName     = methodName1,
        _data           = data1,
    })

    -- test valid
    local isTypeOf = CallDef:isTypeOf(callback2)
    local expectedIsTypeOf = true
    assert(isTypeOf == expectedIsTypeOf, "gotten isTypeOf(="..tostring(isTypeOf)..") not the same as expected(="..tostring(expectedIsTypeOf)..")")

    -- test different object
    isTypeOf = CallDef:isTypeOf("a atring")
    expectedIsTypeOf = false
    assert(isTypeOf == expectedIsTypeOf, "gotten isTypeOf(="..tostring(isTypeOf)..") not the same as expected(="..tostring(expectedIsTypeOf)..")")

    -- cleanup test
end

function T_CallDef.T_isEqual()
    -- prepare test
    corelog.WriteToLog("* CallDef:isEqual() tests")
    local callback2 = CallDef:new({
        _moduleName     = moduleName1,
        _methodName     = methodName1,
        _data           = data1,
    })

    -- test same
    local isEqual = callback1:isEqual(callback2)
    local expectedIsEqual = true
    assert(isEqual == expectedIsEqual, "gotten isEqual(="..tostring(isEqual)..") not the same as expected(="..tostring(expectedIsEqual)..")")

    -- test different moduleName
    callback2:setModuleName(moduleName2)
    isEqual = callback1:isEqual(callback2)
    expectedIsEqual = false
    assert(isEqual == expectedIsEqual, "gotten isEqual(="..tostring(isEqual)..") not the same as expected(="..tostring(expectedIsEqual)..")")
    callback2:setModuleName(moduleName1)

    -- test different methodName
    callback2:setMethodName(methodName2)
    isEqual = callback1:isEqual(callback2)
    expectedIsEqual = false
    assert(isEqual == expectedIsEqual, "gotten isEqual(="..tostring(isEqual)..") not the same as expected(="..tostring(expectedIsEqual)..")")
    callback2:setMethodName(methodName1)

    -- test different data
    callback2:setData(data2)
    isEqual = callback1:isEqual(callback2)
    expectedIsEqual = false
    assert(isEqual == expectedIsEqual, "gotten isEqual(="..tostring(isEqual)..") not the same as expected(="..tostring(expectedIsEqual)..")")
    callback2:setData(data1)

    -- cleanup test
end

function T_CallDef.T_copy()
    -- prepare test
    corelog.WriteToLog("* CallDef:copy() tests")

    -- test
    local copy = callback1:copy()
    assert(copy:isEqual(callback1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(callback1, compact)..")")

    -- cleanup test
end

--                        _  __ _                       _   _               _
--                       (_)/ _(_)                     | | | |             | |
--    ___ _ __   ___  ___ _| |_ _  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   / __| '_ \ / _ \/ __| |  _| |/ __| | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   \__ \ |_) |  __/ (__| | | | | (__  | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |___/ .__/ \___|\___|_|_| |_|\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/
--       | |
--       |_|

return T_CallDef
