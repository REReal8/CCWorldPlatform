local T_Inventory = {}

local corelog = require "corelog"

local Inventory = require "obj_inventory"

function T_Inventory.T_All()
    T_Inventory.T_IsItemTable()
    T_Inventory.T_IsSameItemTable()
    T_Inventory.T_ItemTableCopy()

    T_Inventory.T_IsSlotTable()
    T_Inventory.T_IsSameSlotTable()
    T_Inventory.T_SlotTableCopy()

    T_Inventory.T_new()
    T_Inventory.T_IsOfType()
    T_Inventory.T_isSame()
    T_Inventory.T_copy()
    T_Inventory.T_getItemTable()
end

local saplingItemName = "minecraft:birch_sapling"
local saplingCount1 = 10
local saplingCount2 = 10
local furnaceItemName = "minecraft:furnace"
local furnaceCount1 = 1
local chestItemName = "minecraft:chest"
local chestCount1 = 5
local itemTable1 = {
    [saplingItemName] = saplingCount1,
    [chestItemName] = chestCount1,
}
local itemTable2 = {
    [saplingItemName] = saplingCount2,
    [furnaceItemName] = furnaceCount1,
}

local compact = { compact = true }

function T_Inventory.T_IsItemTable()
    -- prepare test
    corelog.WriteToLog("* Inventory.IsItemTable() tests")

    -- test valid
    local isItemTable = Inventory.IsItemTable( itemTable1 )
    local expectedIsItemTable = true
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")

    -- test with wrong name type
    itemTable1[20] = 50
    isItemTable = Inventory.IsItemTable( itemTable1 )
    expectedIsItemTable = false
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")
    itemTable1[20] = nil

    -- test with wrong count type
    itemTable1.something = "a string"
    isItemTable = Inventory.IsItemTable( itemTable1 )
    expectedIsItemTable = false
    assert(isItemTable == expectedIsItemTable, "gotten IsItemTable(="..tostring(isItemTable)..") not the same as expected(="..tostring(expectedIsItemTable)..")")
    itemTable1.something = nil

    -- cleanup test
end

function T_Inventory.T_IsSameItemTable()
    -- prepare test
    corelog.WriteToLog("* Inventory.IsSameItemTable() tests")

    -- test same
    local isSameItemTable = Inventory.IsSameItemTable(itemTable1, itemTable1)
    local expectedIsSameItemTable = true
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- test with 2 empty lists
    isSameItemTable = Inventory.IsSameItemTable(
        { },
        { }
    )
    expectedIsSameItemTable = true
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- test with different items
    isSameItemTable = Inventory.IsSameItemTable(itemTable1, itemTable2)
    expectedIsSameItemTable = false
    assert(isSameItemTable == expectedIsSameItemTable, "gotten IsSameItemTable(="..tostring(isSameItemTable)..") not the same as expected(="..tostring(expectedIsSameItemTable)..")")

    -- cleanup test
end

function T_Inventory.T_ItemTableCopy()
    -- prepare test
    corelog.WriteToLog("* Inventory.ItemTableCopy() tests")

    -- test
    local copy = Inventory.ItemTableCopy(itemTable1)
    local expectedCopy = itemTable1
    assert(Inventory.IsSameItemTable(copy, expectedCopy), "gotten ItemTableCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(expectedCopy, compact)..")")

    -- cleanup test
end

local slotTable1 = {
    { name = saplingItemName, count = saplingCount1 },
    { name = chestItemName, count = chestCount1 },
}

local slotTable2 = {
    { name = saplingItemName, count = saplingCount2 },
    { name = furnaceItemName, count = furnaceCount1 },
}

function T_Inventory.T_IsSlotTable()
    -- prepare test
    corelog.WriteToLog("* Inventory.IsSlotTable() tests")

    -- test valid
    local isSlotTable = Inventory.IsSlotTable( slotTable1 )
    local expectedIsSlotTable = true
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")

    -- test with wrong slotItem name type
    slotTable1[1] = { name = 40, count = saplingCount1 }
    isSlotTable = Inventory.IsSlotTable( slotTable1 )
    expectedIsSlotTable = false
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")
    slotTable1[1] = { name = saplingItemName, count = saplingCount1 }

    -- test with wrong slotItem count type
    slotTable1[1] = { name = saplingItemName, count =  "a string" }
    isSlotTable = Inventory.IsSlotTable( slotTable1 )
    expectedIsSlotTable = false
    assert(isSlotTable == expectedIsSlotTable, "gotten IsSlotTable(="..tostring(isSlotTable)..") not the same as expected(="..tostring(expectedIsSlotTable)..")")
    slotTable1[1] = { name = saplingItemName, count = saplingCount1 }

    -- cleanup test
end

function T_Inventory.T_IsSameSlotTable()
    -- prepare test
    corelog.WriteToLog("* Inventory.IsSameSlotTable() tests")

    -- test same
    local isSameSlotTable = Inventory.IsSameSlotTable(slotTable1, slotTable1)
    local expectedIsSameSlotTable = true
    assert(isSameSlotTable == expectedIsSameSlotTable, "gotten IsSameSlotTable(="..tostring(isSameSlotTable)..") not the same as expected(="..tostring(expectedIsSameSlotTable)..")")

    -- test with 2 empty lists
    isSameSlotTable = Inventory.IsSameSlotTable(
        { },
        { }
    )
    expectedIsSameSlotTable = true
    assert(isSameSlotTable == expectedIsSameSlotTable, "gotten IsSameSlotTable(="..tostring(isSameSlotTable)..") not the same as expected(="..tostring(expectedIsSameSlotTable)..")")

    -- test with different items
    isSameSlotTable = Inventory.IsSameSlotTable(slotTable1, slotTable2)
    expectedIsSameSlotTable = false
    assert(isSameSlotTable == expectedIsSameSlotTable, "gotten IsSameSlotTable(="..tostring(isSameSlotTable)..") not the same as expected(="..tostring(expectedIsSameSlotTable)..")")

    -- cleanup test
end

function T_Inventory.T_SlotTableCopy()
    -- prepare test
    corelog.WriteToLog("* Inventory.SlotTableCopy() tests")

    -- test
    local copy = Inventory.SlotTableCopy(slotTable1)
    local expectedCopy = slotTable1
    assert(Inventory.IsSameSlotTable(copy, expectedCopy), "gotten SlotTableCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(expectedCopy, compact)..")")

    -- cleanup test
end

local inventory1 = Inventory:new({
    _slotTable  = slotTable1,
})

function T_Inventory.T_new()
    -- prepare test
    corelog.WriteToLog("* Inventory:new() tests")

    -- test full
    local inventory = Inventory:new({
        _slotTable  = Inventory.SlotTableCopy(slotTable1),
    })
    assert(Inventory.IsSameSlotTable(inventory:getSlotTable(), slotTable1), "gotten getSlotTable(="..textutils.serialize(inventory:getSlotTable(), compact)..") not the same as expected(="..textutils.serialize(slotTable1)..")")

    -- test default
    inventory = Inventory:new()
    assert(Inventory.IsSameSlotTable(inventory:getSlotTable(), {}), "gotten getSlotTable(="..textutils.serialize(inventory:getSlotTable(), compact)..") not the same as expected(="..textutils.serialize({})..")")

    -- cleanup test
end

function T_Inventory.T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* Inventory.IsOfType() tests")
    local inventory = Inventory:new({
        _slotTable  = Inventory.SlotTableCopy(slotTable1),
    })

    -- test valid
    local isOfType = Inventory.IsOfType(inventory)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = Inventory.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid _slotTable
    inventory._slotTable = 1000
    isOfType = Inventory.IsOfType(inventory)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    inventory._slotTable = Inventory.SlotTableCopy(slotTable1)

    -- cleanup test
end

function T_Inventory.T_isSame()
    -- prepare test
    corelog.WriteToLog("* Inventory:isSame() tests")
    local inventory2 = Inventory:new({
        _slotTable  = Inventory.SlotTableCopy(slotTable1),
    })

    -- test same
    local isSame = inventory1:isSame(inventory2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different
    inventory2:setSlotTable(slotTable2)
    isSame = inventory1:isSame(inventory2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    inventory2:setSlotTable(slotTable1)

    -- cleanup test
end

function T_Inventory.T_copy()
    -- prepare test
    corelog.WriteToLog("* Inventory:copy() tests")

    -- test
    local copy = inventory1:copy()
    assert(copy:isSame(inventory1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(inventory1, compact)..")")

    -- cleanup test
end

function T_Inventory.T_getItemTable()
    -- prepare test
    corelog.WriteToLog("* Inventory:getItemTable() tests")

    -- test
    local inventory = Inventory:new({
        _slotTable  = slotTable1,
    })
    local itemTable = inventory:getItemTable()
    local isSame = Inventory.IsSameItemTable(itemTable, itemTable1)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- cleanup test
end

return T_Inventory
