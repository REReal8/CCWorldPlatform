local Obj = {
}

local corelog = require "corelog"

local IObj = require "iobj"

--[[
    This module implements the class ("interface") Obj.

    It is typically used as base class for more advanced objects.
--]]

--    _                                     _   _               _
--   | |                                   | | | |             | |
--   | |__   __ _ ___  ___   _ __ ___   ___| |_| |__   ___   __| |___
--   | '_ \ / _` / __|/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   | |_) | (_| \__ \  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |_.__/ \__,_|___/\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/


--    _          _                    __                  _   _
--   | |        | |                  / _|                | | (_)
--   | |__   ___| |_ __   ___ _ __  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \ / _ \ | '_ \ / _ \ '__| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | | |  __/ | |_) |  __/ |    | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_| |_|\___|_| .__/ \___|_|    |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--                | |
--                |_|

function Obj.ObjArray_IsOfType(objArray, class)
    --[[
        This function checks if all objects in an array are of type 'class'
    ]]

    -- check table
    if type(objArray) ~= "table" then return false end

    -- check elements
    for i, obj in ipairs(objArray) do
        if not class.IsOfType(obj) then return false end
    end

    -- end
    return true
end

function Obj.ObjArray_IsSame(objArrayA, objArrayB)
    --[[
        This function checks if two arrays of objects are the same. The objects should also be in the same order in the array.
    ]]

    -- check input
--    if not Obj.ObjArray_IsOfType(objArrayA, class) or not Obj.ObjArray_IsOfType(objArrayB, class) then return false end
    if type(objArrayA) ~= "table" or type(objArrayB) ~= "table" then return false end

    -- check same size
    if table.getn(objArrayA) ~= table.getn(objArrayB) then return false end

    -- check same elements
    for i, objA in ipairs(objArrayA) do
        -- check same obj
        local objB = objArrayB[i]
        if not objA:isSame(objB) then return false end
    end

    -- end
	return true
end

function Obj.ObjArray_Copy(objArray)
    --[[
        This function creates a copy of an array of objects.
    ]]

    -- check input
    if type(objArray) ~= "table" then corelog.Error("Obj.ObjArray_Copy: invalid objArray: "..type(objArray)) return nil end

    local copy = {}
    -- copy elements
    for i, obj in ipairs(objArray) do
        copy[i] = obj:copy()
    end

    -- end
	return copy
end

function Obj.TransformToObjArray(objTableArray, class)
    --[[
        Transform an array with objTable's into an array of objects of type 'class'.

        Parameters:
            objTableArray       + (table) array with object tables
            class               + (Obj) class of objects to create
    --]]

    -- check input
    if type(objTableArray) ~= "table" then corelog.Error("Obj.TransformToObjArray: invalid objArray: "..type(objTableArray)) return nil end
    if not IObj.ImplementsInterface(class) then corelog.Error("Obj.TransformToObjArray: invalid class="..textutils.serialize(class)) return nil end

    local objArray = {}
    -- transform objectTable's
    for i, objTable in ipairs(objTableArray) do
        -- transform into obj if needed
        local obj = nil
        if class.IsOfType(objTable) then
            obj = objTable -- already an object of type 'class'
        else
            obj = class:new(objTable) -- transform
        end

        -- check obj obtained
        if class.IsOfType(obj) then
            -- add to array
            objArray[i] = obj
        else
            local className = "class"
            if class.getClassName then className = class:getClassName() end
            corelog.Warning("Obj.TransformToObjArray: failed transforming objTable(="..textutils.serialize(objTable)..") to a "..className.." object => skipped")
        end
    end

    -- end
	return objArray
end

return Obj
