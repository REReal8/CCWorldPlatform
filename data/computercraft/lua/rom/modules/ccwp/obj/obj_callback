local CallDef = require "obj_call_def"

local Callback = CallDef:new()

local corelog = require "corelog"

local InputChecker = require "input_checker"
local MethodExecutor = require "method_executor"

--[[
    This module implements the class Callback.

    A Callback defines a callback function and (minimum) callback data.
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function Callback:call(...)
    -- get & check input from description
    local checkSuccess, resultData = InputChecker.Check([[
        This method executes the callback with predefined callback data and the supplied data.

        Return value:
            ?                       - (?) return value of callback function

        Parameters:
            resultData              + (table) with second argument to supply to callback function, typically the return data of the task function
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("Callback:call: Invalid input") return nil end

    -- call method
    return MethodExecutor.CallModuleMethod(self._moduleName, self._methodName, { self._data, resultData })
end

function Callback.ErrorCall(callback)
    -- check for callback
    if not Callback.IsOfType(callback) then corelog.Warning("Callback.ErrorCall: Invalid callback (type="..type(callback)..")") return nil end

    -- call method
    return callback:call({success = false})
end

return Callback
