local corelog = {}
local coreevent = require "coreevent"
local coreassignment
local coreutils = require "coreutils"

local db	= {
	logfile			    = "/log/log.txt",
	assignmentLogFile   = "/log/coreassignment.log",
	projectsLogFile     = "/log/enterprise_projects.log",
	protocol		    = "corelog",
	loggerChannel	    = 65534,
	lastStack           = 0,
}

local monitorLeft	= nil
local monitorRight	= nil

function corelog.Init()
	-- place markers in the logfile
	corelog.WriteToLog("--- starting up ---", "overwrite")
	corelog.WriteToAssignmentLog("--- starting up assignments ---", nil, "overwrite")
	corelog.WriteToProjectsLog("--- starting up projects ---", nil, "overwrite")
end

function corelog.Setup()
	-- start sending messages when we are ready to receive them too
	coreevent.EventReadyFunction(EventReadySetup)

	-- let others check our pulse
	coreevent.AddEventListener(DoEventPulseRequest,	db.protocol, "pulse request")

	-- check if we have monitors on our side (and we are not a turtle, so a handheld or computer)
	if peripheral.getType("left") == "monitor" and peripheral.getType("right") == "monitor" and not turtle then
		-- get monitor handles
		monitorLeft		= peripheral.wrap("left")
		monitorRight	= peripheral.wrap("right")

		-- start at the bottom
		monitorLeft.clear()
		local w, h = monitorLeft.getSize()
		monitorLeft.setCursorPos(1,h)

		-- we will be the logger of this system
		coreassignment = coreassignment or require "coreassignment"
		coreassignment.RejectAllAssignments()

		-- listen to the logger port
		coreevent.OpenChannel(db.loggerChannel, db.protocol)

		-- listen to our events
		coreevent.AddEventListener(DoEventWriteToLog, db.protocol, "write to log")

		-- show who's boss!
		monitorLeft.clear()
		corelog.WriteToMonitor("me: --- starting up monitor ---", monitorLeft)
	end
end

function EventReadySetup()
	-- no need to do anything?
end

function corelog.WriteToLog(message, writeMode)
	-- set the default
	writeMode = writeMode or "append"

	-- write to the logfile
	coreutils.WriteToFile(db.logfile, message, writeMode)

	-- send message
	if monitorLeft then
		-- we are the logging station, don't send message
		corelog.WriteToMonitor("me: "..message, monitorLeft)
	else

		-- send message two whoever is loggin our stuff
		coreevent.SendMessage({
			channel		= db.loggerChannel,
			protocol	= db.protocol,
			subject		= "write to log",
			message		= {text = message} })
	end
end

function corelog.WriteToMonitor(message, monitor)
	-- default monitor
	monitor = monitor or monitorLeft

	-- write to an attached monitor if available (usefull for a status monitor screen)
	if monitor then
		local w, h = monitor.getSize()

		-- scroll the existing stuff up
		monitor.scroll(1)

		-- write the message
		monitor.write(message)

		-- set the cursus back at the start of the line
		monitor.setCursorPos(1,h)
	end
end

function corelog.Warning(message)
	-- write to the logfile
	coreutils.WriteToFile(db.logfile, "WARNING:", "append") -- ToDo: consider calling WriteToLog
	coreutils.WriteToFile(db.logfile, message, "append") -- ToDo: consider calling WriteToLog
end

function corelog.Error(message)
	-- write to the logfile
	coreutils.WriteToFile(db.logfile, "ERROR:", "append") -- ToDo: consider calling WriteToLog

	-- calling stack, just max once per tick
	if db.lastStack < os.clock() then

		-- reset
		db.lastStack = os.clock()

		-- write the callstack to the logfile
		coreutils.WriteToFile(db.logfile, debug.traceback())
	end

	-- requested messaage
	coreutils.WriteToFile(db.logfile, message, "append") -- ToDo: consider calling WriteToLog
end

function WriteToFormattedLog(message, id, logType, writeMode)
	-- set the default
	writeMode = writeMode or "append"

	-- write message to the logfile	in formatted log format
    local now = coreutils.UniversalTime()
    local computerId = os.getComputerID()
	local idStr = "assignment"
	local logFile = db.assignmentLogFile
	if logType == "projects" then
		idStr = "project"
		logFile = db.projectsLogFile
	end
	if id then
		idStr = idStr.." "..id.." | "
	else
		idStr = ""
	end
	coreutils.WriteToFile(logFile, "| time "..now.." | computer "..computerId.." | "..idStr..message.." |", writeMode)
end

function corelog.WriteToAssignmentLog(message, assignmentId, writeMode)
	WriteToFormattedLog(message, assignmentId, "assignment", writeMode)
end

function corelog.WriteToProjectsLog(message, projectId, writeMode)
	WriteToFormattedLog(message, projectId, "projects", writeMode)
end

function corelog.FindCaller(...) -- give ignore string as parameters. corelog.FindCaller("enterprise_projects", "enterprise_storage")
	local ignore = {method_executor = true}

	-- add all other keys to ignore
	for index, toIgnore in ipairs(arg) do ignore[ toIgnore ] = true end

	-- we don't need ourself (0) and the one calling this function (1), start witth 2
	local level = 2

	-- endless until we are at the end or found something
	while true do

		-- get the debug info
		local info = debug.getinfo(level, "Sl")

		-- at the end of the stack?
		if not info then return nil end

		-- just to be sure, skip C functions
		if info.what ~= "C" and ignore[info.short_src] == nil then -- not a C function and not in the ignore list

			-- Yahoo!
			return string.format("[%s]:%d", info.short_src, info.currentline)

		end

		-- still here, try the next level
		level = level + 1
	end
end

--                         _
--                        | |
--     _____   _____ _ __ | |_ ___
--    / _ \ \ / / _ \ '_ \| __/ __|
--   |  __/\ V /  __/ | | | |_\__ \
--    \___| \_/ \___|_| |_|\__|___/
--
--

function DoEventPulseRequest(subject, envelope)
	local fuelLevel

	-- computers don't have a fuel level
	if turtle	then fuelLevel = turtle.getFuelLevel()
				else fuelLevel = 0
	end

	-- send some information about us back
    coreevent.ReplyToMessage(envelope, "pulse response", {fuelLevel=fuelLevel})
end

function DoEventWriteToLog(subject, envelope)
	-- write the message on the monitor
	corelog.WriteToMonitor(envelope.from ..":".. envelope.message.text, monitorLeft)
end

return corelog
