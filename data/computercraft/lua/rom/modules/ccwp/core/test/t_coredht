local t_coredht = {}

local corelog = require "corelog"
local coredht = require "coredht"

local URL = require "obj_url"

function t_coredht.T_All()
    t_coredht.T_SaveResource()
    t_coredht.T_GetResource()
    t_coredht.T_DeleteResource()
    t_coredht.T_SaveResourceWithPort()
    t_coredht.T_GetResourceWithPort()
    t_coredht.T_DeleteResourceWithPort()
end

local resource = {
    aNumber     = 10,
    aString     = "top",
    aTable      = {_x= -10, _y= 0, _z= 1, _dx=0, _dy=1},
}
local uri = "ccwprp://resource/id=10/subid=7"
local resource2 = {
    aNumber     = 20,
    aString     = "down",
    aTable      = {_x= -20, _y= 0, _z= 1, _dx=0, _dy=1},
}
local uriWithPort = "ccwprp://resource:23/id=20/subid=77"

local compact = { compact = true }

local function SameATable(aTable1, aTable2)
    if aTable1 == nil and aTable2 == nil then return true end
    if aTable1 == nil or aTable2 == nil then return false end

    return aTable1.x == aTable2.x and aTable1.y == aTable2.y and aTable1.z == aTable2.z and aTable1.dx == aTable2.dx and aTable1.dy == aTable2.dy
end

local function SameResource(res1, res2)
    if res1 == nil and res2 == nil then return true end
    if res1 == nil or res2 == nil then return false end

    return res1.aNumber == res2.aNumber and res1.aString == res2.aString and SameATable(res1.aTable, res2.aTable)
end

function t_coredht.T_SaveResource()
    -- prepare test
    corelog.WriteToLog("* coredht.SaveResource() tests")
    local resourceLocator = URL:newFromURI(uri)

    -- test
    local resourceSaved = coredht.SaveResource(resource, resourceLocator)
    assert(SameResource(resource, resourceSaved), "saved resource(="..textutils.serialize(resourceSaved)..") not the same as expected(="..textutils.serialize(resource)..")")

    -- cleanup test
end

function t_coredht.T_SaveResourceWithPort()
    -- prepare test
    corelog.WriteToLog("* coredht.SaveResource (with port) tests")
    local resourceLocator = URL:newFromURI(uriWithPort)

    -- test
    local resourceSaved = coredht.SaveResource(resource2, resourceLocator)
    assert(SameResource(resource2, resourceSaved), "saved resource(="..textutils.serialize(resourceSaved, compact)..") not the same as expected(="..textutils.serialize(resource2, compact)..")")

    -- cleanup test
end

function t_coredht.T_GetResource()
    -- prepare test
    corelog.WriteToLog("* coredht.GetResource tests")
    local resourceLocator = URL:newFromURI(uri)

    -- test
    local resourceGotten = coredht.GetResource(resourceLocator)
    assert(SameResource(resource, resourceGotten), "gotten resource(="..textutils.serialize(resourceGotten, compact)..") not the same as expected(="..textutils.serialize(resource, compact)..")")

    -- cleanup test
end

function t_coredht.T_GetResourceWithPort()
    -- prepare test
    corelog.WriteToLog("* coredht.GetResource (with port) tests")
    local resourceLocator = URL:newFromURI(uriWithPort)

    -- test
    local resourceGotten = coredht.GetResource(resourceLocator)
    assert(SameResource(resource2, resourceGotten), "gotten resource(="..textutils.serialize(resourceGotten, compact)..") not the same as expected(="..textutils.serialize(resource2, compact)..")")

    -- cleanup test
end

function t_coredht.T_DeleteResource()
    -- prepare test
    corelog.WriteToLog("* coredht.DeleteResource tests")
    local resourceLocator = URL:newFromURI(uri)

    -- test
    coredht.DeleteResource(resourceLocator)
    local resourceGotten = coredht.GetResource(resourceLocator)
    assert(resourceGotten == nil, "gotten resource(="..textutils.serialize(resourceGotten, compact)..") not nil")

    -- cleanup test
end

function t_coredht.T_DeleteResourceWithPort()
    -- prepare test
    corelog.WriteToLog("* coredht.DeleteResource (with port) tests")
    local resourceLocator = URL:newFromURI(uriWithPort)

    -- test
    coredht.DeleteResource(resourceLocator)
    local resourceGotten = coredht.GetResource(resourceLocator)
    assert(resourceGotten == nil, "gotten resource(="..textutils.serialize(resourceGotten, compact)..") not nil")

    -- cleanup test
end

return t_coredht
