local enterprise_colonization = {}

local corelog = require "corelog"
local coredht = require "coredht"
local coremove = require "coremove"

local InputChecker = require "input_checker"
local MethodExecutor = require "method_executor"
local URL = require "obj_url"

local role_settler = require "role_settler"

local enterprise_projects = require "enterprise_projects"
local enterprise_turtle
local enterprise_forestry = require "enterprise_forestry"
local enterprise_factory = require "enterprise_factory"
local enterprise_shop = require "enterprise_shop"

local db = {
    dhtRoot     = "enterprise_colonization",
    hostName    = "colonization",
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function enterprise_colonization.CreateNewWorld_ASrv(...)
    -- get & check input from description
    local checkSuccess, callback, callbackData = InputChecker.Check([[
        This public async service creates a new CCWorldPlatform world.
            It bootstraps the world logic by building an initiating several enterprise (sites).

            The turtle should already have (either equiped or in it's inventory)
                one modem
                one axe
                one crafting station
                one birchSapling
            It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

            The function also defines the coordinate system by assuming the turtle starts at the location {x= 3, y= 2, z= 1, dx=0, dy=1}. This
            allows for the initial forest that is build to fit in the 6x6 grid that is used in layers with the lower left coordinate of the base
            of that forest being location {x= 0, y= 0, z= 1, dx=0, dy=1}

        Return value:
            nil

        Async service return value (to callback):
                                - (table)
                success         - (boolean) whether the service executed successfully

        Parameters:
            serviceData         - (table) data about the service
                <currently none>
            callback            + (string) name of function to call once service is ready
            callbackData        + (table) data to supply to callback function
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_colonization.CreateNewWorld_ASrv: Invalid input") return MethodExecutor.DoCallback(callback, callbackData, {success = false}) end

    -- ensure enterprise has a key in the dht
    if coredht.GetData(db.dhtRoot) == nil then
        -- create the entry
        coredht.SaveData({}, db.dhtRoot)

        -- reset forest
        enterprise_forestry.DeleteForests()
    end

    -- add default suppliers -- ToDo: consider dynamnic adding instances later similair to forests in enterprise_forestry
    enterprise_turtle = enterprise_turtle or require "enterprise_turtle"
    enterprise_shop.RegisterSupplier_SSrv({supplierLocator = enterprise_turtle.GetHostLocator_Att()})
    enterprise_shop.RegisterSupplier_SSrv({supplierLocator = enterprise_factory.GetHostLocator_Att()})

    -- construct arguments
    local startLocation             = {x= 3, y= 2, z= 1, dx=0, dy=1}
    local forestLocation            = {x= 0, y= 0, z= 1, dx=0, dy=1}
    local primaryTaskData =  {
        startLocation               = coremove.CopyLocation(startLocation),
    }

    local factoryLocation           = {x=12, y= 0, z= 1, dx=0, dy=1}
    local nTreeswanted = 6
    local settleData = {
        materialsHostLocator        = enterprise_shop.GetHostLocator_Att(),

        primaryTaskData             = primaryTaskData,
        startLocation               = coremove.CopyLocation(startLocation),

        initialiseCoordinatesMetaData   = role_settler.InitialiseCoordinates_MetaData(primaryTaskData),
        initialiseCoordinates_Task  = "role_settler.InitialiseCoordinates_Task",

        ingredientsSupplierLocator  = enterprise_shop.GetHostLocator_Att(), -- ToDo: somehow pass this to enterprise_energy

        factoryVersion0             = "v0",
        upgradeFalse                = false,

        forestLocation              = coremove.CopyLocation(forestLocation),
        forestLm1                   = -1,
        forestFirstTree             = 1,

        forestL0                    = 0,

        forestL1                    = 1,
        forestL2                    = 2,
        nTreeswanted                = nTreeswanted,

        energyL0                    = 0,
        energyL1                    = 1,
        energyL2                    = 2,
        energyL3                    = 3,

        collectCobbleStoneMetaData  = role_settler.CollectCobbleStone_MetaData(primaryTaskData),
        collectCobbleStone_Task     = "role_settler.CollectCobbleStone_Task",

        factoryLocation             = coremove.CopyLocation(factoryLocation),
        factoryVersion1             = "v1",

        factoryVersion2             = "v2",
        upgradeToV2                 = true,

        siloLocation                = {x=12, y=12, z= 1, dx=0, dy=1},
        type                        = "silo",
        siloType                    = "basic",
        topChests                   = 2,
        layers                      = 2,
    }

    -- create project definition
    local createNewWorldProjectDef = {
        steps   = { -- ToDo: introduce enterprise_energy.UpgradeSite_ASrv and wrap crreate steps in it as documented here https://docs.google.com/spreadsheets/d/1yqShiBSVzldGMauvwqLkRrJOjc38RUuAtjk7L1cR7Uk/edit#gid=91593168
            { stepName = "enterprise_energy.UpdateEnterprise_SSrv", async = false, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, keyDefSource = "energyL0" },
            }},
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , sourceStep = 0, keyDefSource = "initialiseCoordinates_Task" },
                { keyDef = "metaData"                   , sourceStep = 0, keyDefSource = "initialiseCoordinatesMetaData" },
                { keyDef = "taskData"                   , sourceStep = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , sourceStep = 0, keyDefSource = "startLocation" },
                { keyDef = "siteVersion"                , sourceStep = 0, keyDefSource = "factoryVersion0" },
                { keyDef = "upgrade"                    , sourceStep = 0, keyDefSource = "upgradeFalse" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_forestry.AddNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , sourceStep = 0, keyDefSource = "forestLocation" },
                { keyDef = "forestLevel"                , sourceStep = 0, keyDefSource = "forestLm1" },
                { keyDef = "nTrees"                     , sourceStep = 0, keyDefSource = "forestFirstTree" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_shop.RegisterSupplier_SSrv", async = false, stepDataDef = {
                { keyDef = "supplierLocator"            , sourceStep = 4, keyDefSource = "forestLocator" },
            }},
            { stepName = "enterprise_energy.UpdateEnterprise_SSrv", async = false, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, keyDefSource = "energyL1" },
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
            }},
            { stepName = "enterprise_forestry.UpgradeSite_ASrv", async = true, stepDataDef = {
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
                { keyDef = "targetLevel"                , sourceStep = 0, keyDefSource = "forestL0" },
                { keyDef = "targetNTrees"               , sourceStep = 0, keyDefSource = "forestFirstTree" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_energy.UpdateEnterprise_SSrv", async = false, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, keyDefSource = "energyL2" },
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
            }},
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , sourceStep = 0, keyDefSource = "collectCobbleStone_Task" },
                { keyDef = "metaData"                   , sourceStep = 0, keyDefSource = "collectCobbleStoneMetaData" },
                { keyDef = "taskData"                   , sourceStep = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , sourceStep = 0, keyDefSource = "factoryLocation" },
                { keyDef = "siteVersion"                , sourceStep = 0, keyDefSource = "factoryVersion1" },
                { keyDef = "upgrade"                    , sourceStep = 0, keyDefSource = "upgradeFalse" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_factory.StopAndDismantleSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , sourceStep = 0, keyDefSource = "startLocation" },
                { keyDef = "siteVersion"                , sourceStep = 0, keyDefSource = "factoryVersion0" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_forestry.UpgradeSite_ASrv", async = true, stepDataDef = {
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
                { keyDef = "targetLevel"                , sourceStep = 0, keyDefSource = "forestL1" },
                { keyDef = "targetNTrees"               , sourceStep = 0, keyDefSource = "nTreeswanted" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_forestry.UpgradeSite_ASrv", async = true, stepDataDef = {
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
                { keyDef = "targetLevel"                , sourceStep = 0, keyDefSource = "forestL2" },
                { keyDef = "targetNTrees"               , sourceStep = 0, keyDefSource = "nTreeswanted" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , sourceStep = 0, keyDefSource = "factoryLocation" },
                { keyDef = "siteVersion"                , sourceStep = 0, keyDefSource = "factoryVersion2" },
                { keyDef = "upgrade"                    , sourceStep = 0, keyDefSource = "upgradeToV2" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_storage.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "location"                   , sourceStep = 0, keyDefSource = "siloLocation" },
                { keyDef = "type"                       , sourceStep = 0, keyDefSource = "type" },
                { keyDef = "siloType"                   , sourceStep = 0, keyDefSource = "siloType" },
                { keyDef = "topChests"                  , sourceStep = 0, keyDefSource = "topChests" },
                { keyDef = "layers"                     , sourceStep = 0, keyDefSource = "layers" },
                { keyDef = "materialsHostLocator"       , sourceStep = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_energy.UpdateEnterprise_SSrv", async = false, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, keyDefSource = "energyL3" },
                { keyDef = "forestLocator"              , sourceStep = 4, keyDefSource = "forestLocator" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , sourceStep = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , sourceStep = 2, keyDefSource = "success" },
                { keyDef = "success3"                   , sourceStep = 3, keyDefSource = "success" },
                { keyDef = "success4"                   , sourceStep = 4, keyDefSource = "success" },
                { keyDef = "success5"                   , sourceStep = 5, keyDefSource = "success" },
                { keyDef = "success6"                   , sourceStep = 6, keyDefSource = "success" },
                { keyDef = "success7"                   , sourceStep = 7, keyDefSource = "success" },
                { keyDef = "success8"                   , sourceStep = 8, keyDefSource = "success" },
                { keyDef = "success9"                   , sourceStep = 9, keyDefSource = "success" },
                { keyDef = "success10"                  , sourceStep = 10, keyDefSource = "success" },
                { keyDef = "success11"                  , sourceStep = 11, keyDefSource = "success" },
                { keyDef = "success12"                  , sourceStep = 12, keyDefSource = "success" },
                { keyDef = "success13"                  , sourceStep = 13, keyDefSource = "success" },
                { keyDef = "success14"                  , sourceStep = 14, keyDefSource = "success" },
                { keyDef = "success15"                  , sourceStep = 15, keyDefSource = "success" },
                { keyDef = "success16"                  , sourceStep = 16, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , sourceStep = 17, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = createNewWorldProjectDef,
        projectData = settleData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

local function GetHostLocator_Att()
    --[[
        Attribute locating this enterprise.

        Return value:
            hostLocator             - (URL) locating this enterprise

        Parameters:
            nil
    --]]

    local hostURL = URL:new()
    hostURL:setHost(db.hostName)

    return hostURL
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function IsColonizationURL_QSrv(...)
    -- get & check input from description
    local checkSuccess, aURL = InputChecker.Check([[
        This sync public service answers the question if a URL is that of a Colonization.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully

        Parameters:
            queryData               - (table) data about the query
                aURL                + (URL) that needs to be queried
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_colonization.IsColonizationURL_QSrv: Invalid input") return {success = false} end

    -- check if of this Supplier
    local host = aURL:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_colonization.IsColonizationURL_QSrv: Invalid host input in URL (="..aURL:getURI()..").") return {success = false} end
    if host == db.hostName then
        return {success = true}
    else
        return {success = false}
    end
end

return enterprise_colonization
