local enterprise_colonization = {}

local corelog = require "corelog"

local InputChecker = require "input_checker"
local Callback = require "obj_callback"
local TaskCall = require "obj_task_call"

local Location = require "obj_location"

local role_settler = require "role_settler"

local enterprise_projects = require "enterprise_projects"
local enterprise_turtle
local enterprise_shop = require "enterprise_shop"

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function enterprise_colonization.CreateNewWorld_ASrv(...)
    -- get & check input from description
    local checkSuccess, callback = InputChecker.Check([[
        This public async service creates a new CCWorldPlatform world.
            It bootstraps the world logic by building an initiating several enterprise (sites).

            The turtle should already have (either equiped or in it's inventory)
                one modem
                one diamon axe
                one crafting table
                one birchSapling
            It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

            The function also defines the coordinate system by assuming the turtle starts at the Location {_x= 3, _y= 2, _z= 1, _dx=0, _dy=1}. This
            allows for the initial forest that is build to fit in the 6x6 grid that is used in layers with the lower left coordinate of the base
            of that forest being Location {_x= 0, _y= 0, _z= 1, _dx=0, _dy=1}

        Return value:
                                - (boolean) whether the service was scheduled successfully

        Async service return value (to Callback):
                                - (table)
                success         - (boolean) whether the service executed successfully

        Parameters:
            serviceData         - (table) data about the service
                <currently none>
            callback            + (Callback) to call once service is ready
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_colonization.CreateNewWorld_ASrv: Invalid input") return Callback.ErrorCall(callback) end

    -- ToDo: Controle of aan de voorwaarden is voldaan, modem, axe, crafting table, birch sappling

    -- ToDo: instelling van de 3,2,1 coordianten bij start, lijkt nu niet meer te werken

    -- register current turtle in shop
    -- ToDo: figure out where/ how to register (other) turtles that get added
    enterprise_turtle = enterprise_turtle or require "enterprise_turtle"
    local currentTurtleId = os.getComputerID()
    local currentTurtleLocator = enterprise_turtle:getTurtleLocator(tostring(currentTurtleId)) if not currentTurtleLocator then corelog.Error("enterprise_colonization.CreateNewWorld_ASrv: Failed obtaining turtleLocator for turtle "..currentTurtleId) return Callback.ErrorCall(callback) end
    local serviceResult = enterprise_shop.RegisterItemSupplier_SSrv({itemSupplierLocator = currentTurtleLocator}) if not serviceResult.success then corelog.Error("failed registering Turtle in Shop") return Callback.ErrorCall(callback) end

    -- construct arguments
    local startLocation             = Location:new({_x= 3, _y= 2, _z= 1, _dx=0, _dy=1})
    local forestLocation            = Location:new({_x= 0, _y= 0, _z= 1, _dx=0, _dy=1})
    local initialiseCoordinatesTaskData =  {
        startLocation               = startLocation:copy(),
    }
    local collectCobbleStoneTaskData =  {
        startLocation               = startLocation:copy(),
    }

    local factoryLocation           = Location:new({_x=12, _y= 0, _z= 1, _dx=0, _dy=1})
    local nTreeswanted = 6
    local settleData = {
        materialsItemSupplierLocator    = enterprise_shop.GetShopLocator(),

        startLocation                   = startLocation:copy(),

        initialiseCoordinatesMetaData   = role_settler.InitialiseCoordinates_MetaData(initialiseCoordinatesTaskData),
        initialiseCoordinatesTaskCall   = TaskCall:new({ _moduleName = "role_settler", _methodName = "InitialiseCoordinates_Task", _data = initialiseCoordinatesTaskData, }),

        ingredientsItemSupplierLocator  = enterprise_shop.GetShopLocator(), -- ToDo: somehow pass this to enterprise_turtle

        factoryVersion0                 = "v0",
        upgradeFalse                    = false,

        forestLocation                  = forestLocation:copy(),
        forestLm1                       = -1,
        forestFirstTree                 = 1,

        forestL0                        = 0,

        forestL1                        = 1,
        forestL2                        = 2,
        nTreeswanted                    = nTreeswanted,

        energyL0                        = 0,
        energyL1                        = 1,
        energyL2                        = 2,
        energyL3                        = 3,

        collectCobbleStoneMetaData      = role_settler.CollectCobbleStone_MetaData(collectCobbleStoneTaskData),
        collectCobbleStoneTaskCall      = TaskCall:new({ _moduleName = "role_settler", _methodName = "CollectCobbleStone_Task", _data = collectCobbleStoneTaskData, }),

        factoryLocation                 = factoryLocation:copy(),
        factoryVersion1                 = "v1",

        factoryVersion2                 = "v2",
        upgradeToV2                     = true,

        siloLocation                    = Location:new({_x=12, _y=12, _z= 1, _dx=0, _dy=1}),
        type                            = "silo",
        topChests                       = 2,
        layers                          = 2,
    }

    -- create project definition
    local createNewWorldProjectDef = {
        steps   = { -- ToDo: introduce enterprise_energy.UpgradeSite_ASrv and wrap create steps in it as documented here https://docs.google.com/spreadsheets/d/1yqShiBSVzldGMauvwqLkRrJOjc38RUuAtjk7L1cR7Uk/edit#gid=91593168
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL0" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_assignmentboard", serviceName = "DoAssignment_ASrv" }, stepDataDef = {
                { keyDef = "metaData"                   , sourceStep = 0, sourceKeyDef = "initialiseCoordinatesMetaData" },
                { keyDef = "taskCall"                   , sourceStep = 0, sourceKeyDef = "initialiseCoordinatesTaskCall" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_manufacturing", serviceName = "BuildAndStartNewSite_ASrv" }, stepDataDef = {
                { keyDef = "baseLocation"                   , sourceStep = 0, sourceKeyDef = "startLocation" },
                { keyDef = "siteVersion"                    , sourceStep = 0, sourceKeyDef = "factoryVersion0" },
                { keyDef = "upgrade"                        , sourceStep = 0, sourceKeyDef = "upgradeFalse" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "RegisterItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 3, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_forestry", serviceName = "AddNewSite_ASrv" }, stepDataDef = {
                { keyDef = "baseLocation"                   , sourceStep = 0, sourceKeyDef = "forestLocation" },
                { keyDef = "forestLevel"                    , sourceStep = 0, sourceKeyDef = "forestLm1" },
                { keyDef = "nTrees"                         , sourceStep = 0, sourceKeyDef = "forestFirstTree" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "RegisterItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 5, sourceKeyDef = "forestLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL1" },
                { keyDef = "forestLocator"              , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "factoryLocator"             , sourceStep = 3, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_forestry", serviceName = "UpgradeSite_ASrv" }, stepDataDef = {
                { keyDef = "forestLocator"                  , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "targetLevel"                    , sourceStep = 0, sourceKeyDef = "forestL0" },
                { keyDef = "targetNTrees"                   , sourceStep = 0, sourceKeyDef = "forestFirstTree" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL2" },
                { keyDef = "forestLocator"              , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "factoryLocator"             , sourceStep = 3, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_assignmentboard", serviceName = "DoAssignment_ASrv" }, stepDataDef = {
                { keyDef = "metaData"                   , sourceStep = 0, sourceKeyDef = "collectCobbleStoneMetaData" },
                { keyDef = "taskCall"                   , sourceStep = 0, sourceKeyDef = "collectCobbleStoneTaskCall" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_manufacturing", serviceName = "BuildAndStartNewSite_ASrv" }, stepDataDef = {
                { keyDef = "baseLocation"                   , sourceStep = 0, sourceKeyDef = "factoryLocation" },
                { keyDef = "siteVersion"                    , sourceStep = 0, sourceKeyDef = "factoryVersion1" },
                { keyDef = "upgrade"                        , sourceStep = 0, sourceKeyDef = "upgradeFalse" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "RegisterItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 11, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL3" },
                { keyDef = "forestLocator"              , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "factoryLocator"             , sourceStep = 11, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "DelistItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 3, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_manufacturing", serviceName = "StopAndDismantleSite_ASrv" }, stepDataDef = {
                { keyDef = "siteLocator"                    , sourceStep = 3, sourceKeyDef = "siteLocator" },
                { keyDef = "baseLocation"                   , sourceStep = 0, sourceKeyDef = "startLocation" },
                { keyDef = "siteVersion"                    , sourceStep = 0, sourceKeyDef = "factoryVersion0" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_forestry", serviceName = "UpgradeSite_ASrv" }, stepDataDef = {
                { keyDef = "forestLocator"                  , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "targetLevel"                    , sourceStep = 0, sourceKeyDef = "forestL1" },
                { keyDef = "targetNTrees"                   , sourceStep = 0, sourceKeyDef = "nTreeswanted" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_forestry", serviceName = "UpgradeSite_ASrv" }, stepDataDef = {
                { keyDef = "forestLocator"                  , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "targetLevel"                    , sourceStep = 0, sourceKeyDef = "forestL2" },
                { keyDef = "targetNTrees"                   , sourceStep = 0, sourceKeyDef = "nTreeswanted" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_manufacturing", serviceName = "BuildAndStartNewSite_ASrv" }, stepDataDef = {
                { keyDef = "baseLocation"                   , sourceStep = 0, sourceKeyDef = "factoryLocation" },
                { keyDef = "siteVersion"                    , sourceStep = 0, sourceKeyDef = "factoryVersion2" },
                { keyDef = "upgrade"                        , sourceStep = 0, sourceKeyDef = "upgradeToV2" },
                { keyDef = "siteLocator"                    , sourceStep = 11, sourceKeyDef = "siteLocator" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "RegisterItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 18, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL3" },
                { keyDef = "forestLocator"              , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "factoryLocator"             , sourceStep = 18, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "DelistItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"        , sourceStep = 11, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_storage", serviceName = "BuildAndStartNewSite_ASrv" }, stepDataDef = {
                { keyDef = "location"                       , sourceStep = 0, sourceKeyDef = "siloLocation" },
                { keyDef = "type"                           , sourceStep = 0, sourceKeyDef = "type" },
                { keyDef = "topChests"                      , sourceStep = 0, sourceKeyDef = "topChests" },
                { keyDef = "layers"                         , sourceStep = 0, sourceKeyDef = "layers" },
                { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_shop", serviceName = "RegisterItemSupplier_SSrv" }, stepDataDef = {
                { keyDef = "itemSupplierLocator"            , sourceStep = 22, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_energy", serviceName = "UpdateEnterprise_SSrv" }, stepDataDef = {
                { keyDef = "enterpriseLevel"            , sourceStep = 0, sourceKeyDef = "energyL3" },
                { keyDef = "forestLocator"              , sourceStep = 5, sourceKeyDef = "forestLocator" },
                { keyDef = "factoryLocator"             , sourceStep = 18, sourceKeyDef = "siteLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_projects", serviceName = "AreAllTrue_QSrv" }, stepDataDef = {
                { keyDef = "success1"                   , sourceStep = 1, sourceKeyDef = "success" },
                { keyDef = "success2"                   , sourceStep = 2, sourceKeyDef = "success" },
                { keyDef = "success3"                   , sourceStep = 3, sourceKeyDef = "success" },
                { keyDef = "success4"                   , sourceStep = 4, sourceKeyDef = "success" },
                { keyDef = "success5"                   , sourceStep = 5, sourceKeyDef = "success" },
                { keyDef = "success6"                   , sourceStep = 6, sourceKeyDef = "success" },
                { keyDef = "success7"                   , sourceStep = 7, sourceKeyDef = "success" },
                { keyDef = "success8"                   , sourceStep = 8, sourceKeyDef = "success" },
                { keyDef = "success9"                   , sourceStep = 9, sourceKeyDef = "success" },
                { keyDef = "success10"                  , sourceStep = 10, sourceKeyDef = "success" },
                { keyDef = "success11"                  , sourceStep = 11, sourceKeyDef = "success" },
                { keyDef = "success12"                  , sourceStep = 12, sourceKeyDef = "success" },
                { keyDef = "success13"                  , sourceStep = 13, sourceKeyDef = "success" },
                { keyDef = "success14"                  , sourceStep = 14, sourceKeyDef = "success" },
                { keyDef = "success15"                  , sourceStep = 15, sourceKeyDef = "success" },
                { keyDef = "success16"                  , sourceStep = 16, sourceKeyDef = "success" },
                { keyDef = "success17"                  , sourceStep = 17, sourceKeyDef = "success" },
                { keyDef = "success18"                  , sourceStep = 18, sourceKeyDef = "success" },
                { keyDef = "success19"                  , sourceStep = 19, sourceKeyDef = "success" },
                { keyDef = "success20"                  , sourceStep = 20, sourceKeyDef = "success" },
                { keyDef = "success21"                  , sourceStep = 21, sourceKeyDef = "success" },
                { keyDef = "success22"                  , sourceStep = 22, sourceKeyDef = "success" },
                { keyDef = "success23"                  , sourceStep = 23, sourceKeyDef = "success" },
                { keyDef = "success23"                  , sourceStep = 24, sourceKeyDef = "success" },
            }},
        },
        returnData  = {
--            { keyDef = "success"                        , sourceStep = 25, sourceKeyDef = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = createNewWorldProjectDef,
        projectData = settleData,
    }

    -- start project
    return enterprise_projects.StartProject_ASrv(projectServiceData, callback)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

return enterprise_colonization
