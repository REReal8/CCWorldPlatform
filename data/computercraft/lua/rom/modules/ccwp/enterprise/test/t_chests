local t_chests = {}

local corelog = require "corelog"

local Callback = require "obj_callback"

local Location = require "obj_location"

local enterprise_projects = require "enterprise_projects"
local enterprise_chests = require "enterprise_chests"

function t_chests.T_All()
    -- service methods
    t_chests.T_hostMObj_SSrv_Chest()
    t_chests.T_DelistChest_ASrv()
end

local testStartLocation  = Location:new({_x= -6, _y= 0, _z= 1, _dx=0, _dy=1})
local testStartLocation2  = Location:new({_x= -6, _y= 6, _z= 1, _dx=0, _dy=1})

local callback = Callback:new({
    _moduleName     = "t_main",
    _methodName     = "Func1_Callback",
    _data           = { },
})

function t_chests.T_RegisterAndUpdateChest()
    corelog.WriteToLog("* Test Register and Update chest")

    -- create project
    local projectData = {
        chestLocation        = testStartLocation2:getRelativeLocation(2, 5, 0),
        chestAccessDirection = "back"
    }
    local projectServiceData = {
        projectDef  = t_chests.GetRegisterAndUpdateChestProjectDef(),
        projectData = projectData,
        projectMeta = { title = "Testing", description = "Register and update chest" },
    }

    -- start project
    return enterprise_projects.StartProject_ASrv(projectServiceData, callback)
end

function t_chests.GetRegisterAndUpdateChestProjectDef()
    return {
        steps = {
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_chests", serviceName = "RegisterChest_SSrv" }, stepDataDef = {
                { keyDef = "location"           , sourceStep = 0, sourceKeyDef = "chestLocation" },
                { keyDef = "accessDirection"    , sourceStep = 0, sourceKeyDef = "chestAccessDirection" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_chests", serviceName = "UpdateChestRecord_ASrv" }, stepDataDef = {
                { keyDef = "chestLocator"       , sourceStep = 1, sourceKeyDef = "mobjLocator" },
            }},
        },
        returnData = {
            { keyDef = "chestLocator"           , sourceStep = 1, sourceKeyDef = "mobjLocator" },
        }
    }
end

function t_chests.T_hostMObj_SSrv_Chest()
    -- prepare test
    local className = "Chest"
    corelog.WriteToLog("* enterprise_chests:hostMObj_SSrv() ("..className..") tests")
    local constructParameters = {
        location        = testStartLocation:getRelativeLocation(2, 5, 0),
        accessDirection = "top"
    }

    -- test
    local result = enterprise_chests:hostMObj_SSrv({className = className, constructParameters = constructParameters,})
    assert(result.success, "failed hosting "..className)
    local mobjLocator = result.mobjLocator
    assert(mobjLocator, "failed obtaining mobjLocator")
    local mobj = enterprise_chests:getObject(mobjLocator)
    assert(mobj, "failed obtaining mobj")

    -- cleanup test
    mobj:destruct()
    enterprise_chests:deleteResource(mobjLocator)
end

function t_chests.T_DelistChest_ASrv()
    -- prepare test
    local className = "Chest"
    corelog.WriteToLog("* enterprise_chests.DelistChest_ASrv() tests")
    local constructParameters = {
        location        = testStartLocation:getRelativeLocation(2, 5, 0),
        accessDirection = "top"
    }
    local objLocator = enterprise_chests:hostMObj_SSrv({className = className, constructParameters = constructParameters}).mobjLocator if not objLocator then corelog.Error("failed registering Obj") return end
    local DelistChest_ASrv_callback = Callback:new({
        _moduleName     = "t_chests",
        _methodName     = "DelistChest_ASrv_callback",
        _data           = {
            ["objLocator"]                      = objLocator,
        },
    })

    -- test
    return enterprise_chests.DelistChest_ASrv({ chestLocator = objLocator}, DelistChest_ASrv_callback)
end

function t_chests.DelistChest_ASrv_callback(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")

    local objLocator = callbackData["objLocator"]
    local objResourceTable = enterprise_chests:getResource(objLocator)
    assert(not objResourceTable, "Obj wasn't deleted")

    -- cleanup test

    -- end
    return true
end

return t_chests
