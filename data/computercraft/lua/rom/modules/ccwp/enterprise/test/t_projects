local t_projects = {}

local corelog = require "corelog"

local enterprise_projects = require "enterprise_projects"

function t_projects.T_All()
    t_projects.T_AreAllTrue_QSrv()
    t_projects.T_DeleteProjects()
    t_projects.T_StartProject_ASrv()
end

function t_projects.T_AreAllTrue_QSrv()
    -- prepare test
    corelog.WriteToLog("* enterprise_projects.AreAllTrue_QSrv() tests")
    local serviceData = {
        booleanArg1 = true,
        booleanArg2 = true,
        booleanArg3 = true,
        booleanArg4 = true,
    }

    -- test all boolean true
    local result = enterprise_projects.AreAllTrue_QSrv(serviceData)
    local expectedSuccess = true
    assert(result.success, "gotten AreAllTrue_QSrv(="..tostring(result.success)..") not the same as expected(="..tostring(expectedSuccess)..")")

    -- test ignore none boolean arguments
    serviceData.noneBooleanArg1 = "none boolean Arg1"
    serviceData.noneBooleanArg2 = "none boolean Arg2"
    result = enterprise_projects.AreAllTrue_QSrv(serviceData)
    expectedSuccess = true
    assert(result.success, "gotten AreAllTrue_QSrv(="..tostring(result.success)..") not the same as expected(="..tostring(expectedSuccess)..")")

    -- test one boolean false
    serviceData.booleanArg3 = false
    result = enterprise_projects.AreAllTrue_QSrv(serviceData)
    expectedSuccess = false
    assert(not result.success, "gotten AreAllTrue_QSrv(="..tostring(result.success)..") not the same as expected(="..tostring(expectedSuccess)..")")
    serviceData.booleanArg3 = true

    -- cleanup test
end

local callbackTestValue = "some callback data"
local testArgValue20 = 20
local testArgValue222 = 222
local testArgValue44 = 44

function t_projects.T_StartProject_ASrv()
    -- prepare test
    corelog.WriteToLog("* enterprise_projects.StartProject_ASrv() tests")
    local projectDef = {
        steps   = {
            { stepName = "enterprise_test.Test_SSrv", async = false, stepDataDef = {
                { keyDef = "testArg"        , valueSource = 0, keyDefSource = "testArgSource" },
            }},
            { stepName = "enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv", async = true, stepDataDef = {
                { keyDef = "testArg"        , valueSource = 0, keyDefSource = "testArgSource" },
            }},
            { stepName = "enterprise_test.Test_SSrv", async = false, stepDataDef = {
                { keyDef = "testArg"        , valueSource = 0, keyDefSource = "testTableSource.key3.nKey2" },
            }},
            { stepName = "enterprise_test.Test_SSrv", async = false, stepDataDef = {
                { keyDef = "testArg"        , valueSource = 0, keyDefSource = "testTable4" },
                { keyDef = "testArg.field4" , valueSource = 0, keyDefSource = "testTableSource2.key4" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"       , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"       , valueSource = 2, keyDefSource = "success" },
                { keyDef = "success3"       , valueSource = 3, keyDefSource = "success" },
                { keyDef = "success4"       , valueSource = 4, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "testBArg0"          , valueSource = 0, keyDefSource = "testArgSource" },
            { keyDef = "testBArg1"          , valueSource = 1, keyDefSource = "input" },
            { keyDef = "testBArg2"          , valueSource = 2, keyDefSource = "input" },
            { keyDef = "testBArg3"          , valueSource = 3, keyDefSource = "input" },
            { keyDef = "testBArg4"          , valueSource = 4, keyDefSource = "input" },
            { keyDef = "success"            , valueSource = 5, keyDefSource = "success" },
        }
    }
    local projectData = {
        testArgSource = testArgValue20,
        testTableSource = {
            key1 = 11,
            key2 = 22,
            key3 = {
                nKey1 = 111,
                nKey2 = testArgValue222,
                nKey3 = 333,
            }
        },
        testTableSource2 = {
            key4 = testArgValue44,
            key5 = 55,
        },
        testTable4 = { },
    }
    local callbackFunction = "t_projects.StartProject_ASrv_Callback"
    local callbackData = { [0] = callbackTestValue }
    local projectServiceData = {
        projectDef  = projectDef,
        projectData = projectData,
    }

    -- test
    enterprise_projects.StartProject_ASrv(projectServiceData, callbackFunction, callbackData)
end

function t_projects.StartProject_ASrv_Callback(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")
    local callbackValue = callbackData[0]
    local expectedCallbackValue = callbackTestValue
    assert(callbackValue == expectedCallbackValue, "gotten callbackValue(="..(callbackValue or "nil")..") not the same as expected(="..expectedCallbackValue..")")
    local testBArg = serviceResults.testBArg0
    local expectedTestBArg = testArgValue20
    assert(testBArg == expectedTestBArg, "gotten testBArg(="..testBArg..") not the same as expected(="..expectedTestBArg..")")
    testBArg = serviceResults.testBArg1
    expectedTestBArg = testArgValue20
    assert(testBArg == expectedTestBArg, "gotten testBArg(="..testBArg..") not the same as expected(="..expectedTestBArg..")")
    testBArg = serviceResults.testBArg2
    expectedTestBArg = testArgValue20
    assert(testBArg == expectedTestBArg, "gotten testBArg(="..testBArg..") not the same as expected(="..expectedTestBArg..")")
    testBArg = serviceResults.testBArg3
    expectedTestBArg = testArgValue222
    assert(testBArg == expectedTestBArg, "gotten testBArg(="..testBArg..") not the same as expected(="..expectedTestBArg..")")
    testBArg = serviceResults.testBArg4.field4
    expectedTestBArg = testArgValue44
    assert(testBArg == expectedTestBArg, "gotten testBArg(="..testBArg..") not the same as expected(="..expectedTestBArg..")")

    -- cleanup test
end

function t_projects.T_DeleteProjects()
    -- prepare test
    corelog.WriteToLog("* enterprise_projects.DeleteProjects() test")

    -- test
    enterprise_projects.DeleteProjects()
    local nProjects = enterprise_projects.GetNumberOfProjects_Att()
    local expectedNProjects = 0
    assert(nProjects == expectedNProjects, "gotten nProjects(="..nProjects..") not the same as expected(="..expectedNProjects..")")

    -- cleanup test
end

return t_projects
