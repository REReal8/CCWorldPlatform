local t_isp = {}

local corelog = require "corelog"
local coremove = require "coremove"

local Callback = require "obj_callback"

local URL = require "obj_url"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_projects = require "enterprise_projects"
local enterprise_isp = require "enterprise_isp"

local t_chests = require "test.t_chests"

function t_isp.T_All()
    t_isp.T_AddItemsLocators()
end

local testStartLocation  = {x= -6, y= 0, z= 1, dx=0, dy=1}
local testStartLocation2  = {x= -6, y= 6, z= 1, dx=0, dy=1}
local itemsQuery = {
    ["minecraft:birch_log"] = 3,
    ["minecraft:torch"]     = 5,
}

local storageURI = "ccwprp://storage"
local queryPartURI = "?minecraft:birch_log=1&minecraft:torch=5"
local storageQueryURI = storageURI.."/site=2/outputchest=4/"..queryPartURI
local factoryInputChestURI = "ccwprp://factory/site=3/inputchest=2"
local factoryOutputChestURI = "ccwprp://factory/site=3/ouputchest=1"

local callback = Callback:new({
    _moduleName     = "t_main",
    _methodName     = "Func1_Callback",
    _data           = {"some callback data"},
})

function t_isp.T_TransferItemsFromTo_Chests()
    corelog.WriteToLog("* Test TransferItemsFromTo_ASrv between chests:")

    -- create project definition
    local transferItemsBetweenChestsProjectDef = {
        steps   = {
            -- preparation
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_projects", serviceName = "StartProject_ASrv" }, stepDataDef = {
                { keyDef = "projectDef"                 , sourceStep = 0, sourceKeyDef = "projectDef1" },
                { keyDef = "projectData"                , sourceStep = 0, sourceKeyDef = "projectData1" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_chests", serviceName = "GetItemsLocator_SSrv" }, stepDataDef = {
                { keyDef = "chestLocator"               , sourceStep = 1, sourceKeyDef = "chestLocator" },
                { keyDef = "itemsQuery"                 , sourceStep = 0, sourceKeyDef = "itemsToTransferQuery" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_projects", serviceName = "StartProject_ASrv" }, stepDataDef = {
                { keyDef = "projectDef"                 , sourceStep = 0, sourceKeyDef = "projectDef2" },
                { keyDef = "projectData"                , sourceStep = 0, sourceKeyDef = "projectData2" },
            }},

            -- TransferItemsFromTo_ASrv
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_isp", serviceName = "TransferItemsFromTo_ASrv" }, stepDataDef = {
                { keyDef = "sourceItemsLocator"         , sourceStep = 2, sourceKeyDef = "itemsLocator" },
                { keyDef = "destinationStorageLocator"  , sourceStep = 3, sourceKeyDef = "chestLocator" },
            }},

            -- cleanup
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_chests", serviceName = "DelistChest_ASrv" }, stepDataDef = {
                { keyDef = "chestLocator"               , sourceStep = 1, sourceKeyDef = "chestLocator" },
            }},
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_chests", serviceName = "DelistChest_ASrv" }, stepDataDef = {
                { keyDef = "chestLocator"               , sourceStep = 3, sourceKeyDef = "chestLocator" },
            }},

            -- wrap-up
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_projects", serviceName = "AreAllTrue_QSrv" }, stepDataDef = {
                { keyDef = "success1"                   , sourceStep = 1, sourceKeyDef = "success" },
                { keyDef = "success2"                   , sourceStep = 2, sourceKeyDef = "success" },
                { keyDef = "success3"                   , sourceStep = 3, sourceKeyDef = "success" },
                { keyDef = "success4"                   , sourceStep = 4, sourceKeyDef = "success" },
                { keyDef = "success5"                   , sourceStep = 5, sourceKeyDef = "success" },
                { keyDef = "success6"                   , sourceStep = 6, sourceKeyDef = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , sourceStep = 7, sourceKeyDef = "success" },
            { keyDef = "destinationItemsLocator"        , sourceStep = 4, sourceKeyDef = "destinationItemsLocator" },
        }
    }
    local projectServiceData = {
        projectDef  = transferItemsBetweenChestsProjectDef,
        projectData = {
            -- chest 1
            projectDef1     = t_chests.GetRegisterAndUpdateChestProjectDef(),
            projectData1    = {
                chestLocation        = coremove.GetRelativeLocation(testStartLocation, 2, 5, 0),
                chestAccessDirection = "top",
            },

            -- query
            itemsToTransferQuery = itemsQuery,

            -- chest 2
            projectDef2     = t_chests.GetRegisterAndUpdateChestProjectDef(),
            projectData2    = {
                chestLocation        = coremove.GetRelativeLocation(testStartLocation2, 2, 5, 0),
                chestAccessDirection = "back",
            },

        },
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback)
end

function t_isp.T_ISPUsingProject()
    -- create project definition
    local projectData = {
        sourceItemsLocator = URL:newFromURI(storageQueryURI),
        localInputHostLocator = URL:newFromURI(factoryInputChestURI),
        localOutputItemsLocation = URL:newFromURI(factoryOutputChestURI),
        destinationStorageLocator = URL:newFromURI(storageURI)
     }
    local aTypicalServiceUsingItemsProjectDef = {
        steps   = {
            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_isp", serviceName = "TransferItemsFromTo_ASrv" }, stepDataDef = {
                { keyDef = "sourceItemsLocator"         , sourceStep = 0, sourceKeyDef = "sourceItemsLocator" },
                { keyDef = "destinationStorageLocator"  , sourceStep = 0, sourceKeyDef = "localInputHostLocator" },
            }},

            -- other services (that e.g. could require items in a turtle's iventory) to implement the typical service

            { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_isp", serviceName = "TransferItemsFromTo_ASrv" }, stepDataDef = {
                { keyDef = "sourceItemsLocator"         , sourceStep = 0, sourceKeyDef = "localOutputItemsLocation" },
                { keyDef = "destinationStorageLocator"  , sourceStep = 0, sourceKeyDef = "destinationStorageLocator" },
            }},
            { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_projects", serviceName = "AreAllTrue_QSrv" }, stepDataDef = {
                { keyDef = "success1"                   , sourceStep = 1, sourceKeyDef = "success" },
                { keyDef = "successN"                   , sourceStep = 2 --[[ likely higher]], sourceKeyDef = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , sourceStep = 3 --[[ likely higher]], sourceKeyDef = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = aTypicalServiceUsingItemsProjectDef,
        projectData = projectData,
    }

    -- call test method
    enterprise_projects.StartProject_ASrv(projectServiceData, callback)
end

function t_isp.T_AddItemsLocators()
    -- create testData
    local itemsQuery1 = {
        ["minecraft:birch_log"] = 1,
        ["minecraft:torch"]     = 5,
    }
    local itemsQuery2 = {
        ["minecraft:birch_log"] = 1,
        ["minecraft:torch"]     = 5,
    }
    local itemsQuery3 = {
        ["minecraft:birch_log"] = 1,
        ["minecraft:charcoal"]  = 100,
    }
    local turtleId = os.getComputerID()
    local testData = {
        itemsLocator1 = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = turtleId, itemsQuery = itemsQuery1 }).itemsLocator,
        itemsLocator2 = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = turtleId, itemsQuery = itemsQuery2 }).itemsLocator,
        itemsLocator3 = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = turtleId, itemsQuery = itemsQuery3 }).itemsLocator,
    }

    -- call test method
    local result = enterprise_isp.AddItemsLocators_SSrv(testData)
--    corelog.WriteToLog("  result="..textutils.serialize(result))

    -- check result
    local expectedItemsQuery = {
        ["minecraft:charcoal"]  = 100,
        ["minecraft:birch_log"] = 3,
        ["minecraft:torch"]     = 10,
    }
    local expectedItemsLocator = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = turtleId, itemsQuery = expectedItemsQuery }).itemsLocator
    assert(expectedItemsLocator:sameBase(result.itemsLocator), "result itemsLocator (="..result.itemsLocator:getURI()..") different base from expected (="..expectedItemsLocator:getURI()..")")
    assert(expectedItemsLocator:sameQuery(result.itemsLocator), "result itemsLocator (="..result.itemsLocator:getURI()..") different query from expected (="..expectedItemsLocator:getURI()..")")
end

return t_isp
