local t_shop = {}

local corelog = require "corelog"

local Callback = require "obj_callback"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_shop = require "enterprise_shop"

function t_shop.T_All()
    t_shop.T_RegisterSupplier()
    t_shop.T_DelistSupplier()
    t_shop.T_DelistSuppliers()
end

local callback = Callback:new({
    _moduleName     = "t_main",
    _methodName     = "Func1_Callback",
    _data           = {"some callback data"},
})

function t_shop.T_OrderMultipleItems()
    return enterprise_shop.OrderItems_ASrv({
        orderItems = {
            ["minecraft:furnace"]   = 1,
            ["minecraft:charcoal"]  = 1, -- ToDo: test if furnace get produced once charcoal is being smelted (as soon as projects support parallel steps)
        },
        itemDepotLocator = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_shop.T_OrderCharcoal()
    return enterprise_shop.OrderItems_ASrv({
        orderItems = {
            ["minecraft:charcoal"]  = 3,
        },
        itemDepotLocator = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_shop.T_OrderTorch()
    return enterprise_shop.OrderItems_ASrv({
        orderItems = {
            ["minecraft:torch"]  = 4,
        },
        itemDepotLocator = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_shop.T_RegisterSupplier()
    -- prepare test
    corelog.WriteToLog("* enterprise_shop.RegisterSupplier_SSrv() tests")
    local originalNItemSuppliers = #enterprise_shop.GetItemSuppliers()
    local supplierLocator = enterprise_turtle.GetHostLocator_Att()
    corelog.WriteToLog("   supplierLocator="..supplierLocator:getURI())

    -- test
    local result = enterprise_shop.RegisterSupplier_SSrv({ supplierLocator = supplierLocator})
    assert(result.success == true, "RegisterSupplier_SSrv services failed")
    local nSuppliers = #enterprise_shop.GetItemSuppliers()
    local expectedNItemSuppliers = originalNItemSuppliers + 1
    assert(nSuppliers == expectedNItemSuppliers, "gotten nSuppliers(="..nSuppliers..") not the same as expected(="..expectedNItemSuppliers..")")

    -- cleanup test
end

function t_shop.T_DelistSupplier()
    -- prepare test
    corelog.WriteToLog("* enterprise_shop.DelistSupplier_SSrv tests")
    local originalNItemSuppliers = #enterprise_shop.GetItemSuppliers()
    local supplierLocator = enterprise_turtle.GetHostLocator_Att()

    -- test
    local result = enterprise_shop.DelistSupplier_SSrv({ supplierLocator = supplierLocator})
    assert(result.success == true, "DelistSupplier_SSrv services failed")
    local nSuppliers = #enterprise_shop.GetItemSuppliers()
    local expectedNItemSuppliers = originalNItemSuppliers - 1
    assert(nSuppliers == expectedNItemSuppliers, "gotten nSuppliers(="..nSuppliers..") not the same as expected(="..expectedNItemSuppliers..")")

    -- cleanup test
end

function t_shop.T_DelistSuppliers()
    -- prepare test
    corelog.WriteToLog("* enterprise_shop.DelistSuppliers tests")

    -- test
    enterprise_shop.DelistSuppliers()
    local nSuppliers = #enterprise_shop.GetItemSuppliers()
    local expectedNItemSuppliers = 0
    assert(nSuppliers == expectedNItemSuppliers, "gotten nSuppliers(="..nSuppliers..") not the same as expected(="..expectedNItemSuppliers..")")
end

return t_shop
