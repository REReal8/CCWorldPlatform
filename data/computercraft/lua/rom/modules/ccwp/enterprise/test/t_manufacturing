local t_manufacturing = {}

local corelog = require "corelog"
local coremove = require "coremove"

local Callback = require "obj_callback"

local Location = require "obj_location"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_manufacturing = require "enterprise_manufacturing"

function t_manufacturing.T_All()
end

local baseLocationV0 = Location:new({_x=6, _y= 0, _z= 1, _dx=0, _dy=1})
local baseLocationV1 = Location:new({_x=12, _y= 0, _z= 1, _dx=0, _dy=1})
local baseLocationV2 = baseLocationV1:copy()

local callback = Callback:new({
    _moduleName     = "t_main",
    _methodName     = "Func1_Callback",
    _data           = {"some callback data"},
})

function t_manufacturing.T_ProvideItemsTo_Craft()
    local itemsLocator = enterprise_manufacturing:getHostLocator()
    local items = { ["minecraft:birch_planks"] = 12 }
    itemsLocator:setQuery(items)

    return enterprise_manufacturing.ProvideItemsTo_ASrv({
        itemsLocator                    = itemsLocator,
        ingredientsItemSupplierLocator  = enterprise_turtle.GetHostLocator_Att(),
        itemDepotLocator                = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_manufacturing.T_ProvideItemsTo_Smelt()
    local itemsLocator = enterprise_manufacturing:getHostLocator()
    local items = { ["minecraft:charcoal"] = 3 }
    itemsLocator:setQuery(items)

    return enterprise_manufacturing.ProvideItemsTo_ASrv({
        itemsLocator                    = itemsLocator,
        ingredientsItemSupplierLocator  = enterprise_turtle.GetHostLocator_Att(),
        itemDepotLocator                = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_manufacturing.T_BuildAndStartNewV1Site()
    local callbackBuildAndStartNewV1Site = Callback:new({
        _moduleName     = "t_manufacturing",
        _methodName     = "BuildAndStartNewV1Site_CallBack",
        _data           = {},
    })

    return enterprise_manufacturing.BuildAndStartNewSite_ASrv({
        baseLocation            = baseLocationV1,
        siteVersion             = "v1",
        upgrade                 = false,
        siteLocator             = nil,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att()
    }, callbackBuildAndStartNewV1Site)
end

local siteLocatorV1

function t_manufacturing.BuildAndStartNewV1Site_CallBack(callbackData, serviceResults)
    -- test (cont)
    assert(serviceResults.success, "failed executing async service")
    siteLocatorV1 = serviceResults.siteLocator

    -- cleanup test

    -- end
    return true
end

function t_manufacturing.T_BuildAndStartNewV2Site()
    return enterprise_manufacturing.BuildAndStartNewSite_ASrv({
        baseLocation            = baseLocationV2,
        siteVersion             = "v2",
        upgrade                 = true,
        siteLocator             = siteLocatorV1,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att()
    }, callback)
end

function t_manufacturing.T_StopAndDismantleV1Site()
    return enterprise_manufacturing.StopAndDismantleSite_ASrv({
        siteLocator             = siteLocatorV1,
        baseLocation            = baseLocationV1,
        siteVersion             = "v1",
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att()
    }, callback)
end

function t_manufacturing.T_BuildNewV0Site()
    return enterprise_manufacturing.BuildNewSite_ASrv({
        baseLocation            = baseLocationV0,
        siteVersion             = "v0",
        upgrade                 = false,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att()
    }, callback)
end

local siteLocatorV0

function t_manufacturing.T_StartNewV0Site()
    local result = t_manufacturing.StartNewSite(baseLocationV0) if not result.success then corelog.Error("failed starting Site") return end
    siteLocatorV0 = result.siteLocator
end

function t_manufacturing.StartNewSite(baseLocation, version)
    version = version or "v0"

    return enterprise_manufacturing.StartNewSite_SSrv({
        baseLocation        = baseLocation,
        siteVersion         = version,
        siteAlreadyBuild    = true
    })
end

function t_manufacturing.T_DismantleV0Site()
    DismantleV0Site(baseLocationV0)
end

function DismantleV0Site(baseLocation)
    return enterprise_manufacturing.DismantleSite_ASrv({
        baseLocation            = baseLocation,
        siteVersion             = "v0",
        siteStopped             = true,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att()
    }, callback)
end

function t_manufacturing.T_StopV0Site()
    t_manufacturing.StopSite(siteLocatorV0)
end

function t_manufacturing.StopSite(siteLocator)
    return enterprise_manufacturing.StopSite_ASrv({
        siteLocator     = siteLocator
    }, callback)
end

function t_manufacturing.T_DeleteSites()
    enterprise_manufacturing:deleteObjects("Factory")
end

return t_manufacturing
