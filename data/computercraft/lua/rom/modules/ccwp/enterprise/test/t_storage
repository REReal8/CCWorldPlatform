local t_storage = {}

local corelog = require "corelog"
local coremove = require "coremove"

local Callback = require "obj_callback"

local Location = require "obj_location"

local T_BirchForest = require "test.t_mobj_birchforest"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_storage = require "enterprise_storage"
local enterprise_forestry = require "enterprise_forestry"

local t_factory = require "test.t_factory"

function t_storage.T_BuildAndStartNewSite_ASrv()
    -- prepare test
    corelog.WriteToLog("# BuildAndStartNewSite_ASrv test")
    local forest = T_BirchForest.CreateForest() if not forest then corelog.Error("failed obtaining forest") return end
    local forestLocator = enterprise_forestry:saveObject(forest)

    local location = Location:new(coremove.GetLocation())
    t_factory.StartNewSite(location)

    local callback = Callback:new({
        _moduleName     = "t_storage",
        _methodName     = "Cleanup_Callback",
        _data           = { forestLocator = forestLocator, location = location },
    })

    -- test
    enterprise_storage.BuildAndStartNewSite_ASrv({
        location                = Location:new({_x=12, _y=12, _z= 1, _dx=0, _dy=1}),
        type                    = "silo",
        siloType                = "basic",
        topChests               = 2,
        layers                  = 2,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, callback)
end

function t_storage.Cleanup_Callback(callbackData, taskResult)
    corelog.WriteToLog("  doing t_storage.Cleanup_Callback("..textutils.serialise(callbackData)..", "..textutils.serialise(taskResult)..")")

    -- cleanup test
    t_factory.StopSite(callbackData.location)

    enterprise_forestry:deleteResource(callbackData.forestLocator)
end

return t_storage
