local t_storage = {}
local corelog = require "corelog"
local coremove = require "coremove"

local T_BirchForest = require "test.t_mobj_birchforest"

local enterprise_turtle = require "enterprise_turtle"
local enterprise_storage = require "enterprise_storage"
local enterprise_forestry = require "enterprise_forestry"

local t_factory = require "test.t_factory"

function t_storage.T_BuildAndStartNewSite_ASrv()
    -- prepare test
    corelog.WriteToLog("# BuildAndStartNewSite_ASrv test")
    local forest = T_BirchForest.CreateForest() if not forest then corelog.Error("failed obtaining forest") return end
    local forestLocator = enterprise_forestry.SaveForest(forest)

    local location = coremove.GetLocation()
    t_factory.StartNewSite(location)

    -- test
    enterprise_storage.BuildAndStartNewSite_ASrv({
        location                = {x=12, y=12, z= 1, dx=0, dy=1},
        type                    = "silo",
        siloType                = "basic",
        topChests               = 2,
        layers                  = 2,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, "t_storage.Cleanup_Callback", { forestLocator = forestLocator, location = location })
end

function t_storage.Cleanup_Callback(callbackData, taskResult)
    corelog.WriteToLog("  doing t_storage.Cleanup_Callback("..textutils.serialise(callbackData)..", "..textutils.serialise(taskResult)..")")

    -- cleanup test
    t_factory.StopSite(callbackData.location)

    enterprise_forestry.RemoveForest(callbackData.forestLocator)
end

return t_storage
