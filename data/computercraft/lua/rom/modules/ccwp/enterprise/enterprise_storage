local Host = require "obj_host"

local enterprise_storage = Host:new({
    _hostName   = "enterprise_storage",
})

local corelog = require "corelog"

local InputChecker = require "input_checker"
local Callback = require "obj_callback"

local Silo = require "mobj_silo"

local enterprise_projects = require "enterprise_projects"
local enterprise_storage_silo = require "enterprise_storage_silo"

--                        _                           _   _               _
--                       (_)                         | | | |             | |
--    ___  ___ _ ____   ___  ___ ___   _ __ ___   ___| |_| |__   ___   __| |___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \ | '_ ` _ \ / _ \ __| '_ \ / _ \ / _` / __|
--   \__ \  __/ |   \ V /| | (_|  __/ | | | | | |  __/ |_| | | | (_) | (_| \__ \
--   |___/\___|_|    \_/ |_|\___\___| |_| |_| |_|\___|\__|_| |_|\___/ \__,_|___/

function enterprise_storage.BuildAndStartNewSite_ASrv(...)
    -- get & check input from description
    local checkSuccess, siteData, type, callback = InputChecker.Check([[
        This public function (service) builds a new ItemStorage site and starts it.

        Return value:
                            - (boolean) whether the service was scheduled successfully

        Async service return value (to Callback):
                            - (table)
                success     - (boolean) whether the service was executed successfully
                siteLocator - (URL) locating the created site (in this enterprise)

        Parameters:
            siteData        + (table) data about this site, like type and layout
                type        + (string) ItemStorage type
            callback        + (Callback) to call once service is ready
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_storage.BuildAndStartNewSite_ASrv: Invalid input") return Callback.ErrorCall(callback) end

    -- what kind of ItemStorage is this?
    if type == 'silo' then
        -- create project definition
        local buildAndStartNewSiteProjecDef = {
            steps   = {
                { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_storage", serviceName = "BuildNewSite_ASrv" }, stepDataDef = {
                    { keyDef = "location"                       , sourceStep = 0, sourceKeyDef = "location" },
                    { keyDef = "type"                           , sourceStep = 0, sourceKeyDef = "type" },
                    { keyDef = "topChests"                      , sourceStep = 0, sourceKeyDef = "topChests" },
                    { keyDef = "layers"                         , sourceStep = 0, sourceKeyDef = "layers" },
                    { keyDef = "materialsItemSupplierLocator"   , sourceStep = 0, sourceKeyDef = "materialsItemSupplierLocator" },
                    { keyDef = "wasteItemDepotLocator"          , sourceStep = 0, sourceKeyDef = "wasteItemDepotLocator" },
                }},
                { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_storage", serviceName = "StartNewSite_SSrv" }, stepDataDef = {
                    { keyDef = "type"                   , sourceStep = 0, sourceKeyDef = "type" },
                    { keyDef = "location"               , sourceStep = 0, sourceKeyDef = "location" },
                    { keyDef = "topChests"              , sourceStep = 0, sourceKeyDef = "topChests" },
                    { keyDef = "layers"                 , sourceStep = 0, sourceKeyDef = "layers" },
                }},
            },
            returnData  = {
                { keyDef = "siteLocator"                , sourceStep = 2, sourceKeyDef = "siteLocator" },
            }
        }
        local projectServiceData = {
            projectDef  = buildAndStartNewSiteProjecDef,
            projectData = siteData,
            projectMeta = { title = "Building new storage", description = "For storing precious goods" },
        }

        -- start project
        return enterprise_projects.StartProject_ASrv(projectServiceData, callback)
    else corelog.Error("enterprise_storage.BuildAndStartNewSite_ASrv: Don't know how to build and start a site of type "..type) return Callback.ErrorCall(callback) end
end

function enterprise_storage.BuildNewSite_ASrv(...)
    -- get & check input from description
    local checkSuccess, siteData, type, callback = InputChecker.Check([[
        This public function (service) builds a new site.

        Async service return value (to Callback):
                            - (table)
                success     - (boolean) whether the service was executed successfully

        Parameters:
            siteData        + (table) data about this site, like type and layout
                type        + (string) ItemStorage type
            callback        + (Callback) to call once service is ready
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_storage.BuildNewSite_ASrv: Invalid input") return Callback.ErrorCall(callback) end

    -- what kind of ItemStorage is this?
    if type == 'silo' then
        return enterprise_storage_silo.BuildNewSite_ASrv(siteData, callback)
    else corelog.Error("enterprise_storage.BuildNewSite_ASrv: Don't know how to build a site of type "..type) return Callback.ErrorCall(callback) end
end

function enterprise_storage.StartNewSite_SSrv(...)
    -- get & check input from description
    local checkSuccess, siteData, type, location, topChests, layers = InputChecker.Check([[
        This public function to notify the enterprise_storage that a new site is ready for use and should be started.

        Return value:
                            - (table)
                success     - (boolean) whether the site is ready for business
                siteLocator - (URL) locating the created site (in this enterprise)

        Parameters:
            siteData        + (table) data about this site, like type and layout
                type        + (string) ItemStorage type
                location    + (Location) location of site
                topChests   + (number, 2) # of top chests
                layers      + (number, 2) # of layers
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_storage.StartNewSite_SSrv: Invalid input") return {success = false} end

    -- what kind of ItemStorage is this?
    if siteData.type == 'silo' then
        local obj = Silo:construct({
            location    = location,
            topChests   = topChests,
            layers      = layers,
        })
        if not obj then corelog.Error("failed obtaining Silo") return end
        local siteLocator = enterprise_storage:saveObject(obj)

        -- end
        return {
            success     = true,
            siteLocator = siteLocator,
        }
    else corelog.Error("enterprise_storage.StartNewSite_SSrv: Don't know how to start a site of type "..type) return {success = false} end
end

function enterprise_storage.RegisterStorage_SSrv(...)
    -- get & check input from description
    local checkSuccess, location = InputChecker.Check([[
        This sync public service registers ("adds") a storage to the enterprise.

        Note that the storage should already be present (constructed) in the world. It is however assumed the newly added storages are still empty.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                storageLocator      - (URL) locating the created storage (in this enterprise)

        Parameters:
            storageData             - (table) data to the storage
            type                    + (stromg) type of the storage (e.g. "storage:silo")
            location                + (Location) location of the storage
            --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_storage.RegisterStorage_SSrv: Invalid input") return {success = false} end

    -- ToDo:

    return {success = false}
end

function enterprise_storage.DelistStorage_ASrv(...)
    -- get & check input from description
    local checkSuccess, storageLocator, callback = InputChecker.Check([[
        This async public service delists ("removes") a storage from the enterprise. Delisting implies
            - the storage is immediatly no longer available for new business (e.g. adding/ removing items)
            - wait for all active work on storage to be ended
            - remove the storage from the enterprise

        Note that the storages (and it's possibly remaining items) are not removed from the world.

        Return value:
                                - (boolean) whether the service was scheduled successfully

        Async service return value (to Callback):
                                - (table)
                success         - (boolean) whether the service executed successfully

        Parameters:
            serviceData         - (table) data about the service
                storageLocator  + (URL) locating the storage
            callback            + (Callback) to call once service is ready
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_storage.DelistStorage_ASrv: Invalid input") return Callback.ErrorCall(callback) end

    -- ToDo

    return Callback.ErrorCall(callback)
end

return enterprise_storage
