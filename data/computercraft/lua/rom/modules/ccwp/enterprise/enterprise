local enterprise = {}
local coredht = require "coredht"
local coreutils = require "coreutils"

local db = {
    messageList = {}
}

function enterprise.Init()
end

function enterprise.Setup()
    -- berichten opslaan die verstuurd zijn voordat de dht klaar is
    coredht.DHTReadyFunction(DHTReadySetup)
end

function DHTReadySetup()
    -- en, bestaan de messages?
    if not coredht.GetData("messages") then coredht.SaveData({}, "messages") end

    -- tasks ook?
    if not coredht.GetData("tasks") then coredht.SaveData({}, "tasks") end

    -- opslaan in de dht
    MessageToDHT()
end

function SendMessageToId(sender, recipient, subject, data, notBefore)
    -- parameter controle
    notBefore = notBefore or 0

    -- nieuw id aanmaken
    local messageId = coreutils.NewId()

    -- opslaan in de lokale lijst
    db.messageList[ messageId ] = {
        messageId   = messageId,
        sender      = sender,
        recipient   = recipient,
        subject     = subject,
        time        = coreutils.UniversalTime(),
        notBefore   = notBefore,
        data        = data,
    }

    -- opslaan in de dht
    MessageToDHT()
end

function enterprise.ReplyToMessage(message, subject, data, notBefore)
    -- reference present?
    if type(message.data) == "table" and message.data.reference then
        if type(data) == "table"    then data.reference = message.data.reference
                                    else data           = {reference = message.data.reference}
        end
    end

    -- new subject?
    if not subject then subject = message.subject .. " response" end

    -- just send the message back
    SendMessageToId(message.recipient, message.sender, subject, data, notBefore)
end

function enterprise.GetNextMessage(recipient)
    -- hoe laat is het eigenlijk
    local nu        = coreutils.UniversalTime()

    -- om het oudste bericht te vinden
    local firstTime = nu + 1
    local messageId = nil

    -- lekker zoeken
    local messages  = coredht.GetData("messages")

    -- door alle berichten lopen
    for id, message in pairs(messages) do

        -- is dit een beter bericht?
        if recipient == message.recipient and firstTime > message.time and nu >= message.notBefore then firstTime = message.time messageId = id end
    end

    -- hebben we iets?
    if messageId then
        -- uit de lijst halen en terug geven
        local message = messages[ messageId ]

        -- uit de dht halen
        coredht.SaveData(nil, "messages", messageId)

        -- klaar
        return message
    else
        -- geen bericht gevonden blijkbaar
        return nil
    end
end

function GetMessageId(message)          return message.messageId    end
function GetMessageSender(message)      return message.sender       end
function GetMessageRecipient(message)   return message.recipient    end

--    _            _
--   | |          | |
--   | |_ __ _ ___| | __
--   | __/ _` / __| |/ /
--   | || (_| \__ \   <
--    \__\__,_|___/_|\_\
--
--

function AddTask(enterpriseId, taskData)
    -- check parameters
    if not enterpriseId or not taskData then return end

    -- create a new task
    local taskId    = coreutils.NewId()
    local task      = {
        enterpriseId    = enterpriseId,
        time            = coreutils.UniversalTime(),
        taskData        = taskData
    }

    -- save to the dht
    coredht.SaveData(task, "tasks", taskId)
end

function GetNextTask(enterpriseId, justPeek) -- justPeek = true won't remove the task from the task list
    -- check parameters
    if not enterpriseId then return end

    -- local vars
    local tasks     = coredht.GetData("tasks")
    local taskTime  = math.huge
    local taskId    = nil
    local task      = nil

    -- find the oldest task
    for id, taskData in pairs(tasks) do

        -- newer one?
        if enterpriseId == taskData.enterpriseId and taskTime > taskData.time then

            -- use this one
            taskTime    = taskData.time
            taskId      = id
            task        = taskData
        end
    end

    -- found any? --> remove from the dht
    if taskId and not justPeek then coredht.SaveData(nil, "tasks", taskId) end

    -- done
    return task
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--
--

function MessageToDHT()
    -- only if the dht is ready
    if coredht.IsReady() then

        -- alle berichten langs lopen
        for id, message in pairs(db.messageList) do

            -- opslaan in de dht
            coredht.SaveData(message, "messages", id)
        end

        -- lijst leeg maken
        db.messageList = {}
    end
end

return enterprise
