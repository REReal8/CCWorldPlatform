local db = {
    dhtRoot     = "enterprise_storage",
    dhtSites    = "sites",
}

-- ToDo: consider renaming to enterprise_silo

function StoreItems(site, itemList)
    -- just loop all top chests, ignore the itemList (for now)
    for i, topChest in ipairs(site.topChests) do

        -- this one free?
        if topChest.status == "free" then

            -- save this to the dht
            coredht.SaveData("used", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", i, "status")

            -- return the location of this top chest
            return topChest.location
        end
    end
end

function ItemsDelivered(sitesIndex, topChestIndex, itemList, location)
    -- variables
    local callback = "enterprise_assignmentboard.Dummy_Callback"
    local callbackData = {}
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(location),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }
    local assignmentArguments   = {
        sitesIndex      = sitesIndex,
        topChestIndex   = topChestIndex
    }

    -- now we need to get some work done, time for a new assignment
    local assignmentServiceData = {
        metaData    = assignmentMeta,
        task        = "role_storage_silo_worker.ItemsDelivered_Task",
        taskData    = assignmentArguments,
    }
    enterprise_assignmentboard.DoAssignment_ASrv(assignmentServiceData, callback, callbackData)
end

function ItemPresent(site, itemName)
    -- variables
    local itemCount = 0

    -- loop all storage chests
    for i, storageChests in ipairs(site.storageChests) do

        -- right item?
        if storageChests.itemName == itemName then

            -- update the counter with the actual value || virual might be smarter though
            itemCount = itemCount + storageChests.actual
        end
    end

    -- done
    return itemCount
end

function RetrieveItems(sitesIndex, itemList, callback, callbackArgs)

    -- variables
    local site      = coredht.GetData(db.dhtRoot, db.dhtSites, sitesIndex)
    local location  = nil

    -- part 1: make a reservation for a pick up box
    -- just loop all top chests, ignore the itemList (for now)
    for i, topChest in ipairs(site.topChests) do

        -- this one free?
        if topChest.status == "free" then

            -- save this to the dht
            coredht.SaveData("used", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", i, "status")

            -- return the location of this top chest
            location = topChest.location

            -- done with the loop
            break
        end
    end

    -- found any?
    if location == nil then corelog.Error("enterprise_storage_silo.RetrieveItems: no free top chest") return nil end

    -- part 2: make an assignment for the actual pickup
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(site.entryLocation),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }
    local assignmentArguments   = {
        sitesIndex      = sitesIndex,
        itemList        = itemList,
        dropLocation    = coremove.CopyLocation(location),
    }

    -- now we need to get some work done, time for a new assignment
    local assignmentServiceData = {
        metaData    = assignmentMeta,
        task        = "role_storage_silo_worker.RetrieveItems_Task",
        taskData    = assignmentArguments,
    }
    enterprise_assignmentboard.DoAssignment_ASrv(assignmentServiceData, callback, callbackArgs)

    -- return the location of the pickup box
    return location -- ToDo: investigate if is it okay that this location is returned sync in an async function
end

function ItemsCollected(site, topChest)
    -- mark the topchest free, that's all
    coredht.SaveData("free", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", topChest.chestIndex, "status")
end

function BuildNewSite_ASrv(siteData, callback, callbackData)
    --[[
        This public function (service) builds a new silo.

        Return value:
            nil

        Parameters:
            siteData                    - (table) data about this silo, like type and layout
                materialsHostLocator    - (URL) locating the host of the building materials
            callback                    - (string) function name to call once the site is build
            callbackData                - (table) function data to supply to callback
    ]]

    -- check input
    if type(siteData) ~= "table" or type(siteData.location) ~= "table" or type(siteData.type) ~= "string" then corelog.Error('enterprise_storage_silo.BuildNewSite_ASrv: Invalid siteData input') return nil end
    if type(siteData.materialsHostLocator) ~= "table" then corelog.Error("enterprise_factory.DismantleSite_ASrv: Invalid materialsHostLocator") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local materialsHostLocator = url.URL:new(siteData.materialsHostLocator)
    if type(callback) ~= "string" then corelog.Error('enterprise_storage_silo.BuildNewSite_ASrv: Invalid callback function') return nil end

    -- let construction enterprise build the silo
    local blueprintBuildData = {
        blueprintStartpoint     = coremove.CopyLocation(siteData.location),
        blueprint               = GetSiloL0_blueprint(siteData),
        materialsHostLocator    = materialsHostLocator,
    }
    corelog.WriteToLog(">Building silo at "..textutils.serialise(blueprintBuildData.blueprintStartpoint))
    enterprise_construction.BuildBlueprint_ASrv(blueprintBuildData, callback, callbackData)
end

function StartNewSite_SSrv(siteData)
    -- variables
    local site  = {
        type            = "silo",
        location        = siteData.location,
        entryLocation   = coremove.GetRelativeLocation(siteData.location, 3, 3, 0),
        topChests       = {},
        storageChests   = {},

        sitesIndex      = 0,    -- set later
    }

    -- check input, use default
    siteData.siloType = siteData.siloType or "basic"

    -- what kind of new silo is this?
    if siteData.siloType == "basic" then
        corelog.WriteToLog(">Starting silo at "..textutils.serialise(site.location))

        -- defaults to input
        siteData.topChests  = siteData.topChests    or 2
        siteData.layers     = siteData.layers       or 2

        -- add our top chests, depending how many we have
        if siteData.topChests >= 1 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 2, 5, 0), chestIndex=1}) end
        if siteData.topChests >= 2 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 4, 5, 0), chestIndex=2}) end
        if siteData.topChests >= 3 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 5, 4, 0), chestIndex=3}) end
        if siteData.topChests >= 4 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 5, 2, 0), chestIndex=4}) end
        if siteData.topChests >= 5 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 4, 1, 0), chestIndex=5}) end
        if siteData.topChests >= 6 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 2, 1, 0), chestIndex=6}) end
        if siteData.topChests >= 7 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 1, 2, 0), chestIndex=7}) end
        if siteData.topChests >= 8 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 1, 4, 0), chestIndex=8}) end

        -- loop the layers
        for i=1, siteData.layers, 1 do

            -- do the floor
            local shaft = coremove.GetRelativeLocation(site.entryLocation, 0, 0, -1 - i)
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  0,  1), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  1,  0), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  0, -1), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft, -1,  0), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
        end

        -- reserve the first chest for charcoal
        site.storageChests[1].status    = "used"
        site.storageChests[1].itemName  = "minecraft:charcoal"
        site.storageChests[1].stackSize = 64
    end

    -- add this new site to our data
    local sites = coredht.GetData(db.dhtRoot, db.dhtSites)

    -- set the index
    site.sitesIndex = #sites + 1

    -- add this site to the dht
    table.insert(sites, site)

    -- save the dht
    coredht.SaveData(sites, db.dhtRoot, db.dhtSites)
end

function FindSiteByTopChest(site, location)
--[[
    This function checks of this site has a topchest which matches the given location. Returns nil if not found
--]]

    -- loop our top chests
    for i, topChest in ipairs(site.topChests) do

        -- this the one?
        if coremove.IsSameLocation(location, topChest.location) then return topChest end
    end

    -- still here? Then we have found no match
    return nil
end

function CheckIntegrity(site)
    local callback = "enterprise_assignmentboard.Dummy_Callback"
    local callbackData = {}

    -- meta about the assignment, for the selection procedure
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(site.entryLocation),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }

    -- arguments for the assignment itself
    local assignmentArguments   = {
        sitesIndex      = site.sitesIndex,
    }

    -- now we need to get some work done, time for a new assignment
    local assignmentServiceData = {
        metaData    = assignmentMeta,
        task        = "role_storage_silo_worker.CheckIntegrity_Task",
        taskData    = assignmentArguments,
    }
    enterprise_assignmentboard.DoAssignment_ASrv(assignmentServiceData, callback, callbackData)
end

--    _           _ _     _               _   _                                 _     _                       _       _
--   | |         (_) |   | |             | | | |                        ___    | |   | |                     (_)     | |
--   | |__  _   _ _| | __| |  _ __   __ _| |_| |_ ___ _ __ _ __  ___   ( _ )   | |__ | |_   _  ___ _ __  _ __ _ _ __ | |_ ___
--   | '_ \| | | | | |/ _` | | '_ \ / _` | __| __/ _ \ '__| '_ \/ __|  / _ \/\ | '_ \| | | | |/ _ \ '_ \| '__| | '_ \| __/ __|
--   | |_) | |_| | | | (_| | | |_) | (_| | |_| ||  __/ |  | | | \__ \ | (_>  < | |_) | | |_| |  __/ |_) | |  | | | | | |_\__ \
--   |_.__/ \__,_|_|_|\__,_| | .__/ \__,_|\__|\__\___|_|  |_| |_|___/  \___/\/ |_.__/|_|\__,_|\___| .__/|_|  |_|_| |_|\__|___/
--                           | |                                                                  | |
--                           |_|                                                                  |_|

function TopL0_layer()
    return mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = {
            ["T"]   = mobj_block2d.Block2d:new({ _name = "minecraft:torch" }),
            ["C"]   = mobj_block2d.Block2d:new({ _name = "minecraft:chest", _dx =0, _dy = 1 }),
            [" "]   = mobj_block2d.Block2d:new({ _name = mobj_block2d.Block2d.NoneBlockName() }),
        },
        _codeMap    = {
            [6] = "  C C ",
            [5] = "      ",
            [4] = "T     ",
            [3] = "      ",
            [2] = "      ",
            [1] = "   T  ",
        },
    })
end

function Shaft_layer()
    return mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = {
            [" "]   = mobj_block2d.Block2d:new({ _name = mobj_block2d.Block2d.NoneBlockName() }),
        },
        _codeMap    = {
            [1] = " ",
        },
    })
end

function Chest_layer()
    return mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = {
            ["C"]   = mobj_block2d.Block2d:new({ _name = "minecraft:chest", _dx =-1, _dy = 0 }),
            ["D"]   = mobj_block2d.Block2d:new({ _name = "minecraft:chest", _dx = 0, _dy = 1 }),
            ["E"]   = mobj_block2d.Block2d:new({ _name = "minecraft:chest", _dx = 0, _dy =-1 }),
            ["F"]   = mobj_block2d.Block2d:new({ _name = "minecraft:chest", _dx = 1, _dy = 0 }),
            [" "]   = mobj_block2d.Block2d:new({ _name = mobj_block2d.Block2d.NoneBlockName() }),
        },
        _codeMap    = {
            [3] = "DDF",
            [2] = "C F",
            [1] = "CEE",
        },
    })
end

function GetSiloL0_blueprint(siteData)
    -- construct layer list
    if siteData.topChests ~= 2 then corelog.Warning("enterprise_storage_silo.GetSiloL0_blueprint: Not yet implemented for other (="..siteData.topChests..") than 2 top chests") end
    local layerList = {
        { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove = true, layer = TopL0_layer()}, -- ToDo: use siteData.topChests
        { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove = false, layer = Shaft_layer()},
    }
    for i=1, siteData.layers, 1 do
        table.insert(layerList, { startpoint = { x= 2, y= 2, z= -1-i}, buildFromAbove = false, layer = Chest_layer()})
    end

    -- construct blueprint
    local blueprint = {
        layerList = layerList,
        escapeSequence = {
            { x= 3, y= 3, z=  1},
        }
    }

    return blueprint
end
