local db = {
    dhtRoot     = "enterprise_storage",
    dhtSites    = "sites",
}

function StoreItems(site, itemList)
    -- just loop all top chests, ignore the itemList (for now)
    for i, topChest in ipairs(site.topChests) do

        -- this one free?
        if topChest.status == "free" then

            -- save this to the dht
            coredht.SaveData("used", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", i, "status")

            -- return the location of this top chest
            return topChest.location
        end
    end
end

function ItemsDelivered(sitesIndex, topChestIndex, itemList, location)
    -- variables
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(location),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }
    local assignmentArguments   = {
        sitesIndex      = sitesIndex,
        topChestIndex   = topChestIndex
    }

    -- now we need to get some work done, time for a new assignment
    coreassignment.AddAssignment(
        assignmentMeta,                                         -- meta data about the assignment
        "role_storage_silo_worker.ItemsDeliveredTask",          -- taskFunction
        assignmentArguments,                                    -- taskArgumentTable
        "coreassignment.Dummy_Callback",                         -- callbackFunction
        {}                                                      -- callbackArgumentTable
    )
end

function ItemPresent(site, itemName)
    -- variables
    local itemCount = 0

    -- loop all storage chests
    for i, storageChests in ipairs(site.storageChests) do

        -- right item?
        if storageChests.itemName == itemName then

            -- update the counter with the actual value || virual might be smarter though
            itemCount = itemCount + storageChests.actual
        end
    end

    -- done
    return itemCount
end

function RetrieveItems(sitesIndex, itemList, callback, callbackArgs)

    -- variables
    local site      = coredht.GetData(db.dhtRoot, db.dhtSites, sitesIndex)
    local location  = nil

    -- part 1: make a reservation for a pick up box
    -- just loop all top chests, ignore the itemList (for now)
    for i, topChest in ipairs(site.topChests) do

        -- this one free?
        if topChest.status == "free" then

            -- save this to the dht
            coredht.SaveData("used", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", i, "status")

            -- return the location of this top chest
            location = topChest.location

            -- done with the loop
            break
        end
    end

    -- found any?
    if location == nil then coreutils.Error("enterprise_storage_silo.RetrieveItems: no free top chest") return nil end

    -- part 2: make an assignment for the actual pickup
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(site.entryLocation),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }
    local assignmentArguments   = {
        sitesIndex      = sitesIndex,
        itemList        = itemList,
        dropLocation    = coremove.CopyLocation(location),
    }

    -- now we need to get some work done, time for a new assignment
    coreassignment.AddAssignment(
        assignmentMeta,                                         -- meta data about the assignment
        "role_storage_silo_worker.RetrieveItemsTask",           -- taskFunction
        assignmentArguments,                                    -- taskArgumentTable
        callback,                                               -- callbackFunction
        callbackArgs                                            -- callbackArgumentTable
    )

    -- return the location of the pickup box
    return location
end

function ItemsCollected(site, topChest)
    -- mark the topchest free, that's all
    coredht.SaveData("free", db.dhtRoot, db.dhtSites, site.sitesIndex, "topChests", topChest.chestIndex, "status")
end

function NewSite(siteData)
    -- variables
    local site  = {
        type            = "silo",
        location        = siteData.location,
        entryLocation   = coremove.GetRelativeLocation(siteData.location, 3, 3, 0),
        topChests       = {},
        storageChests   = {},

        sitesIndex      = 0,    -- set later
    }

    -- check input, use default
    siteData.siloType = siteData.siloType or "basic"

    -- what kind of new silo is this?
    if siteData.siloType == "basic" then

        -- defaults to input
        siteData.topChests  = siteData.topChests    or 2
        siteData.layers     = siteData.layers       or 2

        -- add our top chests, depending how many we have
        if siteData.topChests >= 1 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 2, 5, 0), chestIndex=1}) end
        if siteData.topChests >= 2 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 4, 5, 0), chestIndex=2}) end
        if siteData.topChests >= 3 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 5, 4, 0), chestIndex=3}) end
        if siteData.topChests >= 4 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 5, 2, 0), chestIndex=4}) end
        if siteData.topChests >= 5 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 4, 1, 0), chestIndex=5}) end
        if siteData.topChests >= 6 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 2, 1, 0), chestIndex=6}) end
        if siteData.topChests >= 7 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 1, 2, 0), chestIndex=7}) end
        if siteData.topChests >= 8 then table.insert(site.topChests, {status="free", location=coremove.GetRelativeLocation(siteData.location, 1, 4, 0), chestIndex=8}) end

        -- loop the layers
        for i=1, siteData.layers, 1 do

            -- do the floor
            local shaft = coremove.GetRelativeLocation(site.entryLocation, 0, 0, -1 - i)
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  0,  1), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  1,  0), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft,  0, -1), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
            table.insert(site.storageChests, {status="free", itemName=nil, location=coremove.GetDivergentDirection(shaft, -1,  0), actual=0, virtual=0, stackSize=0, chestIndex=#site.storageChests+1})
        end

        -- reserve the first chest for charcoal
        site.storageChests[1].status    = "used"
        site.storageChests[1].itemName  = "minecraft:charcoal"
        site.storageChests[1].stackSize = 64
    end

    -- add this new site to our data
    local sites = coredht.GetData(db.dhtRoot, db.dhtSites)

    -- set the index
    site.sitesIndex = #sites + 1

    -- add this site to the dht
    table.insert(sites, site)

    -- save the dht
    coredht.SaveData(sites, db.dhtRoot, db.dhtSites)
end

function FindSiteByTopChest(site, location)
--[[
    This function checks of this site has a topchest which matches the given location. Returns nil if not found
--]]

    -- loop our top chests
    for i, topChest in ipairs(site.topChests) do

        -- this the one?
        if coremove.IsSameLocation(location, topChest.location) then return topChest end
    end

    -- still here? Then we have found no match
    return nil
end

function CheckIntegrity(site)

    -- meta about the assignment, for the selection procedure
    local assignmentMeta        = {
        startTime       = 0,
        location        = coremove.CopyLocation(site.entryLocation),
        needTool        = false,
        needTurtle      = true,
        fuelNeeded      = 100
    }

    -- arguments for the assignment itself
    local assignmentArguments   = {
        sitesIndex      = site.sitesIndex,
    }

    -- now we need to get some work done, time for a new assignment
    coreassignment.AddAssignment(
        assignmentMeta,                                         -- meta data about the assignment
        "role_storage_silo_worker.CheckIntegrityTask",          -- taskFunction
        assignmentArguments,                                    -- taskArgumentTable
        "coreassignment.Dummy_Callback",                        -- callbackFunction
        {}                                                      -- callbackArgumentTable
    )
end

