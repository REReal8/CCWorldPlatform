local db = {
    dhtRoot             = "jobs",
    currentEnterpriseId = nil,
}

function Init()
end

function Setup()
    -- pas als de dht klaar is...
    coredht.DHTReadyFunction(DHTReadySetup)
end

function DHTReadySetup()
    -- bestaat de entry al in de dht?
    if not coredht.GetData(db.dhtRoot) then coredht.SaveData({}, db.dhtRoot ) end

    -- dit heette ooit vacancies, die naam niet meer gebruiken
    coredht.SaveData(nil, "vacancies" )
end

function NewJob(enterpriseId, location, startTime, needTool, needTurtle)
    -- parameters controleren
    enterpriseId    = enterpriseId  or GetCurrentEnterpriseId
    startTime       = startTime     or coreutils.UniversalTime()
    local jobId     = coreutils.NewId()

    -- opslaan job (job meta data and job internal data)
    coredht.SaveData({
        jobId           = jobId,
        enterpriseId    = enterpriseId,
        enterpriseName  = coredht.GetData("enterprises", enterpriseId, "enterpriseName"),
        location        = location,
        startTime       = startTime,
        needTool        = needTool,
        needTurtle      = needTurtle,
        applications    = {},
    }, db.dhtRoot, jobId)
end

function ApplyToJob(jobId)
    -- onzelf toevoegen aan de lijst met inschrijvingen
    coredht.SaveData({
        time            = coreutils.UniversalTime(),
        dice            = math.random(),
    }, db.dhtRoot, jobId, "applications", jobId)
end

function Run()
    -- is de dth al beschikbaar?
    while not coredht.IsReady() do

        -- gewoon ff wachten
        os.sleep(0.25)
    end

    -- dit blijven we altijd doen
    while core.IsSystemRunning() do

        -- we zijn nu werkeloos
        local nextJob = nil

        -- volgende job zoeken
        local jobApplication = FindBestVacancy()

        -- hebben we een job?
        if jobApplication then

            -- inschrijven
            corejob.ApplyToJob(jobApplication)

            -- ff wachten, wellicht hebben meer zich ingeschreven
            os.sleep(0.25)

            -- controle wie de job krijgt
            nextJob = JobSelectionProcedure(jobApplication)
        end

        -- hebben we iets?
        if nextJob then
            -- deze job uit de lijst halen, mogen wij doen omdat wij nu deze job hebben
            coredht.SaveData(nil, db.dhtRoot, nextJob.jobId)

            -- juiste job starten
            DoJob(nextJob)
        else
            -- blijkbaar is er geen werk op dit moment
            os.sleep(0.25)
        end
    end
end

function FindBestVacancy()
    -- zoeken naar een job om op in te schrijven
    local jobs = coredht.GetData(db.dhtRoot)

    -- kijken of we een lege lijst hebben gekregen?
    if not jobs then return nil end

    -- op zoek naar de beste job
    for jobId, jobData in pairs(jobs) do

        -- de eerste de beste
        return jobId
    end

    -- niks gevonden
    return nil
end

function JobSelectionProcedure(jobId)
    -- data van de job ophalen
    local jobApplications = coredht.GetData(db.dhtRoot, jobId, "applications")

    -- dit lijkt mij wel iets voor ons!
    if jobApplications  then return coredht.GetData(db.dhtRoot, jobId)
                        else return nil end

end

function DummyTask()
    -- handig zodat er altijd iets is, kost ook weer een pull event
    os.sleep(0.05)
end

function DoJob(job)
    -- debugging
    coreutils.WriteToLog(job)

    -- task functie klaar maken
    local f, err = loadstring(job.enterpriseName..".ProcessNextTask("..textutils.serialize(job.enterpriseId)..")")
    if f then f() else coreutils.Error("corejob.DoJob(): loadstring gaf geen functie terug, wel een error: "..err) end

    -- loopje doen om inbox te lezen zolang de task nog bezig is
    while not coretask.TaskListEmpty() do

        -- hier ooit de inbox van deze enterprise verwerken
        local f, err = loadstring(job.enterpriseName..".ProcessNextMessage("..textutils.serialize(job.enterpriseId)..")")
        if f then f() else coreutils.Error("corejob.DoJob(): loadstring gaf geen functie terug, wel een error: "..err) end

        -- ff wachten
        os.sleep(0.05)
    end

    -- klaar met de task
    local f, err = loadstring(job.enterpriseName..".TaskComplete("..textutils.serialize(job.enterpriseId)..")")
    if f then f() else coreutils.Error("corejob.DoJob(): loadstring gaf geen functie terug, wel een error: "..err) end
end
