
--[[
    This file implements mobj_layer_rectangle.

    A mobj_layer_rectangle represents a rectangular layer in the minecraft world.

    Note that the syntax used is such that it (prepares for) a more object oriented Lua approach. See more from here https://www.lua.org/pil/16.html .
--]]

LayerRectangle = {
    _size_x                 = 0,
    _size_y                 = 0,
    _blockList              = {},
    _clearRemainingSpace    = true,
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function LayerRectangle:new(...)
    -- get & check input from description
    local checkSuccess, o, blockList = coreutils.CheckInput([[
        Constructs a mobj_layer_rectangle.

        Parameters:
            o                           + (table, {}) table with
                _size_x                 - (number, 0) size of layer in x
                _size_y                 - (number, 0) size of layer in y
                _blockList              + (table, {}) list of blocks within the layer
                _clearRemainingSpace    - (boolean, true) whether remaining space (i.e. without a block) should be kept as is cleared
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("LayerRectangle:new: Invalid input") return {} end

    setmetatable(o, self)
    self.__index = self
    o._blockList = mobj_block2d.BlockListTransform(o._blockList)
    return o
end

function LayerRectangle:getSizeX()
    return self._size_x
end

function LayerRectangle:setSizeX(size_x)
    -- check input
    if type(size_x) ~= "number" then corelog.Error("mobj_layer_rectangle:setSizeX: invalid size_x: "..type(size_x)) return end

    self._size_x = size_x
end

function LayerRectangle:getSizeY()
    return self._size_y
end

function LayerRectangle:setSizeY(size_y)
    -- check input
    if type(size_y) ~= "number" then corelog.Error("mobj_layer_rectangle:setSizeY: invalid size_y: "..type(size_y)) return end

    self._size_y = size_y
end

function LayerRectangle:getBlockList()
    return self._blockList
end

function LayerRectangle:setBlockList(blockList)
    -- check input
    if type(blockList) ~= "table" then corelog.Error("mobj_layer_rectangle:setBlockList: invalid blockList: "..type(blockList)) return end

    self._blockList = blockList -- note: no deep copy
end

function LayerRectangle:getClearRemainingSpace()
    return self._clearRemainingSpace
end

function LayerRectangle:setClearRemainingSpace(clear)
    -- check input
    if type(clear) ~= "boolean" then corelog.Error("mobj_layer_rectangle:setClearRemainingSpace: invalid clear: "..type(clear)) return end

    self._clearRemainingSpace = clear
end

function IsOfType(layer)
    -- check
    if type(layer) ~= "table" then return false end
    if type(layer._size_x) ~= "number" or type(layer._size_y) ~= "number" or type(layer._clearRemainingSpace) ~= "boolean" or not mobj_block2d.IsBlockList(layer._blockList) then return false end
    if not layer.new then corelog.Warning("mobj_layer_rectangle.IsOfType: default methods seem not to have been inherited") return false end

    return true
end

function LayerRectangle:isSame(layer)
    -- check input
    if not IsOfType(layer) then return false end

    -- check same rectangle
    local isSame =  self._size_x == layer._size_x and
                    self._size_y == layer._size_y and
                    self._clearRemainingSpace == layer._clearRemainingSpace and
                    mobj_block2d.IsSameBlockList(self._blockList, layer._blockList)

    -- end
    return isSame
end

function LayerRectangle:copy()
    local copy = LayerRectangle:new({
        _size_x                 = self._size_x,
        _size_y                 = self._size_y,
        _blockList              = mobj_block2d.BlockListCopy(self._blockList),
        _clearRemainingSpace    = self._clearRemainingSpace,
    })

    return copy
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
