
--[[
    This file implements mobj_layer_rectangle.

    A mobj_layer_rectangle represents a rectangular layer in the minecraft world.

    Note that the syntax used is such that it (prepares for) a more object oriented Lua approach. See more from here https://www.lua.org/pil/16.html .
--]]

LayerRectangle = {
    _codeMap            = {},
    _codeArray          = {},
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function LayerRectangle:new(...)
    -- get & check input from description
    local checkSuccess, o = coreutils.CheckInput([[
        Construct a mobj_layer_rectangle.

        Parameters:
            o                           + (table, {}) table with object fields
                _codeArray              - (table, {}) array mapping _codeMap codes (characters) to Block's
                _codeMap                - (table, {}) map of codes of blocks within the layer
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("LayerRectangle:new: Invalid input") return {} end

    -- set class info
    setmetatable(o, self)
    self.__index = self

    -- check codeArray validity
    o._codeArray = LayerRectangle.TransformToCodeArray(o._codeArray)
    if not LayerRectangle.CodeArrayValid(o._codeArray, true) then corelog.Error("LayerRectangle:new: Invalid codeArray") return {} end

    -- check codeMap validity
    if not LayerRectangle.CodeMapValid(o._codeArray, o._codeMap, true) then corelog.Error("LayerRectangle:new: Invalid codeMap") return {} end

    -- end
    return o
end

function LayerRectangle:getCode(iColumn, iRow)
    -- check
    if iColumn < 1 or iColumn > self:getNColumns() then corelog.Error("LayerRectangle:getCode: iColumn(="..iColumn..") not within range i.e. between 1 and "..self:getNColumns()) return "" end

    -- end
    return self:getCodeRow(iRow):sub(iColumn, iColumn)
end

function LayerRectangle:getBlock(iColumn, iRow)
    -- get code
    local code = self:getCode(iColumn, iRow)
    if code:len() ~= 1 then corelog.Error("LayerRectangle:getBlock: code of incorrect length(="..code:len()..")") return nil end

    -- get block
    local block = self._codeArray[code]

    -- end
    return block
end

function LayerRectangle:getNColumns()
    -- check not empty
    if self:getNRows() == 0 then return 0 end

    -- end
    return self:getCodeRow(1):len()
end

function LayerRectangle:getNRows()
    return #self._codeMap
end

function LayerRectangle:setCodeMap(codeMap)
    -- check
    if not LayerRectangle.CodeMapValid(self._codeArray, codeMap, true) then corelog.Error("LayerRectangle:setCodeMap: Invalid codeMap") return end

    self._codeMap = codeMap -- note: no deep copy
end

function LayerRectangle:setCodeArray(codeArray)
    -- check
    if not LayerRectangle.CodeArrayValid(codeArray, true) then corelog.Error("LayerRectangle:setCodeArray: Invalid codeArray") return end

    self._codeArray = codeArray -- note: no deep copy
end

function LayerRectangle.IsOfType(layer)
    -- check
    if type(layer) ~= "table" then return false end
    if not LayerRectangle.IsCodeArray(layer._codeArray) or not LayerRectangle.IsCodeMap(layer._codeMap) then return false end
    if not layer.new then corelog.Warning("mobj_layer_rectangle.IsOfType: default methods seem not to have been inherited") return false end

    return true
end

function LayerRectangle:isSame(layer)
    -- check input
    if not LayerRectangle.IsOfType(layer) then return false end

    -- check same rectangle
    local isSame =  LayerRectangle.IsSameCodeArray(self._codeArray, layer._codeArray) and
                    LayerRectangle.IsSameCodeMap(self._codeMap, layer._codeMap)

    -- end
    return isSame
end

function LayerRectangle:copy()
    local copy = LayerRectangle:new({
        _codeArray      = LayerRectangle.CodeArrayCopy(self._codeArray),
        _codeMap        = LayerRectangle.CodeMapCopy(self._codeMap),
    })

    return copy
end

function LayerRectangle:codesNeeded()
    -- determine code list
    local codeList = {}

    -- loop on rows
    local nCol = self:getNColumns()
    for iRow, row in ipairs(self._codeMap) do
        for iCol = 1, nCol do
            -- get code
            local code = row:sub(iCol, iCol)

            -- increment counter
            codeList[code] = (codeList[code] or 0) + 1
        end
    end

    -- end
    return codeList
end

function LayerRectangle:itemsNeeded()
    -- get code list
    local codeList = self:codesNeeded()

    -- determine item list
    local itemList = {}
    for code, codeCount in pairs(codeList) do
        -- get block
        local block = self._codeArray[code]

        -- check is minecraft item
        if block:isMinecraftItem() then
            -- set counter
            itemList[block:getName()] = (itemList[block:getName()] or 0) + codeCount
        end
    end

    -- end
    return itemList
end

function LayerRectangle:transformToLayer(...)
    -- get & check input from description
    local checkSuccess, toLayer = coreutils.CheckInput([[
        This method returns the layer that is needed to transform this layer into toLayer.

        Parameters:
            toLayer                     + (LayerRectangle) table with
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("LayerRectangle:transformToLayer: Invalid input") return nil end

    -- check size
    local fromLayer = self
    if fromLayer:getNRows() ~= toLayer:getNRows() then corelog.Error("LayerRectangle:transformToLayer: # rows in fromLayer(="..fromLayer:getNRows()..") not equal to that in toLayer(="..toLayer:getNRows()..")") return nil end
    if fromLayer:getNColumns() ~= toLayer:getNColumns() then corelog.Error("LayerRectangle:transformToLayer: # columns in fromLayer(="..fromLayer:getNColumns()..") not equal to that in toLayer(="..toLayer:getNColumns()..")") return nil end

    -- construct transformCodeMap
    local transformCodeMap = {}
    local nCol = fromLayer:getNColumns()
    local anyBlockCode = "?"

    -- loop on rows
    for iRow, fromRow in ipairs(fromLayer._codeMap) do
        -- construct transformRow
        local transformRow = ""

        -- loop on columns
        for iCol = 1, nCol do
            -- get code's
            local fromCode = fromRow:sub(iCol, iCol)
            local toCode = toLayer:getCode(iCol, iRow)

            -- check code's
            if fromCode == toCode then
                transformRow = transformRow..anyBlockCode
            else
                transformRow = transformRow..toCode
            end
        end

        -- save row
        transformCodeMap[iRow] = transformRow
    end

    -- construct transformCodeArray
    local transformCodeArray = {}
    for code, codeCount in pairs(toLayer:codesNeeded()) do
        transformCodeArray[code] = toLayer._codeArray[code]:copy()
    end

    -- end
    local transformLayer = LayerRectangle:new({
        _codeArray  = transformCodeArray,
        _codeMap    = transformCodeMap,
    })
    return transformLayer
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function LayerRectangle.IsCodeArray(codeArray)
    -- end
    return LayerRectangle.CodeArrayValid(codeArray, false)
end

function LayerRectangle.CodeArrayValid(codeArray, warn)
    -- check validity
    if type(codeArray) ~= "table" then if warn then corelog.Warning("LayerRectangle.CodeArrayValid: Invalid codeArray (type="..type(codeArray)..")") end return false end
    for code, block in pairs(codeArray) do
        if type(code) ~= "string" then if warn then corelog.Warning("LayerRectangle.CodeArrayValid: Invalid code (type="..type(code)..")") end return false end
        if not mobj_block.Block.IsOfType(block) then if warn then corelog.Warning("LayerRectangle.CodeArrayValid: Invalid block (type="..type(block)..")") end return false end
    end

    -- end
    return true
end

function LayerRectangle.IsSameCodeArray(codeArrayA, codeArrayB)
    -- check input
    if not LayerRectangle.IsCodeArray(codeArrayA) or not LayerRectangle.IsCodeArray(codeArrayB) then return false end

    -- check same elements as in A
    local sizeA = 0
    for codeA, blockA in pairs(codeArrayA) do
        sizeA = sizeA + 1
        -- check same blockName
        local blockB = codeArrayB[codeA]
        if not blockA:isSame(blockB) then return false end
    end

    -- check no other elements in B
    local sizeB = 0
    for codeB, blockB in pairs(codeArrayB) do
        sizeB = sizeB + 1
    end
    if sizeA ~= sizeB then return false end

    -- end
	return true
end

function LayerRectangle.CodeArrayCopy(codeArray)
    -- check input
    if not LayerRectangle.IsCodeArray(codeArray) then corelog.Error("LayerRectangle.CodeArrayCopy: invalid codeArray: "..type(codeArray)) return end

    -- copy elements
    local codeArrayCopy = {}
    for code, block in pairs(codeArray) do
        codeArrayCopy[code] = block:copy()
    end

    -- end
	return codeArrayCopy
end

function LayerRectangle.TransformToCodeArray(...)
    -- get & check input from description
    local checkSuccess, codeArray = coreutils.CheckInput([[
        Transforms all block tables in the codeArray to Block objects.

        i.e. each block table like {
            _dx     = nil,
            _dy     = nil,
            _name   = "",
        }
        is transformed into a block object Block with the same fields

        Parameters:
            codeArray                   + (table, {}) array mapping _codeMap codes (characters) to Block's
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("LayerRectangle.TransformToCodeArray: Invalid input") return {} end

    local codeArrayTransform = {}
    -- copy elements
    for code, block in pairs(codeArray) do
        if mobj_block.Block.HasFieldsOfType(block) then
            if mobj_block.Block.HasMethodsOfType(block) then
                codeArrayTransform[code] = block -- already a Block
            else
                codeArrayTransform[code] = mobj_block.Block:new(block) -- transform
            end
        else
            corelog.Warning("LayerRectangle.TransformToCodeArray: block(="..textutils.serialize(block)..") does not have all Block fields => skipped")
        end
    end

    -- end
	return codeArrayTransform
end

function LayerRectangle.IsCodeMap(codeMap)
    -- check is codeMap
    if type(codeMap) ~= "table" then return false end
    local size_x = 0
    for iY, codeRow in ipairs(codeMap) do
        -- check row is string
        if type(codeRow) ~= "string" then return false end

        -- check row length
        local rowLen = codeRow:len()
        if iY == 1 then
            size_x = rowLen
        else
            if rowLen ~= size_x then return false end
        end
    end

    -- end
    return true
end

function LayerRectangle.CodeMapValid(codeArray, codeMap, warn)
    -- check codeMap validity
    local size_x = 0
    for iY, codeRow in ipairs(codeMap) do
        -- check row is string
        if type(codeRow) ~= "string" then if warn then corelog.Warning("LayerRectangle.CodeMapValid: Invalid codeRow (type="..type(codeRow)..")") end return false end

        -- check row length
        local rowLen = codeRow:len()
        if iY == 1 then
            size_x = rowLen
        else
            if rowLen ~= size_x then if warn then corelog.Warning("LayerRectangle.CodeMapValid: Invalid length(="..rowLen..") different from size_x(="..size_x..")") end return false end
        end

        -- check row elements
        for iX = 1, codeRow:len() do
            -- check code validity
            local code = codeRow:sub(iX, iX)
            if not codeArray[code] then if warn then corelog.Warning("LayerRectangle.CodeMapValid: code(="..code..") at ("..iX..","..iY..") not in codeArray") end return false end
        end
    end

    -- end
    return true
end

function LayerRectangle.IsSameCodeMap(codeMapA, codeMapB)
    -- check input
    if not LayerRectangle.IsCodeMap(codeMapA) or not LayerRectangle.IsCodeMap(codeMapB) then return false end

    -- end
	return LayerRectangle.IsSameMap(codeMapA, codeMapB)
end

function LayerRectangle.IsSameMap(mapA, mapB)
    -- check same elements as in A
    local sizeA = 0
    for iRow, rowA in ipairs(mapA) do
        sizeA = sizeA + 1
        -- check same row
        local rowB = mapB[iRow]
        if rowA ~= rowB then return false end
    end

    -- check no other elements in B
    local sizeB = 0
    for iRow, rowB in ipairs(mapB) do
        sizeB = sizeB + 1
    end
    if sizeA ~= sizeB then return false end

    -- end
	return true
end

function LayerRectangle.CodeMapCopy(codeMap)
    -- check input
    if not LayerRectangle.IsCodeMap(codeMap) then corelog.Error("LayerRectangle.CodeMapCopy: invalid codeMap: "..type(codeMap)) return end

    -- end
	return LayerRectangle.MapCopy(codeMap)
end

function LayerRectangle.MapCopy(map)
    -- copy elements
    local mapCopy = {}
    for iRow, row in ipairs(map) do
        mapCopy[iRow] = row
    end

    -- end
	return mapCopy
end

function LayerRectangle:getCodeRow(iRow)
    -- check
    if iRow < 1 or iRow > self:getNRows() then corelog.Error("LayerRectangle:getCodeRow: iRow(="..iRow..") not within range i.e. between 1 and "..self:getNRows()) return "" end

    -- end
    return self._codeMap[iRow]
end
