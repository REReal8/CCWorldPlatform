--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|


function CopyPattern(pattern)
	return {
		deltaX              = pattern.deltaX,
		deltaY              = pattern.deltaY,
		objectList 	        = CopyObjectList(pattern.objectList),
		clearRemainingSpace = pattern.clearRemainingSpace,
	}
end

function CopyObjectList(objectList)
    local objectListCopy = {}

    for i, object in ipairs(objectList) do
        objectListCopy[i] = {
            x = object.x,
            y = object.y,
            block = object.block,
        }
        if object.dx ~= nil and object.dy ~= nil then
            objectListCopy[i].dx = object.dx
            objectListCopy[i].dy = object.dy
        end
    end

	return objectListCopy
end

function BuildBlueprint_MetaData(buildData)
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(buildData.blueprintStartpoint), -- copy needed because otherwise reference is used twice
        needTool = true,
        needTurtle = true,
        fuelNeeded = 0,
        itemsNeeded = {},
    }

    -- loop on layers
    for i, buildLayer in ipairs(buildData.blueprint.layerList) do
        -- determine buildData for this layer
        local layerBuildData = {
            startpoint              = coremove.GetRelativeLocation(buildLayer.startpoint,
                                                                buildData.blueprintStartpoint.x,
                                                                buildData.blueprintStartpoint.y,
                                                                buildData.blueprintStartpoint.z),
            buildFromAbove          = buildLayer.buildFromAbove,
            replacePresentObjects   = buildLayer.replacePresentObjects,
            pattern                 = buildLayer.pattern,
        }

        -- get metadata for layer
        local layerMetaData = BuildRectangularPattern_MetaData(layerBuildData)

        -- update blueprint metadata
        metaData.fuelNeeded = metaData.fuelNeeded + layerMetaData.fuelNeeded
        for i, layerItemNeeded in ipairs(layerMetaData.itemsNeeded) do
            -- find item in itemlist (and increment counter if found)
            local itemAlreadyInList = false
            for j, itemNeeded in ipairs(metaData.itemsNeeded) do
                -- right item?
                if itemNeeded.itemName == layerItemNeeded.itemName then
                    itemNeeded.itemCount = itemNeeded.itemCount + layerItemNeeded.itemCount

                    itemAlreadyInList = true
                    break
                end
            end

            -- add new item to itemsNeeded
            if not itemAlreadyInList then
                table.insert(metaData.itemsNeeded, {itemName = layerItemNeeded.itemName, itemCount = layerItemNeeded.itemCount})
            end
        end
    end

    -- update metadata with escapeSequence (if present)
    -- ToDo: implement

    return metaData
end

function BuildBlueprint_Task(buildData)
    -- check input
    if type(buildData.blueprint) ~= "table" then coreutils.Error("role_builder.BuildBlueprint_Task: blueprint not a table") return false end
    if type(buildData.blueprint.escapeSequence) ~= "table" then coreutils.Error("role_builder.BuildBlueprint_Task: escape sequence not a table") return false end

    -- loop on layers
    for i, buildLayer in ipairs(buildData.blueprint.layerList) do
        -- determine buildData for this layer
        local layerBuildData = {
            startpoint              = coremove.GetRelativeLocation(buildLayer.startpoint,
                                                                   buildData.blueprintStartpoint.x,
                                                                   buildData.blueprintStartpoint.y,
                                                                   buildData.blueprintStartpoint.z),
            buildFromAbove          = buildLayer.buildFromAbove,
            replacePresentObjects   = buildLayer.replacePresentObjects,
            pattern                 = buildLayer.pattern,
        }

        -- build layer using internal task
        if BuildRectangularPattern_Task(layerBuildData) ~= true then
            coreutils.Error("role_builder.BuildBlueprint_Task(): Failed building layer " ..i..". Remaining layers skipped.")
            return false
        end
    end

    -- perform escape sequence
    for i, escapeLocation in ipairs(buildData.blueprint.escapeSequence) do
        coremove.GoTo(coremove.GetRelativeLocation(buildData.blueprintStartpoint,
                                                   escapeLocation.x,
                                                   escapeLocation.y,
                                                   escapeLocation.z))
    end

    return true
end

function BuildRectangularPattern_MetaData(buildData)
    -- check input
    if type(buildData) ~= "table" then coreutils.Error("role_builder.BuildRectangularPattern_MetaData: buildData not a table") return {} end
    if type(buildData.pattern) ~= "table" then coreutils.Error("role_builder.BuildRectangularPattern_MetaData: pattern not a table") return {} end

    -- determine needed items
    local itemList = BuildRectangularPattern_ItemsNeeded(buildData.pattern)

    -- return metadata
    return {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(buildData.startpoint), -- copy needed because otherwise reference is used twice
        needTool = true,
        needTurtle = true,
        fuelNeeded = 500, -- ToDo: calculate from actual movements needed
        itemsNeeded = itemList
    }
end

function BuildRectangularPattern_ItemsNeeded(pattern)
    -- check input
    if type(pattern.objectList) ~= "table" then coreutils.Error("role_builder.BuildRectangularPattern_ItemsNeeded: objectList not a table") return {} end

    local itemList = {}
    for i, object in ipairs(pattern.objectList) do
        local itemName = object.block

        -- find item in itemlist (and increment counter if found)
        local itemAlreadyInList = false
        for j, item in ipairs(itemList) do
            -- right item?
            if item.itemName == itemName then
                item.itemCount = item.itemCount + 1

                itemAlreadyInList = true
                break
            end
        end

        -- add new item to itemlist
        if not itemAlreadyInList then
            table.insert(itemList, {itemName = itemName, itemCount = 1})
        end
    end

    -- return itemList
    return itemList
end

--[[
    Function to build a rectangular pattern (blueprint) in the x,y plane.

    buildData = {
        startpoint              --> lower left coordinate to start building the pattern
        buildFromAbove          --> whether build should be done from above (true) or below (false)
        replacePresentObjects   --> whether objects should be replaced if it is already present in the minecraft world (default = true)
        pattern                 --> pattern to build
    }

    with pattern = {
        deltaX                  --> x size of pattern
        deltaY                  --> y size of pattern
        objectList              --> array of objects to build
        clearRemainingSpace     --> whether spce not in the objectlist should be cleared
    }

    with for each object = { 
        x                       --> x coordinate within the pattern
        y                       --> y coordinate within the pattern
        block                   --> minecraft blocktype to build (e.g. "minecraft:torch")
    }
--]]
function BuildRectangularPattern_Task(buildData)
    -- check input
    if type(buildData) ~= "table" then coreutils.Error("role_builder.BuildRectangularPattern_Task: buildData not a table") return false end
    if type(buildData.pattern) ~= "table" then coreutils.Error("role_builder.BuildRectangularPattern_Task: pattern not a table") return false end

    -- check mandatory pickage!
    local axePresent = coreinventory.Equip("minecraft:diamond_pickaxe")
    if not axePresent then
        coreutils.Error("role_builder.BuildRectangularPattern_Task(): No pickaxe present, we are on strike!")
        return false
    end

    -- check if inventory has what we need
    local itemList = BuildRectangularPattern_ItemsNeeded(buildData.pattern)
    for i, item in ipairs(itemList) do
        -- get items in inventory
        local items = coreinventory.CountItem(item.itemName)

        -- enough?
        if items < item.itemCount then
            coreutils.Warning("role_builder.BuildRectangularPattern_Task: Not enough(="..item.itemCount..") "..item.itemName.." (="..items..") in inventory to build the pattern")
        end
    end

    -- orientatie
    local deltaZ    = 1
    if buildData.buildFromAbove  then deltaZ    =  1
                            else deltaZ    = -1
    end

    -- go to starting location
    coremove.GoTo(coremove.GetRelativeLocation(buildData.startpoint, 0, 0, deltaZ), true)

    -- walk along x
    for x=0, buildData.pattern.deltaX - 1 do
        -- walk along y
        for iY=0, buildData.pattern.deltaY - 1 do
            -- determine y value such that path is back and forth in y
            local y = iY
            if x % 2 == 1 then
                y = buildData.pattern.deltaY - 1 - iY
            end

            -- ga naar de locatie
            coremove.MoveTo(coremove.GetRelativeLocation(buildData.startpoint, x, y, deltaZ), true)

            -- moeten we hier wat plaatsen?
            local placingBlock  = false
            for i, object in ipairs(buildData.pattern.objectList) do

                -- juiste coordinaat?
                if object.x == x and object.y == y then

                    -- onthouden voor zo
                    placingBlock = true

                    -- moeten we in een specifieke richting draaien?
                    if object.dx ~= nil and object.dy ~= nil then

                        -- turn in the right direction
                        coremove.TurnTo({dx = object.dx, dy = object.dy})
                    end

                    -- check if block already present
                    local has_block, block_data
                    if not buildData.replacePresentObjects then
                        if buildData.buildFromAbove then
                            has_block, block_data = turtle.inspectDown()
                        else
                            has_block, block_data = turtle.inspectUp()
                        end
                    end 

                    -- check placing object
                    if buildData.replacePresentObjects or not has_block or type(block_data) ~= "table" or block_data.name ~= object.block then
                        -- block nu plaatsen
                        if coreinventory.SelectItem(object.block) then
                            if buildData.buildFromAbove  then turtle.digDown()   turtle.placeDown()
                                                    else turtle.digUp()     turtle.placeUp()
                            end
                        else
                            -- mandatory item not in inventory, error message and ignore
                            coreutils.WriteToLog("Oops, BuildRectangularPattern_Task() item not in inventory: " .. object.block)
                        end
                    end

                    -- klaar met deze loop
                    break
                end
            end

            -- nee? Dan iets weghalen?
            if not placingBlock and buildData.pattern.clearRemainingSpace then

                -- vak schoon maken
                if buildData.buildFromAbove  then turtle.digDown()
                                        else turtle.digUp()
                end
            end
        end
    end

    return true
end


--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
