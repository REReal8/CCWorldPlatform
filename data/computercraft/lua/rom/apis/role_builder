-- the table that stores the data
local db = {
    job         = "builder",
}

-- functions
function BuildForest(funcData)
    coreutils.WriteToLog("Builder: build forest")
    coreutils.WriteToLog(funcData)
end


function R()
    TF({x=0, y=4, z=-2, dx=0, dy=1})
    print("klaar met 1")
    TF({x=6, y=10, z=-2, dx=0, dy=1})
    print("klaar met 2")
    TF({x=6, y=4, z=-2, dx=0, dy=1})
    print("klaar met 3")
    TF({x=0, y=10, z=-2, dx=0, dy=1})
    print("klaar met 4")
end

function RD(z)
    for lx=0, 5 do
        for ly=0, 5 do
            TD({x=lx, y=ly, z=z, dx=0, dy=1})
        end
    end
end

function TD(startpoint)
--    print("startpoint=" .. textutils.serialize(startpoint))
    local data = {
        startpoint  = startpoint,
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 1, --    > 0
            deltaY      = 1, --    > 0
            objectList  = {
                { x = 0, y = 0, block = "minecraft:dirt"},
            },
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true, -- false
    }

    BuildRectangle(data)
end


function TF(startpoint)
    local data = {
        startpoint  = startpoint,
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 6, --    > 0
            deltaY      = 6, --    > 0
            objectList  = {
                { x = 0, y = 0, block = "minecraft:torch"},
                { x = 0, y = 3, block = "minecraft:birch_sapling"},
                { x = 3, y = 3, block = "minecraft:torch"},
                { x = 3, y = 0, block = "minecraft:birch_sapling"},
            },
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true, -- false
    }

    BuildRectangle(data)
end

function BuildRectangle(data)
    -- orientatie
    local deltaZ    = 1
    if data.buildFromAbove  then deltaZ    =  1
                            else deltaZ    = -1
    end

    -- check if inventory has what we need

    -- pickaxe mandatory!
    local axePresent    = coreinventory.Equip("minecraft:diamond_pickaxe")
    if not axePresent then
        coreutils.WriteToLog("role_bilder.BuildRectangle(): No pickaxe present, we are on strike!")
        return
    end

    -- go to starting location
    coremove.GoTo(coremove.GetRelativeLocation(data.startpoint, 0, 0, deltaZ), true)

    -- walk along x
    for x=0, data.pattern.deltaX - 1 do
        -- walk along y
        for y=0, data.pattern.deltaY - 1 do

            -- ga naar de locatie
            coremove.MoveTo(coremove.GetRelativeLocation(data.startpoint, x, y, deltaZ), true)

            -- moeten we hier wat plaatsen?
            local placingBlock  = false
            for i, object in ipairs(data.pattern.objectList) do

                -- juiste coordinaat?
                if object.x == x and object.y == y then

                    -- onthouden voor zo
                    placingBlock = true

                    -- block nu plaatsen
                    if coreinventory.SelectItem(object.block) then
                        if data.buildFromAbove  then turtle.digDown()   turtle.placeDown()
                                                else turtle.digUp()     turtle.placeUp()
                        end
                    else
                        -- mandatory item not in inventory, error message and ignore
                        coreutils.WriteToLog("Oops, BuildRectangle() item not in inventory: " .. object.block)
                    end

                    -- klaar met deze loop
                    break
                end
            end

            -- nee? Dan iets weghalen?
            if not placingBlock and data.pattern.clearRemainingSpace then

                -- vak schoon maken
                if data.buildFromAbove  then turtle.digDown()
                                        else turtle.digUp()
                end
            end
        end
    end
end


--[[
function Rondje()
    -- eerst in positie komen (in de stam van de eerste boom)
    coremove.Up()
    Vooruit(1)

    -- naar de tweede boomn lopen, start positie van de lussen
    if db.diepte > 1 then Vooruit(6) end

    -- banen langs lopen
    local aantalBanen = math.floor(db.breedte / 2)
    for i=1, aantalBanen do

        -- vooruit
        Vooruit(6 * (db.diepte - 2))
        coremove.Left()
        Vooruit(6)
        coremove.Left()

        Vooruit(6 * (db.diepte - 2))
        -- laatste bocht niet maken
        if i ~= aantalBanen then
            coremove.Right()
            Vooruit(6)
            coremove.Right()
        end
    end

    -- terug naar huis, kan wat speciale dingen met zich mee brengen
    if aantalBanen == 0 then coremove.Right(2)  end
    if db.diepte    > 1 then Vooruit(6)         end


    -- over de volledige breedte terug naar
    coremove.Left()
    Vooruit(6 * (db.breedte - 1))

    -- terug in positie
    coremove.Left()
    coremove.Backward()
    coremove.Down()

    -- spullen opruimen
    Opruimen()
end

function Vooruit(aantal)
    aantal = aantal or 1

    -- het gewenste aantal stappen zetten
    for stap = 1, aantal do

        -- staat er een boom recht voor ons?
        if DetecteedBoom() then

            -- ja, omhakken dus (doet meteen een stap naar voren)
            KapBoom()
        else

            -- niks te zien, gewoon vooruit
            coremove.Forward()
        end
    end
end

function DetecteedBoom()
    local success, data = turtle.inspect()

    -- staat er een berkenboom voor onze neus?
    return success and type(data) == "table" and data.name == "minecraft:birch_log"
end

function KapBoom() -- kost ongeveer 37 movement (inclusief buiten bladeren) - 1 blok hout levert ~ 70 movement op
    local hoogte    = 1

    -- eerste stukkie stam weghalen en op de plek van de stam gaan staan
    turtle.dig()
    coremove.Forward(1)
    turtle.digDown()

    -- omhoog gaan totdat we bladeren zien
    while not turtle.inspect() do
        -- omhoog
        turtle.digUp()
        coremove.Up()

        -- bijhouden
        hoogte = hoogte + 1
    end

    -- eentje boven de eerste bladen staan
    turtle.digUp()
    coremove.Up()

    -- al het hout is weg (op het top blok na), nu de bladeren
    if db.schaarste then OogstBladerenBuitenkant(true) end
    OogstBladerenBuitenkant(false)

    -- terug (top blok nog ff hakken)
    turtle.digUp()
    coremove.Down(hoogte)

    -- staat er een berkenboom sapling voor onze neus?
    local success, data = turtle.inspectDown()
    if not success or type(data) ~= "table" or data.name ~= "minecraft:birch_sapling" then

        -- als er een blok staat, weghalen
        if success then turtle.digDown() end

        -- hebben we nu een sappling?
        if coreinventory.SelectItem("minecraft:birch_sapling")  then turtle.placeDown()
                                                                else coreutils.Error("No birch sapling to plant") end
    end
end

function OogstBladerenBuitenkant(buitenKant)
    -- in positie komen, twee vooruit en draaien
    if buitenKant then turtle.dig() coremove.Forward() end
    turtle.dig()
    coremove.Forward()
    coremove.Right()

    -- 4x een hoek nemen
    for i=1,4 do
        -- twee stappen naar de hoek
        if buitenKant then OogstBladerenStap(not buitenKant) end
        OogstBladerenStap(not buitenKant)

        -- draaien
        coremove.Right()

        -- twee stappen naar het midden
        if buitenKant then OogstBladerenStap(not buitenKant) end
        OogstBladerenStap(not buitenKant)
    end

    -- terug lopen
    coremove.Left()
    if buitenKant then coremove.Backward() end
    coremove.Backward()
end

function OogstBladerenStap(ookBoven)
    turtle.digDown()
    if ookBoven then turtle.digUp() end
    turtle.dig()
    coremove.Forward()
end

function Opruimen()
    coremove.Backward()
    coremove.Left()
    coreinventory.DropAll("minecraft:birch_sapling")
    coreinventory.GetEmptySlot()
    turtle.suck(64)
    coremove.Left()
    coremove.Left()
    coreinventory.DropAll("minecraft:stick")
    coremove.Left()
    coremove.Forward()
    coremove.Right()
    coremove.Forward()
    coreinventory.DropAll("minecraft:birch_log")
    coremove.Backward()
    coremove.Left()
end
]]

