-- the table that stores the data
local db = {
    job         = "builder",
}

-- functions
function BuildForest(funcData)
    coreutils.WriteToLog("Builder: build forest")
    coreutils.WriteToLog(funcData)
end


--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--
--

--[[
    Function to build a rectangular pattern (blueprint) in the x,y plane.

    data = {
        startpoint              --> lower left coordinate to start building the pattern
        buildFromAbove          --> whether build should be done from above (true) or below (false)
        replacePresentObjects   --> whether objects should be replaced if it is already present in the minecraft world (default = true)
        pattern                 --> pattern to build
    }

    with pattern = {
        deltaX                  --> x size of pattern
        deltaY                  --> y size of pattern
        objectList              --> array of objects to build
        clearRemainingSpace     --> whether spce not in the objectlist should be cleared
    }

    with for each object = { 
        x                       --> x coordinate within the pattern
        y                       --> y coordinate within the pattern
        block                   --> minecraft blocktype to build (e.g. "minecraft:torch")
    }
--]]
function BuildRectangle(data)
    -- check input
    if type(data) ~= "table" then coreutils.Error("role_builder.BuildRectangle: data not a table") return false end

    -- check if inventory has what we need

    -- check mandatory pickage!
    local axePresent    = coreinventory.Equip("minecraft:diamond_pickaxe")
    if not axePresent then
        coreutils.WriteToLog("role_bilder.BuildRectangle(): No pickaxe present, we are on strike!")
        return false
    end

    -- orientatie
    local deltaZ    = 1
    if data.buildFromAbove  then deltaZ    =  1
                            else deltaZ    = -1
    end
        
    -- go to starting location
    coremove.GoTo(coremove.GetRelativeLocation(data.startpoint, 0, 0, deltaZ), true)

    -- walk along x
    for x=0, data.pattern.deltaX - 1 do
        -- walk along y
        for iY=0, data.pattern.deltaY - 1 do
            -- determine y value such that path is back and forth in y
            local y = iY
            if x % 2 == 1 then
                y = data.pattern.deltaY - 1 - iY
            end

            -- ga naar de locatie
            coremove.MoveTo(coremove.GetRelativeLocation(data.startpoint, x, y, deltaZ), true)

            -- moeten we hier wat plaatsen?
            local placingBlock  = false
            for i, object in ipairs(data.pattern.objectList) do

                -- juiste coordinaat?
                if object.x == x and object.y == y then

                    -- onthouden voor zo
                    placingBlock = true

                    -- moeten we in een specifieke richting draaien?
                    if object.dx ~= nil and object.dy ~= nil then

                        -- turn in the right direction
                        coremove.TurnTo({dx = object.dx, dy = object.dy})
                    end

                    -- check if block already present
                    local has_block, block_data
                    if not data.replacePresentObjects then
                        if data.buildFromAbove then
                            has_block, block_data = turtle.inspectDown()
                        else
                            has_block, block_data = turtle.inspectUp()
                        end
                    end 

                    -- check placing object
                    if data.replacePresentObjects or not has_block or type(block_data) ~= "table" or block_data.name ~= object.block then
                        -- block nu plaatsen
                        if coreinventory.SelectItem(object.block) then
                            if data.buildFromAbove  then turtle.digDown()   turtle.placeDown()
                                                    else turtle.digUp()     turtle.placeUp()
                            end
                        else
                            -- mandatory item not in inventory, error message and ignore
                            coreutils.WriteToLog("Oops, BuildRectangle() item not in inventory: " .. object.block)
                        end
                    end

                    -- klaar met deze loop
                    break
                end
            end

            -- nee? Dan iets weghalen?
            if not placingBlock and data.pattern.clearRemainingSpace then

                -- vak schoon maken
                if data.buildFromAbove  then turtle.digDown()
                                        else turtle.digUp()
                end
            end
        end
    end

    return true
end

