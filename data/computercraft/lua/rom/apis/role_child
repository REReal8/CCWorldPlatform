-- the table that stores the data
local db = {
    job         = "alchemist",
    startLocation       = {x= 3, y= 2, z= 1, dx=0, dy=1},
    forestLocation      = {x= 0, y= 0, z= 1, dx=0, dy=1},
    nTrees = 1,
    craftingLocation    = {x= 3, y= 2, z= 1, dx=0, dy=1},
    crafterLocation     = {x=12, y= 0, z= 1, dx=0, dy=1},
    siloLocation        = {x=12, y=12, z= 1, dx=0, dy=1},
}

-- main functions
function LetItGrow()
    -- ready to start?
    local axePresent    = coreinventory.Equip("minecraft:diamond_pickaxe")
    local craftingTable = coreinventory.CountItem("minecraft:crafting_table")
    local birchSapling  = coreinventory.CountItem("minecraft:birch_sapling")

    -- stop if we don't meet the needs
    if not axePresent or craftingTable == 0 or birchSapling == 0 then
        -- no good
        print("Missing item(s) for a new start:")
        if not axePresent       then print ("* Need a diamond axe") end
        if craftingTable == 0   then print ("* Need a crafting tabel") end
        if birchSapling  == 0   then print ("* Need a birch sapling") end

        -- done here
        return false
    end

    -- coordinaten stelsel goed zetten
    coremove.SetLocation(db.startLocation)

    -- plant the sappling
    print (" ")
    print (">Creating initial fuel and forest<")
    coreinventory.SelectItem("minecraft:birch_sapling")
    turtle.place()
    db.nTrees = 1

    -- remove the ground under us, usefull for crafting later
    turtle.digDown()

    -- pick up any items under us (should be nothing though)
    turtle.suckDown()

    -- wait for a tree
    WaitForTree()

    -- blok voor ons omhakken
    turtle.dig()

    -- eerste log omzetten naar planken
    LogToPlanks(4)

    -- nu kunnen we bijtanken
    coreinventory.Refuel({itemName="minecraft:birch_planks", itemCount=4})

    -- rest van de boom omhakken
    coreinventory.Equip("minecraft:diamond_pickaxe")
    coremove.Up(1)
    role_forester.KapBoom()

    -- rest van de planken als brandstof gebruiken, kisten maken we laten (waarschijnlijk beter om eerst fakkeltje te maken trouwens, wellicht later)
    local logs      = coreinventory.CountItem("minecraft:birch_log")
    local sticks    = coreinventory.CountItem("minecraft:stick")

    -- logs to planks, leave 2 logs behind
    LogToPlanks((logs - 2)*4)
    local planks    = coreinventory.CountItem("minecraft:birch_planks")

    -- burn the planks and the sticks
    coreinventory.Refuel({itemName = "minecraft:birch_planks",  itemCount = planks}) -- last plank might be used als funace fuel
    coreinventory.Refuel({itemName = "minecraft:stick",         itemCount = sticks - 2}) -- crafting torch and furnace fuel

    -- we are ready to do more stuff!
    print("We have "..coreinventory.CountItem("minecraft:birch_sapling").." birch sapling(s)")
    print("We have "..turtle.getFuelLevel().." fuel")

    -- get into digging position
    print (">Creating furnace<")
    coreinventory.Equip("minecraft:diamond_pickaxe")
    turtle.digDown()
    coremove.Down()

    -- dig a hole, get cobblestone
    local cobblestone = 0
    while cobblestone < 9 do

        -- one layer lower
        turtle.digDown()
        coremove.Down()

        -- go round
        for i=1,4 do turtle.dig() coremove.Right() end

        -- count our cobblestone
        cobblestone = coreinventory.CountItem("minecraft:cobblestone")
    end

    -- restore our crafting spot
    coremove.MoveTo({z = db.startLocation.z - 1})
    if coreinventory.SelectItem("minecraft:dirt") or coreinventory.SelectItem("minecraft:cobblestone") then turtle.placeDown() end

    -- craft furnace
    CobblestoneToFurnace(1)

    -- remove initial crafting location
    if coreinventory.SelectItem("minecraft:dirt") then
        turtle.placeDown()
    else
        print("No dirt to revert initial crafting location")
    end

    -- build initial crafting location
    print (">Creating initial crafting station<")
    BuildInitialCraftingStation()

    -- craft torches
    LogToTorches(4)

    -- expand forest to max size
    local treesNeeded = 6
    print (">Extending forest to " .. treesNeeded .. " trees<")
    while db.nTrees < treesNeeded do
        -- Harvest Forest
        HarvestForest()

        -- try extend forest
        TryExtendForest(treesNeeded)
    end

    -- gather enough resources to craft all remaining items (chests, torches, ...)
    local chestsNeeded = 24
    local torchesNeeded = 6
    local logsNeeded = chestsNeeded * 2 + math.ceil(torchesNeeded / 2)
    print(">Gathering enough logs(=" .. logsNeeded .. ") for making " .. chestsNeeded .. " chests and " .. torchesNeeded .. " torches<")
    while coreinventory.CountItem("minecraft:birch_log") < logsNeeded do
        -- Harvest Forest
        HarvestForest()
    end

    -- create chests
    LogToChests(chestsNeeded)

    -- create torches
    LogToTorches(torchesNeeded)

    -- redo first tree according to pattern
    BuildNewTreePattern( 0, 0, 0)

    -- finish the crafting station
    print(">running FinishCraftingStation<")
    FinishCraftingStation()

    -- make a first (small) silo
    print(">running BuildSmallSilo<")
    BuildSmallSilo()

    -- back to start position
    GoHome()
end

function GoHome()
    coremove.GoTo({
        x	= 0,
        y	= 0,
        z	= 1,
        dx	= 0,
        dy	= 1,
    })
end

function Reset()
    coremove.SetLocation({
        x	= 0,
        y	= 0,
        z	= 1,
        dx	= 0,
        dy	= 1,
    })
end

function HarvestForest()
    -- go to first tree position
    coremove.GoTo(db.startLocation)

    -- wait for tree
    WaitForTree()

    -- harvest forest
    role_forester.Rondje({
        depth = db.nTrees,
        width = 2,
        dontCleanup = true,
    })

    -- refuel
    Refuel()
end

function GoStart()
    coremove.GoTo(db.startLocation)
end

function WaitForTree()
    local has_block, data = turtle.inspect()

    while not has_block or type(data) ~= "table" or data.name ~= "minecraft:birch_log" do
        -- ff wachten
        os.sleep(0.25)

        -- opnieuw kijken
        has_block, data = turtle.inspect()
    end
end

function Refuel()
    local fuelLevel     = turtle.getFuelLevel()
    local minFuel       = 500
    local refuelLevel   = 1000

    print("Refuel: current level: " .. turtle.getFuelLevel())

    -- do we need to refuel?
    if fuelLevel < minFuel then
        -- determine present en wanted, process the lowest value of both values
        local logs        = coreinventory.CountItem("minecraft:birch_log")
        local logsNeeded  = math.ceil((refuelLevel - fuelLevel ) / 60)    -- 1 log --> 4 planks, 4 planks have a burn value of 60 (15 each)
        local logsToBurn  = math.min(logs, logsNeeded)

        -- logs to planks
        LogToPlanks(logsToBurn * 4)

        -- burn all the planks just crafted
        local planksPresent   = coreinventory.CountItem("minecraft:birch_planks")
        coreinventory.Refuel({itemName = "minecraft:birch_planks",  itemCount = planksPresent})

        print("Refuel: new level: " .. turtle.getFuelLevel())
    end
end

function TryExtendForest(nTrees)
    print("Try extending forest from " .. db.nTrees .. " to " .. nTrees .. " trees")

    -- craft torches
    LogToTorches(4)

    while db.nTrees < nTrees do
        -- check input (sapling + 2x torch)
        local birchSaplings  = coreinventory.CountItem("minecraft:birch_sapling")
        local torches  = coreinventory.CountItem("minecraft:torch")

        -- stop if we don't meet the needs
        if birchSaplings < 1 or torches < 2 then
            return false
        end

        -- new tree
        BuildNewTreePattern(0, 6 * db.nTrees, 0)
        db.nTrees = db.nTrees + 1
    end

    return true
end

function BuildNewTreePattern(x, y, z)
    -- build forest layer
    role_builder.BuildRectangle({
        startpoint  = coremove.GetRelativeLocation(db.forestLocation, x, y, z),
        angle    = 0,
        pattern = {
            deltaX      = 6,
            deltaY      = 6,
            objectList  = {
                { x = 3, y = 3, block = "minecraft:birch_sapling"},
                { x = 3, y = 0, block = "minecraft:torch"},
                { x = 0, y = 3, block = "minecraft:torch"},
            },
            clearRemainingSpace = true,
        },
        buildFromAbove  = true,
    })
end

function FillHole()
    local blockType1 = "minecraft:cobblestone"
    local blockType2= "minecraft:dirt"

    -- loop over layers
    for z=-5, -1 do
        local blockType = blockType1
        if z ==-1 then
            blockType = blockType2
        end

        local layer = {
            startpoint  = coremove.GetRelativeLocation(db.startLocation, -1, -1, z),
            angle    = 0, -- 0 90 180 270
            pattern = {
                deltaX      = 3,
                deltaY      = 3,
                objectList  = {
                    { x = 0, y = 0, block = blockType},
                    { x = 0, y = 1, block = blockType},
                    { x = 0, y = 2, block = blockType},
                    { x = 1, y = 0, block = blockType},
                    { x = 1, y = 1, block = blockType},
                    { x = 1, y = 2, block = blockType},
                    { x = 2, y = 0, block = blockType},
                    { x = 2, y = 1, block = blockType},
                    { x = 2, y = 2, block = blockType},
                },
                clearRemainingSpace = false, -- false
            },
            buildFromAbove  = true,
        }

        role_builder.BuildRectangle(layer)
    end

    GoHome()
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--
--

function LogToPlanks(planks)
    -- check input
    local logsNeeded = math.ceil(planks / 4)
    local logs = coreinventory.CountItem("minecraft:birch_log")
    if logs < logsNeeded then print("Not enough logs(=" .. logsNeeded .. ") present(=" .. logs .. ") for planks(=" .. planks .. ")") return false end

    -- craft
    role_alchemist.Craft({
        taskId = "0",
        alchemieType = "craft",
        recipe = {
            [6] = {
                itemName = "minecraft:birch_log",
                itemCount = 1
            },
            yield = 4
        },
        itemName = "minecraft:birch_planks",
        itemCount = planks,
        ingredientsLocation = "inventory",
        workingLocation = db.craftingLocation,
    })
end

function PlanksToStick(sticks)
    -- check input
    local planksNeeded = math.ceil(sticks / 2)
    local planks = coreinventory.CountItem("minecraft:birch_planks")
    if planks < planksNeeded then print("Not enough planks(=" .. planksNeeded .. ") present(=" .. planks .. ") for sticks(=" .. sticks .. ")") return false end

    -- craft
    role_alchemist.Craft({
        taskId = "0",
        alchemieType = "craft",
        recipe = {
            [6] = {
                itemName = "minecraft:birch_planks",
                itemCount = 1
            },
            [10] = {
                itemName = "minecraft:birch_planks",
                itemCount = 1
            },
            yield = 4
        },
        itemName = "minecraft:stick",
        itemCount = sticks,
        ingredientsLocation = "inventory",
        workingLocation = db.craftingLocation,
    })
end

function CobblestoneToFurnace(furnances)
    --? put this static somewhere?
    local stoneName = "minecraft:cobblestone"
    local furnaceName = "minecraft:furnace"

    -- check input
    local stoneNeeded = math.ceil(furnances * 8)
    local stones = coreinventory.CountItem(stoneName)
    if stones < stoneNeeded then print("Not enough stones(=" .. stoneNeeded .. ") present(=" .. stones .. ") for furnances(=" .. furnances .. ")") return false end

    -- craft
    role_alchemist.Craft({
        taskId = "0",
        alchemieType = "craft",
        recipe = {
             [6] = {itemName = stoneName, itemCount = 1},
             [7] = {itemName = stoneName, itemCount = 1},
             [8] = {itemName = stoneName, itemCount = 1},
            [10] = {itemName = stoneName, itemCount = 1},
            [12] = {itemName = stoneName, itemCount = 1},
            [14] = {itemName = stoneName, itemCount = 1},
            [15] = {itemName = stoneName, itemCount = 1},
            [16] = {itemName = stoneName, itemCount = 1},
            yield = 1
        },
        itemName = furnaceName,
        itemCount = 1,
        ingredientsLocation = "inventory",
        workingLocation = db.craftingLocation,
    })
end

function LogToTorches(torches)
    -- check input
    local sticksNeeded = math.ceil(torches / 4)
    local charcoalNeeded = math.ceil(torches / 4)
    local planksNeeded = math.ceil(charcoalNeeded + sticksNeeded / 4);
    local logsNeeded = math.ceil(planksNeeded / 4)
    local logs = coreinventory.CountItem("minecraft:birch_log")
    if logs < logsNeeded then print("Not enough logs(=" .. logsNeeded .. ") present(=" .. logs .. ") for torches(=" .. torches .. ")") return false end

    -- create planks (as fuel)
    LogToPlanks(planksNeeded)

    -- create sticks
    PlanksToStick(sticksNeeded)

    -- smelt log into charcoal
    LogToCharcoal(charcoalNeeded)

    -- craft torches
    CharcoalAndStickToTorch(torches)
end

function LogToChests(chests)
    -- check input
    local planksNeeded = chests * 8
    local logsNeeded = math.ceil(planksNeeded / 4)
    local logs = coreinventory.CountItem("minecraft:birch_log")
    if (logs < logsNeeded) then print("Not enough logs(=" .. logsNeeded .. ") present(=" .. logs .. ") for chests(=" .. chests .. ")") return false end

    -- create planks
    LogToPlanks(planksNeeded)

    -- create chests
    PlanksToChests(chests)
end

function PlanksToChests(chests)
    --? put this static somewhere?
    local plankName = "minecraft:birch_planks"
    local chestName = "minecraft:chest"

    -- check input
    local planksNeeded = chests * 8
    local planks = coreinventory.CountItem(plankName)
    if (planks < planksNeeded) then print("Not enough planks(=" .. planksNeeded .. ") present(=" .. planks .. ") for chests(=" .. chests .. ")") return false end

    -- create chests
    role_alchemist.Craft({
        taskId = "0",
        alchemieType = "craft",
        recipe = {
             [6] = {itemName = plankName, itemCount = 1},
             [7] = {itemName = plankName, itemCount = 1},
             [8] = {itemName = plankName, itemCount = 1},
            [10] = {itemName = plankName, itemCount = 1},
            [12] = {itemName = plankName, itemCount = 1},
            [14] = {itemName = plankName, itemCount = 1},
            [15] = {itemName = plankName, itemCount = 1},
            [16] = {itemName = plankName, itemCount = 1},
            yield = 1
        },
        itemName = chestName,
        itemCount = chests,
        ingredientsLocation = "inventory",
        workingLocation = db.craftingLocation,
    })
end

function LogToCharcoal(charcoals)
    --? put this static somewhere?
    local logName = "minecraft:birch_log"
    local plankName = "minecraft:birch_planks"

    -- check input
    local logsNeeded = charcoals
    local logs = coreinventory.CountItem(logName)
    if (logs < logsNeeded) then print("Not enough logs(=" .. logsNeeded .. ") present(=" .. logs .. ") for charcoal(=" .. charcoals .. ")") return false end
    local planksNeeded = math.ceil(2 * charcoals / 3)
    local planks = coreinventory.CountItem(plankName)
    if (logs < logsNeeded) then print("Not enough plank(=" .. planksNeeded .. ") fuel present(=" .. planks .. ") for charcoal(=" .. charcoals .. ")") return false end

    role_alchemist.Smelt({
        recipe  = {
            ingredient = logName,
            itemName = "minecraft:charcoal",
            yield = 1,
        },
        fuel = "minecraft:birch_planks",    -- leave blank if you want te crafter to arrange the fuel
        ingredientsLocation = "inventory",
        itemCount = charcoals,
        workingLocation = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, -3),
        entryLocation   = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, 1),
    })

    -- wait for the furnace
    os.sleep(10)

    -- get items from the furnace
    role_alchemist.Pickup({
        workingLocation = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, -3),
        entryLocation   = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, 1),
    })
end

function CharcoalAndStickToTorch(torches)
    role_alchemist.Craft({
        taskId = "0",
        alchemieType = "craft",
        recipe = {
            [6] = {
                itemName = "minecraft:charcoal",
                itemCount = 1
            },
            [10] = {
                itemName = "minecraft:stick",
                itemCount = 1
            },
            yield = 4
        },
        itemName = "minecraft:torch",
        itemCount = torches,
        ingredientsLocation = "inventory",
        workingLocation = db.craftingLocation,
    })
end

function BuildInitialCraftingStation()

    -- start location for this small crafter station
    local crafterStart = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, 1)

    -- go there
    coremove.GoTo(crafterStart)

    -- place for future chest
    role_builder.BuildRectangle({
        startpoint  = coremove.GetRelativeLocation(crafterStart, 0, 0, -6),
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 1,
            deltaY      = 1,
            objectList  = {},
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true,
    })

    -- we have a new crafting location!
    db.craftingLocation = coremove.GetRelativeLocation(crafterStart, 0, 0, -5)

    -- under the furnace level
    role_builder.BuildRectangle({
        startpoint  = coremove.GetRelativeLocation(crafterStart, 0, 0, -5),
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 1,
            deltaY      = 2,
            objectList  = {},
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true,
    })

    -- furnace level
    role_builder.BuildRectangle({
        startpoint  = coremove.GetRelativeLocation(crafterStart, 0, 0, -4),
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 1,
            deltaY      = 2,
            objectList  = {
                { x = 0, y = 1, block = "minecraft:furnace"},
            },
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true,
    })

    -- up to serface
    coremove.GoTo(crafterStart)
end

function FinishCraftingStation()
    -- check inventory
    local chests    = coreinventory.CountItem("minecraft:chest")
    local torches   = coreinventory.CountItem("minecraft:torch")

    -- enough?
    if chests < 3 or torches < 2 then
        print("Not finishing the crafting station, not enough (chests: "..chests..", torches: "..torches..")")
        return false
    end

    -- temp / debug
--    local crafterStart = coremove.GetRelativeLocation(db.crafterLocation, 3, 3, 1)
--    db.craftingLocation = coremove.GetRelativeLocation(crafterStart, 0, 0, -5)

    -- build top layer
    role_builder.BuildRectangle({
        startpoint  = db.crafterLocation,
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 6,
            deltaY      = 6,
            objectList  = {
                { x = 0, y = 3, block = "minecraft:torch"},
                { x = 2, y = 5, block = "minecraft:chest"},
                { x = 3, y = 0, block = "minecraft:torch"},
                { x = 4, y = 5, block = "minecraft:chest"},
            },
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true,
    })

    -- crafter temporary storage chest
    role_builder.BuildRectangle({
        startpoint  = coremove.GetRelativeLocation(db.craftingLocation, 0, 0, -1),
        angle    = 0,
        pattern = {
            deltaX      = 1,
            deltaY      = 1,
            objectList  = {
                { x = 0, y = 0, block = "minecraft:chest"},
            },
            clearRemainingSpace = false,
        },
        buildFromAbove  = true,
    })
end

function BuildSmallSilo()
    -- check inventory
    local chests    = coreinventory.CountItem("minecraft:chest")
    local torches   = coreinventory.CountItem("minecraft:torch")

    -- enough?
    if chests < 18 or torches < 2 then
        print("Not building the small silo, not enough (chests: "..chests..", torches: "..torches..")")
        return false
    end

    -- build top layer
    role_builder.BuildRectangle({
        startpoint  = db.siloLocation,
        angle    = 0, -- 0 90 180 270
        pattern = {
            deltaX      = 6,
            deltaY      = 6,
            objectList  = {
                { x = 0, y = 3,                 block = "minecraft:torch"},
                { x = 2, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
                { x = 3, y = 0,                 block = "minecraft:torch"},
                { x = 4, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
            },
            clearRemainingSpace = true, -- false
        },
        buildFromAbove  = true,
    })

    -- create access shaft
    coremove.GoTo(coremove.GetRelativeLocation(db.siloLocation, 3, 3, 0))
    coremove.Down(3, true)

    -- create layers of chests
    for i=0,1 do
        -- crafter temporary storage chest
        role_builder.BuildRectangle({
            startpoint  = coremove.GetRelativeLocation(db.siloLocation, 2, 2, -2 - i),
            angle    = 0,
            pattern = {
                deltaX      = 3,
                deltaY      = 3,
                objectList  = {
                    { x = 0, y = 0, dx =-1, dy = 0, block = "minecraft:chest"},
                    { x = 0, y = 1, dx =-1, dy = 0, block = "minecraft:chest"},

                    { x = 0, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},
                    { x = 1, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},

                    { x = 1, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},
                    { x = 2, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},

                    { x = 2, y = 1, dx = 1, dy = 0, block = "minecraft:chest"},
                    { x = 2, y = 2, dx = 1, dy = 0, block = "minecraft:chest"},
                },
                clearRemainingSpace = true,
            },
            buildFromAbove  = false,
        })
    end

    -- help our builder escape
    coremove.GoTo(coremove.GetRelativeLocation(db.siloLocation, 3, 3, 1))
end