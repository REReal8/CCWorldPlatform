local db = {
    hostName    = "enterprise_woods",
    psForests   = "forests",
    psBirches   = "birch",
}

--[[
    The woods enterprise provides services for building and using wood production sites (i.e. forests).
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function AddNewSite_ASrv(...)
    -- get & check input from description
    local checkSuccess, baseLocation, forestLevel, nTrees, callback, callbackData = coreutils.CheckInput([[
        This async public service builds a new forest site and ensures it's ready for use.

        Return value:
            nil

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the service executed successfully
                forestLocator           - (URL) locating the site

        Parameters:
            serviceData                 - (table) data about this site
                baseLocation            + (table) world location of the base (lower left corner) of this site
                forestLevel             + (number) level of the site
                nTrees                  + (number) number of initial trees
                materialsHostLocator    - (URL) locating the host of the building materials
            callback                    + (string) name of function to call once service is ready
            callbackData                + (table, {}) data to supply to callback function
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.BuildAndStartNewSite_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- check nTrees == 1
    if nTrees ~=1 then corelog.Warning("enterprise_woods.BuildAndStartNewSite_ASrv: not yet implemented for nTrees="..nTrees) return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- create new forest
    local forest = mobj_birchforest.BirchForestClass:new({
        _id                     = coreutils.NewId(),
        _level                  = forestLevel,

        _location               = coremove.CopyLocation(baseLocation),
        _nTrees                 = 0,

        _localLogsLocator       = enterprise_turtle.GetHostLocator_Att(),
        _localSaplingsLocator   = enterprise_turtle.GetHostLocator_Att(),
    })

    -- save the forest
    corelog.WriteToLog(">Adding forest "..forest:getId()..".")
    local forestLocator = SaveForest(forest)

    -- create projectDef and projectData
    local firstTreeLocation         = coremove.GetRelativeLocation(baseLocation, 3, 2, 0)
    local plantFirstSaplingTaskData =  {
        startLocation               = coremove.CopyLocation(firstTreeLocation),
    }
    local harvestFirstTreeTaskData = {
        forestLevel                 = forestLevel, -- should be 0 ...
        firstTreeLocation           = coremove.CopyLocation(firstTreeLocation),
        nTrees                      = nTrees, -- should be 1 .,,
        waitForFirstTree            = false, -- first log should already be chopped
    }
    local projectData = {
        plantFirstSaplingTaskData   = plantFirstSaplingTaskData,
        plantFirstSaplingMetaData   = role_forester.PlantFirstSapling_MetaData(plantFirstSaplingTaskData),
        plantFirstSapling_Task      = "role_forester.PlantFirstSapling_Task",

        forestLocator               = forestLocator,
        forestL0                    = forestLevel,
        forestFirstTree             = nTrees,

        harvestFirstTreeTaskData    = harvestFirstTreeTaskData,
        harvestFirstTreeMetaData    = role_forester.HarvestForest_MetaData(harvestFirstTreeTaskData),
        harvestFirstTree_Task       = "role_forester.HarvestForest_Task",
    }
    local projectDef = {
        steps   = {
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , valueSource = 0, keyDefSource = "plantFirstSapling_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "plantFirstSaplingMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "plantFirstSaplingTaskData" },
            }},
            { stepName = "enterprise_woods.UpdateForest_SSrv", async = false, stepDataDef = {
                { keyDef = "forestLocator"              , valueSource = 0, keyDefSource = "forestLocator" },
                { keyDef = "forestLevel"                , valueSource = 0, keyDefSource = "forestL0" },
                { keyDef = "nTrees"                     , valueSource = 0, keyDefSource = "forestFirstTree" },
            }},
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , valueSource = 0, keyDefSource = "harvestFirstTree_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "harvestFirstTreeMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "harvestFirstTreeTaskData" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , valueSource = 2, keyDefSource = "success" },
                { keyDef = "success3"                   , valueSource = 3, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , valueSource = 4, keyDefSource = "success" },
            { keyDef = "forestLocator"                  , valueSource = 2, keyDefSource = "forestLocator" },
        }
    }
    local projectServiceData = {
        projectDef  = projectDef,
        projectData = projectData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

function ExtendSite_ASrv(...)
    -- get & check input from description
    local checkSuccess, forestLocator, treesNeeded, materialsHostLocator, callback, callbackData = coreutils.CheckInput([[
        This private async service extends a forest from the current # trees to another number of trees.

        Return value:
            nil

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the service executed successfully

        Parameters:
            serviceData                 - (table) data about the service
                forestLocator           + (URL) locating the forest
                treesNeeded             + (number) number of trees to extend forest to
                materialsHostLocator    + (URL) locating the host of the building materials
            callback                    + (string) name of function to call once service is ready
            callbackData                + (table) data to supply to callback function
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.ExtendSite_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- get forest
    local forest = GetForest(forestLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.ExtendSite_ASrv: Failed retrieving forest = "..forestLocator:getURI()) return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- determine projectSteps and projectData
    local projectSteps = { }
    local areAllTrueStepDataDef = {}
    local projectData = {
        forestLevel             = forest:getLevel(),
        forestLocator           = forestLocator,
        materialsHostLocator    = materialsHostLocator,
    }

    -- add project step for all trees to add
    local iStep = 0
    local forestNTrees = forest:getNTrees()    -- note: first already created in PlantFirstSapling_Task
    for iTree = forestNTrees + 1, treesNeeded do
        -- ToDo: simplify looping (currentNTreesStr and newNTreesStr are related/ almost the same)

        -- add collect and build tree step
        iStep = iStep + 1
        local iStepStr = tostring(iStep)
        local currentNTreesStr = "currentNTreeStep"..iStepStr
        table.insert(projectSteps,
            { stepName = "enterprise_woods.CollectAndBuildForestTree_ASrv", async = true, stepDataDef = {
                { keyDef = "forestLocator"          , valueSource = 0, keyDefSource = "forestLocator" },
                { keyDef = "currentNTrees"          , valueSource = 0, keyDefSource = currentNTreesStr },
                { keyDef = "materialsHostLocator"   , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }}
        )

        -- add step data
        projectData[currentNTreesStr] = iTree - 1

        -- add success stepDataDef
        table.insert(areAllTrueStepDataDef, { keyDef = "success"..iStepStr, valueSource = iStep, keyDefSource = "success" })

        -- update forest info
        iStep = iStep + 1
        iStepStr = tostring(iStep)
        local newNTreesStr = "newNTreeStep"..iStepStr
        table.insert(projectSteps,
            { stepName = "enterprise_woods.UpdateForest_SSrv", async = false, stepDataDef = {
                { keyDef = "forestLocator"          , valueSource = 0, keyDefSource = "forestLocator" },
                { keyDef = "forestLevel"            , valueSource = 0, keyDefSource = "forestLevel" },
                { keyDef = "nTrees"                 , valueSource = 0, keyDefSource = newNTreesStr },
            }}
        )

        -- add step data
        projectData[newNTreesStr] = iTree

        -- add success stepDataDef
        table.insert(areAllTrueStepDataDef, { keyDef = "success"..iStepStr, valueSource = iStep, keyDefSource = "success" })
    end
    -- add check for all a success
    iStep = iStep + 1
    table.insert(projectSteps,
        { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = areAllTrueStepDataDef}
    )
    local iAreAllTrueStep = iStep

    -- create project service data
    local projectDef = {
        steps = projectSteps,
        returnData  = {
            { keyDef = "success"    , valueSource = iAreAllTrueStep, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = projectDef,
        projectData = projectData,
    }

    -- start project
    corelog.WriteToLog(">Extending forest to " .. treesNeeded .. " trees")
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

function ProvideItemsTo_ASrv(...)
    -- get & check input from description
    local checkSuccess, itemsLocator, storageLocator, ingredientsSupplierLocator, assignmentsPriorityKey, callback, callbackData = coreutils.CheckInput([[
        This async public Supplier service provides specific items to a Storage.

        Return value:
            nil

        Async service return value (to callback):
                                            - (table)
                success                     - (boolean) whether the service executed correctly
                destinationItemsLocator     - (URL) locating the final Storage and the items that where transferred to it
                                                (upon service succes the "host" component of this URL should be equal to storageLocator, and
                                                the "query" should be equal to orderItems)

        Parameters:
            serviceData                     - (table) data for the service
                itemsLocator                + (URL) locating the items to provide
                                                (the "base" component of the URL specifies the Supplier that provides the items)
                                                (the "query" component of the URL specifies the items)
                storageLocator              + (URL) locating the Storage where the items need to be provided to
                ingredientsSupplierLocator  + (URL) locating where the production ingredients can be retrieved
                assignmentsPriorityKey      + (string, "") priorityKey that should be set for all assignments triggered by this service
            callback                        + (string) name of function to call once service is ready
            callbackData                    + (table) data to supply to callback function
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.ProvideItemsTo_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- get forest
    local forest = GetForest(itemsLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.ProvideItemsTo_ASrv: Failed retrieving forest = "..itemsLocator:getURI()) return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- have forest provide items
    local provideItems = itemsLocator:getQuery()
    forest:provideItemsTo_ASrv({
        provideItems                = provideItems,
        storageLocator              = storageLocator,
        ingredientsSupplierLocator  = ingredientsSupplierLocator,
        assignmentsPriorityKey      = assignmentsPriorityKey,
    }, callback, callbackData)
end

function Can_ProvideItems_QSrv(...)
    -- get & check input from description
    local checkSuccess, itemsLocator = coreutils.CheckInput([[
        This sync public query service answers the question whether the Supplier can provide specific items.

        Return value:
                                    - (table)
                success             - (boolean) whether the answer to the question is true

        Parameters:
            serviceData             - (table) data to the query
                itemsLocator        + (URL) locating the items that need to be queried for providability
                                        (the "base" component of the URL specifies the Supplier that provides the items)
                                        (the "query" component of the URL specifies the items to query for)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.Can_ProvideItems_QSrv: Invalid input") return {success = false} end

    -- get forest
    local forest = GetForest(itemsLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.Can_ProvideItems_QSrv: Failed retrieving forest = "..itemsLocator:getURI()) return {success = false} end

    -- check forest can provide items
    local provideItems = itemsLocator:getQuery()
    local canProvide = forest:can_ProvideItems_QSrv({
        provideItems    = provideItems,
    })

    -- end
    return canProvide
end

function NeedsTo_ProvideItemsTo_SSrv(...)
    -- get & check input from description
    local checkSuccess, itemsLocator, storageLocator = coreutils.CheckInput([[
        This sync public service returns the needs for the Supplier to provide specific items to a Storage.

        Return value:
                                            - (table)
                success                     - (boolean) whether the service executed correctly
                fuelNeed                    - (number) amount of fuel needed to provide items
                ingredientsNeed             - (table) ingredients needed to provide items

        Parameters:
            serviceData                     - (table) data to the query
                itemsLocator                + (URL) locating the items to provide
                                                (the "base" component of the URL specifies the Supplier that provides the items)
                                                (the "query" component of the URL specifies the items)
                storageLocator              + (URL) locating the Storage where the items need to be provided to
                ingredientsSupplierLocator  - (URL) locating where ingredients can be retrieved
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.NeedsTo_ProvideItemsTo_SSrv: Invalid input") return {success = false} end

    -- get forest
    local forest = GetForest(itemsLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.NeedsTo_ProvideItemsTo_SSrv: Failed retrieving forest = "..itemsLocator:getURI()) return {success = false} end

    -- determine needs
    local provideItems = itemsLocator:getQuery()
    local needs = forest:needsTo_ProvideItemsTo_SSrv({
        provideItems    = provideItems,
        storageLocator  = storageLocator,
    })

    -- end
    return needs
end

function GetForest(...)
    -- get & check input from description
    local checkSuccess, forestLocator = coreutils.CheckInput([[
        This private function gets a forest based on a forestLocator.

        Return value:
            forest              - (table) the forest object

        Parameters:
            forestLocator       + (URL) locating the forest
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.GetForest: Invalid input") return nil end

    -- check forestLocator is for this enterprise
    local serviceResults = IsForestURL_QSrv({ aURL = forestLocator})
    if not serviceResults.success then corelog.Error("enterprise_woods.GetForest: Invalid forestLocator (="..forestLocator:getURI()..").") return nil end

    -- object ophalen
    local forest = coredht.GetResource(forestLocator)
    if type(forest) ~= "table" then corelog.Warning("enterprise_woods.GetForest: forest "..forestLocator:getURI().." not found") return nil end
    forest = mobj_birchforest.BirchForestClass:new(forest)

    -- end
    return forest
end

function GetNumberOfForests_Att()
    --[[
        enterprise attribute: number of forests administered by the enterprise.
    --]]

    -- get forests
    local forests = GetForests()

    -- loop on forests
    local count = 0
    for k, forest in pairs(forests) do
        count = count + 1
    end

    return count
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function CollectAndBuildForestTree_ASrv(...)
    -- get & check input from description
    local checkSuccess, forestLocator, currentNTrees, materialsHostLocator, callback, callbackData = coreutils.CheckInput([[
        This private async service first collects the resources and than extends the forest with 1 tree.

        Return value:
            nil

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the service executed successfully

        Parameters:
            serviceData                 - (table) data about the service
                forestLocator           + (URL) locating the forest
                currentNTrees           + (number) current number of trees in the forest
                materialsHostLocator    + (URL) locating the host of the building materials
            callback                    + (string) name of function to call once service is ready
            callbackData                + (table) data to supply to callback function
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.CollectAndBuildForestTree_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- get forest
    local forest = GetForest(forestLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.CollectAndBuildForestTree_ASrv: Failed retrieving forest = "..forestLocator:getURI()) return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- create projectServiceData
    local treeBaseLocation = coremove.GetRelativeLocation(forest:getLocation(), 0, 6 * currentNTrees, 0)
    local projectData = {
        treeBaseLocation        = treeBaseLocation,
        materialsHostLocator    = materialsHostLocator,
    }
    local projectDef = {
        steps = {
            { stepName = "enterprise_woods.BuildForestTree_ASrv", async = true, stepDataDef = {
                { keyDef = "treeBaseLocation"       , valueSource = 0, keyDefSource = "treeBaseLocation" },
                { keyDef = "materialsHostLocator"   , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
        },
        returnData  = {
            { keyDef = "success"                    , valueSource = 1, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = projectDef,
        projectData = projectData,
    }

    -- start project
    corelog.WriteToLog("  >Extending forest with one tree to "..(currentNTrees + 1).." trees")
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

function BuildForestTree_ASrv(...)
    -- get & check input from description
    local checkSuccess, treeBaseLocation, materialsHostLocator, callback, callbackData = coreutils.CheckInput([[
        This private async service extends the forest with 1 tree

        Return value:
            nil

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the service executed successfully

        Parameters:
            serviceData                 - (table) data about this service
                treeBaseLocation        + (table) location of the base (lower left corner) of a forest tree (pattern)
                materialsHostLocator    + (URL) locating the host of the building materials
            callback                    + (string) name of function to call once service is ready
            callbackData                + (table) data to supply to callback function
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.BuildForestTree_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- let construction enterprise build the tree
    local buildData = {
        startpoint = coremove.CopyLocation(treeBaseLocation),
        buildFromAbove = true,
        replacePresentObjects = false,
        pattern = enterprise_woods.tree_pattern,
        materialsHostLocator = materialsHostLocator,
    }
    corelog.WriteToLog(">Building tree (forest pattern) at "..textutils.serialise(buildData.startpoint))
    enterprise_construction.BuildRectangularPattern_ASrv(buildData, callback, callbackData)
end

function UpdateForest_SSrv(...)
    -- get & check input from description
    local checkSuccess, forestLocator, forestLevel, nTrees = coreutils.CheckInput([[
        This private sync service updates the forest information.

        Return value:
                                        - (table)
                success                 - (boolean) whether the service executed successfully
                forestLocator           - (URL) locating the forest

        Parameters:
            serviceData                 - (table) data about the service
                forestLocator           + (URL) locating the forest
                forestLevel             + (number) with forest level
                nTrees                  + (number) number of trees in the forest
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.UpdateForest_SSrv: Invalid input") return {success = false} end

    -- get forest
    local forest = GetForest(forestLocator)
    if type(forest) ~="table" then corelog.Error("enterprise_woods.UpdateForest_SSrv: Failed retrieving forest = "..forestLocator:getURI()) return {success = false} end

    -- set forest information
    forest:setLevel(forestLevel)
    forest:setNTrees(nTrees)

    -- save forest data
    forestLocator = SaveForest(forest)

    -- end
    corelog.WriteToLog(">Updated forest (level="..forestLevel..", nTrees="..nTrees..")")
    return {
        success         = true,
        forestLocator   = forestLocator,
    }
end

function SaveForest(...)
    -- get & check input from description
    local checkSuccess, forest = coreutils.CheckInput([[
        This private function saves a forest to the dht.

        Return value:
            forestLocator       - (URL) locating the forest

        Parameters:
            forest              + (table) the forest object
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.SaveForest: Invalid input") return nil end

    -- get locator
    local forestLocator = GetForestLocator(forest:getId())

    -- save record
    coredht.SaveResource(forest, forestLocator)

    -- end
    return forestLocator
end

function DeleteForests()
    -- get forests
    local forests = GetForests()

    -- remove all
--    corelog.Warning("All forests are being deleted!")
    for id, forest in pairs(forests) do
        -- get locator
        local forestLocator = GetForestLocator(forest._id)

        -- remove
        RemoveForest(forestLocator)
    end
end

function GetForests()
    -- get forests
    local forests = coredht.GetData(db.hostName, db.psForests, db.psBirches)
    if not forests then forests = ResetForests() end

    -- end
    return forests
end

function ResetForests()
    return coredht.SaveData({}, db.hostName, db.psForests, db.psBirches)
end

function RemoveForest(...)
    -- get & check input from description
    local checkSuccess, forestLocator = coreutils.CheckInput([[
        This private function removes a forest from the dht.

        Return value:
            nil

        Parameters:
            forestLocator       + (URL) locating the forest
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.RemoveForest: Invalid input") return nil end

    -- remove record
    corelog.WriteToLog(">removing forest "..forestLocator:getURI())
    coredht.RemoveResource(forestLocator)
end

function GetHostLocator_Att()
    --[[
        Attribute locating this enterprise.

        Return value:
            hostLocator             - (URL) locating this enterprise

        Parameters:
            nil
    --]]

    local hostURL = url.URLClass:new()
    hostURL:setHost(db.hostName)

    return hostURL
end

function IsForestURL_QSrv(...)
    -- get & check input from description
    local checkSuccess, aURL = coreutils.CheckInput([[
        This sync public service answers the question if a URL is that of a Forest.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully

        Parameters:
            queryData               - (table) data about the query
                aURL                + (URL) that needs to be queried
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.IsForestURL_QSrv: Invalid input") return {success = false} end

    -- check if of this Supplier
    local host = aURL:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_woods.IsForestURL_QSrv: Invalid host input in URL (="..aURL:getURI()..").") return {success = false} end
    if host == db.hostName then
        return {success = true}
    else
        return {success = false}
    end
end

function GetForestLocator(...)
    -- get & check input from description
    local checkSuccess, id = coreutils.CheckInput([[
        This private function provides the URL of a forest based on it's (internal) id.

        Return value:
            forestLocator           - (URL) locating the forest

        Parameters:
            id                      + (string) with the id of the forest
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_woods.GetForestLocator: Invalid input") return nil end

    -- construct URL
    local forestLocator = GetHostLocator_Att()
    local path = "/"..db.psForests.."/"..db.psBirches.."/id="..id
    forestLocator:setPath(path)

    -- end
    return forestLocator
end

tree_pattern = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 3, y = 3, block = "minecraft:birch_sapling"},
        { x = 3, y = 0, block = "minecraft:torch"},
        { x = 0, y = 3, block = "minecraft:torch"},
    },
    clearRemainingSpace = true,
}
