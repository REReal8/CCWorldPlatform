local testStartLocation  = {x= 0, y= 0, z= 1, dx=0, dy=1}

local testBuildPattern1 = {
    deltaX      = 4,
    deltaY      = 6,
    objectList  = {
        { x = 0, y = 3,                 block = "minecraft:torch"},
        { x = 2, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
        { x = 3, y = 0,                 block = "minecraft:torch"},
    },
    clearRemainingSpace = true,
}

local testBuildPattern2 = {
    deltaX      = 3,
    deltaY      = 3,
    objectList  = {
        { x = 0, y = 0, dx =-1, dy = 0, block = "minecraft:chest"},
        { x = 0, y = 1, dx =-1, dy = 0, block = "minecraft:chest"},

        { x = 0, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},
        { x = 1, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},

        { x = 1, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},
        { x = 2, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},

        { x = 2, y = 1, dx = 1, dy = 0, block = "minecraft:chest"},
        { x = 2, y = 2, dx = 1, dy = 0, block = "minecraft:chest"},
    },
    clearRemainingSpace = true,
}

local testBuildPattern3 = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 0, y = 3,                 block = "minecraft:torch"},
        { x = 2, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
        { x = 3, y = 0,                 block = "minecraft:torch"},
        { x = 4, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
    },
    clearRemainingSpace = true,
}

local testBuildPattern4 = {
    deltaX      = 1,
    deltaY      = 1,
    objectList  = {
    },
    clearRemainingSpace = true,
}

local testBlueprint1 = {
    layerList = {
        { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove  = true, pattern = testBuildPattern3},
        { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove  = false, pattern = testBuildPattern4},
        { startpoint = { x= 2, y= 2, z= -2}, buildFromAbove  = false, pattern = testBuildPattern2},
        { startpoint = { x= 2, y= 2, z= -3}, buildFromAbove  = false, pattern = role_builder.CopyPattern(testBuildPattern2)}
    },
    escapeSequence = {
        { x= 3, y= 3, z=  1},
    }
}

local testBlueprint2 = {
    layerList = {
        { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove  = true, pattern = testBuildPattern1},
        { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove  = false, pattern = testBuildPattern2},
    },
    escapeSequence = {
        { x= 3, y= 3, z=  1},
    }
}

function T_BuildRectangularPattern_FromTurtle()
    -- test service 1
    corelog.WriteToLog("# Test BuildRectangularPattern_ASrv (from turtle)")
    local buildData = {
        startpoint = testStartLocation,
        buildFromAbove = true,
        pattern = testBuildPattern1,
    }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}

    corelog.WriteToLog("T_construction calling BuildRectangularPattern_ASrv("..textutils.serialise(buildData)..", "..callbackFunction..")")
    enterprise_construction.BuildRectangularPattern_ASrv(buildData, callbackFunction, callbackData)
end

function T_BuildBlueprint_Service()
    -- test service 2
    corelog.WriteToLog("# Test 2")
    local blueprintBuildData = {blueprintStartpoint = coremove.GetRelativeLocation(testStartLocation, 6, 0, 0), blueprint = testBlueprint1}
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}
    corelog.WriteToLog("T_construction calling BuildBlueprint_ASrv("..textutils.serialise(blueprintBuildData)..", "..callbackFunction..")")
    enterprise_construction.BuildBlueprint_ASrv(blueprintBuildData, callbackFunction, callbackData)
end

function T_role_builder_MetaDatas()
    local buildData = {startpoint = testStartLocation, buildFromAbove = true, pattern = testBuildPattern1}
    local blueprintBuildData = {blueprintStartpoint = coremove.GetRelativeLocation(testStartLocation, 6, 0, 0), blueprint = testBlueprint2}

    corelog.WriteToLog("BuildRectangularPattern_MetaData => "..textutils.serialize(role_builder.BuildRectangularPattern_MetaData(buildData)))
    corelog.WriteToLog("BuildBlueprint_MetaData => "..textutils.serialize(role_builder.BuildBlueprint_MetaData(blueprintBuildData)))
end

function T_BuildRectangularPattern_Task()
    local buildData = {startpoint = testStartLocation, buildFromAbove = true, replacePresentObjects = true, pattern = testBuildPattern1}

    role_builder.BuildRectangularPattern_Task(buildData)
end
