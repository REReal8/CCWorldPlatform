local testStartLocation     = {x= -6, y= 0, z= 1, dx=0, dy=1}
local testStartLocation2    = coremove.GetRelativeLocation(testStartLocation, 0, 6, 0)

local testBuildLayer1 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = 4,
    _size_y     = 6,
    _blockList  = {
        mobj_block2d.Block2d:new({_x = 0, _y = 3,                   _name = "minecraft:torch"}),
        mobj_block2d.Block2d:new({_x = 2, _y = 5, _dx = 0, _dy = 1, _name = "minecraft:chest"}),
        mobj_block2d.Block2d:new({_x = 3, _y = 0,                   _name = "minecraft:torch"}),
    },
    _clearRemainingSpace = true,
})

local testBuildLayer2 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = 3,
    _size_y     = 3,
    _blockList  = {
        {_x = 0, _y = 0, _dx =-1, _dy = 0,  _name = "minecraft:chest"},
        {_x = 0, _y = 1, _dx =-1, _dy = 0,  _name = "minecraft:chest"},

        {_x = 0, _y = 2, _dx = 0, _dy = 1,  _name = "minecraft:chest"},
        {_x = 1, _y = 2, _dx = 0, _dy = 1,  _name = "minecraft:chest"},

        {_x = 1, _y = 0, _dx = 0, _dy =-1,  _name = "minecraft:chest"},
        {_x = 2, _y = 0, _dx = 0, _dy =-1,  _name = "minecraft:chest"},

        {_x = 2, _y = 1, _dx = 1, _dy = 0,  _name = "minecraft:chest"},
        {_x = 2, _y = 2, _dx = 1, _dy = 0,  _name = "minecraft:chest"},
    },
    _clearRemainingSpace = true,
})

local testBuildLayer3 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = 6,
    _size_y     = 6,
    _blockList  = {
        {_x = 0, _y = 3,                    _name = "minecraft:torch"},
        {_x = 2, _y = 5, _dx = 0, _dy = 1,  _name = "minecraft:chest"},
        {_x = 3, _y = 0,                    _name = "minecraft:torch"},
        {_x = 4, _y = 5, _dx = 0, _dy = 1,  _name = "minecraft:chest"},
    },
    _clearRemainingSpace = true,
})

local testBuildLayer4 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = 1,
    _size_y     = 1,
    _blockList  = {
    },
    _clearRemainingSpace = true,
})

function T_BuildLayer_ASrv_FromTurtle()
    -- test service 1
    corelog.WriteToLog("* BuildLayer_ASrv (from turtle) test")
    local buildData = {
        startpoint = testStartLocation,
        buildFromAbove = true,
        layer = testBuildLayer1,
        materialsHostLocator = enterprise_turtle.GetHostLocator_Att()
    }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}

    corelog.WriteToLog("T_construction calling BuildLayer_ASrv("..textutils.serialise(buildData)..", "..callbackFunction..")")
    enterprise_construction.BuildLayer_ASrv(buildData, callbackFunction, callbackData)
end

function T_BuildLayer_ASrv_FromChest()
    -- test service
    corelog.WriteToLog("* BuildLayer_ASrv (from chest) test")

    -- create project definition
    local buildRectangularPattern_ASrvProjectDef = {
        steps   = {
            -- preparation
            { stepName = "enterprise_projects.StartProject_ASrv", async = true, stepDataDef = {
                { keyDef = "projectDef"             , valueSource = 0, keyDefSource = "projectDef" },
                { keyDef = "projectData"            , valueSource = 0, keyDefSource = "projectData" },
            }},

            -- BuildLayer_ASrv
            { stepName = "enterprise_construction.BuildLayer_ASrv", async = true, stepDataDef = {
                { keyDef = "startpoint"             , valueSource = 0, keyDefSource = "startpoint" },
                { keyDef = "buildFromAbove"         , valueSource = 0, keyDefSource = "buildFromAbove" },
                { keyDef = "layer"                  , valueSource = 0, keyDefSource = "layer" },

                { keyDef = "materialsHostLocator"   , valueSource = 1, keyDefSource = "chestLocator" },
            }},

            -- cleanup
            { stepName = "enterprise_chests.DelistChest_ASrv", async = true, stepDataDef = {
                { keyDef = "chestLocator"           , valueSource = 1, keyDefSource = "chestLocator" },
            }},

            -- wrap-up
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"               , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"               , valueSource = 2, keyDefSource = "success" },
                { keyDef = "success3"               , valueSource = 3, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                    , valueSource = 4, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = buildRectangularPattern_ASrvProjectDef,
        projectData = {
            -- chest
            projectDef  = t_chests.GetRegisterAndUpdateChestProjectDef(),
            projectData = {
                chestLocation        = coremove.GetRelativeLocation(testStartLocation, 2, 5, 0),
                chestAccessDirection = "top",
            },

            -- build data
            startpoint          = testStartLocation2,
            buildFromAbove      = true,
            layer               = testBuildLayer1,
        },
    }

    -- start project
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}
    enterprise_projects.StartProject_ASrv(projectServiceData, callbackFunction, callbackData)
end

function T_BuildBlueprint_ASrv()
    -- prepare test
    corelog.WriteToLog("* BuildBlueprint_ASrv test")
    local testBlueprint1 = {
        layerList = {
            { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove  = true, layer = testBuildLayer3:copy()},
            { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove  = false, layer = testBuildLayer4:copy()},
            { startpoint = { x= 2, y= 2, z= -2}, buildFromAbove  = false, layer = testBuildLayer2:copy()},
            { startpoint = { x= 2, y= 2, z= -3}, buildFromAbove  = false, layer = testBuildLayer2:copy()}
        },
        escapeSequence = {
            { x= 3, y= 3, z=  1},
        }
    }
    local blueprintBuildData = {
        blueprintStartpoint     = coremove.GetRelativeLocation(testStartLocation, 0, 12, 0),
        blueprint               = testBlueprint1,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = {"some callback data"}

    -- test
--    corelog.WriteToLog("T_construction calling BuildBlueprint_ASrv("..textutils.serialise(blueprintBuildData)..", "..callbackFunction..")")
    enterprise_construction.BuildBlueprint_ASrv(blueprintBuildData, callbackFunction, callbackData)

    -- cleanup test
end
