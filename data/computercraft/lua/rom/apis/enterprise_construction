--[[
    The construction enterprise provides services to construct structures in the physical minecraft world.
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function BuildBlueprint_ASrv(buildData, callback, callbackData)
    --[[
        This async public service builds a blueprint as a single assignment/ task.

        Return value:
            nil 

        Async service return value (to callback):
                                        - (table) {success = true} if the pattern was succesfully build

        Parameters:
            buildData                   - (table) data about what to build
                blueprintStartpoint     - (table) top lower left coordinate to start building the blueprint
                blueprint               - (table) blueprint to build
                    layerList           - (table) layer to build
                    escapeSequence      - (table) escapeSequence of blueprint
            callback                    - (string) name of function to call once the pattern is build
            callbackData                - (table) data to supply to callback function
    ]]

    -- check input
    if type(buildData) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint_ASrv: Invalid buildData") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(buildData.blueprintStartpoint) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint_ASrv: Invalid blueprintStartpoint") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(buildData.blueprint) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint_ASrv: Invalid blueprint") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(buildData.blueprint.layerList) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint_ASrv: Invalid layerList") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(callback) ~= "string" then corelog.Error("enterprise_construction.BuildBlueprint_ASrv: callback not a string") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    callbackData = callbackData or {}

    -- construct assignment metadata
    local metaData = role_builder.BuildBlueprint_MetaData(buildData)

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_builder.BuildBlueprint_Task", buildData, callback, callbackData)
end

function BuildRectangularPattern_ASrv(buildData, callback, callbackData)
    --[[
        This async public service builds a rectangular pattern in the x,y plane as a single assignment/ task.

        Return value:
            nil 

        Async service return value (to callback):
                                        - (table) {success = true} if the pattern was succesfully build

        Parameters:
            buildData                   - (table) data about what to build
                startpoint              - (table) lower left coordinate to start building the pattern
                buildFromAbove          - (boolean) whether build should be done from above (true) or below (false)
                replacePresentObjects   - (boolean) whether objects should be replaced if it is already present in the minecraft world (default = false)
                pattern                 - (table) pattern to build
                    deltaX              - (number) x size of pattern
                    deltaY              - (number) size of pattern
                    objectList          - (table) array of objects to build, with for each object
                        x               - (number) x coordinate within the pattern
                        y               - (number) y coordinate within the pattern
                        block           - (string) minecraft blocktype to build (e.g. "minecraft:torch")
                    clearRemainingSpace - (boolean) whether space not in the objectlist should be cleared
                materialsHostLocator   - (URL) stating where the building materials can be located
            callback                    - (string) name of function to call once the pattern is build
            callbackData                - (table) data to supply to callback function
    ]]

    -- check input
    if type(buildData) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid buildData") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local startpoint = buildData.startpoint
    if type(startpoint) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid startpoint") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local buildFromAbove = buildData.buildFromAbove
    if type(buildFromAbove) ~= "boolean" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid buildFromAbove") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local replacePresentObjects = buildData.replacePresentObjects
    local pattern = buildData.pattern
    if type(pattern) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid pattern") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(buildData.materialsHostLocator) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid materialsHostLocator") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local materialsHostLocator = url.URLClass:new(buildData.materialsHostLocator)
    if type(callback) ~= "string" then corelog.Error("enterprise_construction.BuildRectangularPattern_ASrv: Invalid callback") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    callbackData = callbackData or {}

    -- get assignment metadata
    local metaData = role_builder.BuildRectangularPattern_MetaData(buildData)

    -- determine materialsItemsLocation (by update materialsHostLocator with itemsNeeded)
    local materialsItemsLocation = materialsHostLocator
    materialsItemsLocation:setQuery(coreutils.DeepCopy(metaData.itemsNeeded))
    corelog.WriteToLog("materialsItemsLocation="..materialsItemsLocation:getURI())

    -- set local output location
    -- note:    Because BuildRectangularPattern_Task requires a turtle to have the goods in it's inventory at this point specify that a turtle 
    --          should pick up the materials. We however do not yet specify which turtle as we leave it up to the (relayed services of) 
    --          the TransferItemsFromTo_ASrv service to find that out. Because of below statement the resulting destinationItemsLocator return value 
    --          of that service should specify which turtle has the items in it's inventory.
    local materialsLocalHostLocator = enterprise_turtle.GetISHURL()
    corelog.WriteToLog("materialsLocalHostLocator="..materialsLocalHostLocator:getURI())

    -- create project service data
    local buildRectangularPatternProject = {
        services    = {
            { serviceName = "enterprise_isp.TransferItemsFromTo_ASrv", async = true, input = {
                { keyName = "sourceItemsLocator"        , valueSource = 0, sourceKey = "materialsItemsLocation" },
                { keyName = "destinationHostLocator"    , valueSource = 0, sourceKey = "materialsLocalHostLocator" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "taskFunctionName" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "metaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "taskData" },
            }},
            { serviceName = "enterprise_projects.AreAllTrue_QSrv", async = false, input = {
                { keyName = "success1"                  , valueSource = 1, sourceKey = "success" },
                { keyName = "success2"                  , valueSource = 2, sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success"                   , valueSource = 3, sourceKey = "success" },
        }
    }
    local projectData = {
        materialsItemsLocation      = materialsItemsLocation,
        materialsLocalHostLocator  = materialsLocalHostLocator,

        taskFunctionName            = "role_builder.BuildRectangularPattern_Task",
        metaData                    = metaData,
        taskData = {
            startpoint              = startpoint,
            buildFromAbove          = buildFromAbove,
            replacePresentObjects   = replacePresentObjects,
            pattern                 = pattern,
        }
    }
    local serviceData = {
        projectDefinition = buildRectangularPatternProject,
        projectInputData = projectData,
    }

    -- start project
    corelog.WriteToLog(">Building pattern at "..textutils.serialise(startpoint))
    enterprise_projects.StartProject_ASrv(serviceData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

