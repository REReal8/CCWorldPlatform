--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

--                        _
--                       (_)
--    ___  ___ _ ____   ___  ___ ___  ___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|
--   \__ \  __/ |   \ V /| | (_|  __/\__ \
--   |___/\___|_|    \_/ |_|\___\___||___/


-- ToDo: consider a distributed implementation (i.e. that uses multiple assignments for various parts of the blueprint)
function BuildBlueprint(buildData, callback, callbackData)
    --[[
        This async public service builds a blueprint.

        Return value:
            nil 

        Async service return value (to callback):
                                        - (table) {success = true} if the pattern was succesfully build

        Parameters:
            buildData                   - (table) data about what to build
                blueprintStartpoint     - (table) top lower left coordinate to start building the blueprint
                blueprint               - (table) blueprint to build
                    layerList           - (table) layer to build
                    escapeSequence      - (table) escapeSequence of blueprint
            callback                    - (string) name of function to call once the pattern is build
            callbackData                - (table) data to supply to callback function
    ]]


    -- check input
    if type(buildData) ~= "table" then
        corelog.Error("enterprise_construction.BuildBlueprint: bluePrintData not a table")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    else
        if type(buildData.blueprintStartpoint) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint: blueprintStartpoint not a table") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(buildData.blueprint) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint: blueprint not a table") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(buildData.blueprint.layerList) ~= "table" then corelog.Error("enterprise_construction.BuildBlueprint: blueprint.layerList not a table") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    end
    if type(callback) ~= "string" then corelog.Error("enterprise_construction.BuildBlueprint: callback not a string") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- construct assignment metadata
    local metaData = role_builder.BuildBlueprint_MetaData(buildData)

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_builder.BuildBlueprint_Task", buildData, callback, callbackData)

    return true
end

function BuildRectangularPattern(buildData, callback, callbackData)
    --[[
        This async public service builds a rectangular pattern in the x,y plane.

        Return value:
            nil 

        Async service return value (to callback):
                                        - (table) {success = true} if the pattern was succesfully build

        Parameters:
            buildData                   - (table) data about what to build
                startpoint              - (table) lower left coordinate to start building the pattern
                buildFromAbove          - (boolean) whether build should be done from above (true) or below (false)
                replacePresentObjects   - (boolean) whether objects should be replaced if it is already present in the minecraft world (default = true)
                pattern                 - (table) pattern to build
                    deltaX              - (number) x size of pattern
                    deltaY              - (number) size of pattern
                    objectList          - (table) array of objects to build, with for each object
                        x               - (number) x coordinate within the pattern
                        y               - (number) y coordinate within the pattern
                        block           - (string) minecraft blocktype to build (e.g. "minecraft:torch")
                    clearRemainingSpace - (boolean) whether space not in the objectlist should be cleared                    
            callback                    - (string) name of function to call once the pattern is build
            callbackData                - (table) data to supply to callback function
    ]]

    -- check input
    if type(buildData) ~= "table" then
        corelog.Error("enterprise_construction.BuildRectangularPattern: buildData not a table")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    else
        if type(buildData.startpoint) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern: startpoint not a table") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(buildData.buildFromAbove) ~= "boolean" then corelog.Error("enterprise_construction.BuildRectangularPattern: startpoint not a boolean") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(buildData.pattern) ~= "table" then
            corelog.Error("enterprise_construction.BuildRectangularPattern: pattern not a table")
            return coreutils.DoCallback(callback, callbackData, {success = false})
        else
        end
    end
    --
    -- callbackFunction
    if type(callback) ~= "string" then corelog.Error("enterprise_construction.BuildRectangularPattern: callback not a string") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    --
    -- callbackData
    callbackData = callbackData or {} --> if no callback arguments supplied {} is sufficient
    if type(callbackData) ~= "table" then corelog.Error("enterprise_construction.BuildRectangularPattern: callbackData not a table") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- construct assignment metadata
    local metaData = role_builder.BuildRectangularPattern_MetaData(buildData)

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_builder.BuildRectangularPattern_Task", buildData, callback, callbackData)

    return nil
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

