function NewEnterprise()
    -- create new Id
    local enterpriseId = coreutils.NewId()

    -- add to dht
    coredht.SaveData({
        -- ToDo: add enterprise data here
    }, "enterprises", enterpriseId)

    -- init enterprise
    Init(enterpriseId)
end

function Init(enterpriseId)
    -- create
    coreutils.WriteToLog("Enterprise Construction "..enterpriseId.." created");

    -- ToDo: get this from message box later
    NewBuilderJob(enterpriseId)
end


--                        _               
--                       (_)              
--    ___  ___ _ ____   ___  ___ ___  ___ 
--   / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|
--   \__ \  __/ |   \ V /| | (_|  __/\__ \
--   |___/\___|_|    \_/ |_|\___\___||___/
--                                        
--                                        

--[[
    Service to build a rectangular pattern (blueprint) in the x,y plane.

    enterpriseId                --> id of Construction enterprise to build the pattern

    buildData = {
        startpoint              --> lower left coordinate to start building the pattern
        buildFromAbove          --> whether build should be done from above (true) or below (false)
        replacePresentObjects   --> whether objects should be replaced if it is already present in the minecraft world (default = true)
        pattern                 --> pattern to build
    }

    with pattern = {
        deltaX                  --> x size of pattern
        deltaY                  --> y size of pattern
        objectList              --> array of objects to build
        clearRemainingSpace     --> whether spce not in the objectlist should be cleared
    }

    with for each object = { 
        x                       --> x coordinate within the pattern
        y                       --> y coordinate within the pattern
        block                   --> minecraft blocktype to build (e.g. "minecraft:torch")
    }
--]]
function BuildRectangularPattern(enterpriseId, buildData)
    -- ToDo: implement such that role_builder.BuildRectangle is called as a proper Job.
end


--                       _       _        __                  _   _                 
--                      (_)     | |      / _|                | | (_)                
--     ___ ___  _ __ ___ _  ___ | |__   | |_ _   _ _ __   ___| |_ _  ___  _ __  ___ 
--    / __/ _ \| '__/ _ \ |/ _ \| '_ \  |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | (_| (_) | | |  __/ | (_) | |_) | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--    \___\___/|_|  \___| |\___/|_.__/  |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--                     _/ |                                                         
--                    |__/                                                          

function ProcessNextTask(enterpriseId)
end

function ProcessNextMessage(enterpriseId)
end

function TaskComplete(enterpriseId)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

local function NewBuilderJob(enterpriseId)
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        startTime       = coreutils.UniversalTime(),
        needTool        = true,
        needTurtle      = true
    })
end
