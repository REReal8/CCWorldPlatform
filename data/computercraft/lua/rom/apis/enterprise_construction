function NewEnterprise()
    -- create new Id
    local enterpriseId = coreutils.NewId()

    -- add to dht
    coredht.SaveData({
        lastHarvest = 0,
--        inbox       = {},
--        taskList    = {},
        diepte      = 4,
        breedte     = 4,
--        startpunt   = {},
    }, "enterprises", enterpriseId)

    -- nu hebben we maar 1 taak, dus ff ID en taak zelf maken
--    NewHarvestingTask(enterpriseId)

    -- init enterprise
    Init(enterpriseId)
end

function Init(enterpriseId)
    -- create 
    coreutils.WriteToLog("Enterprise Construction "..enterpriseId.." created");

    -- ToDo: get this from message box later
    NewBuilderJob(enterpriseId)
end

function GetNextTask(enterpriseId)
    -- task markeren als in behandeling

    -- return de task
    return {functionName = 'role_builder.BuildForest()', functionData = {}, taskId = "", enterpriseId = enterpriseId}
end

function TaskComplete(task)
    -- task uit de lijst halen, toch afgerond
 --   coredht.SaveData(nil, "enterprises", task.enterpriseId, "taskList", task.taskId)

    -- moeten we nog iets doen nu de task is afgerond?
--    NewForesterJob(task.enterpriseId)
end


function NewBuilderJob(enterpriseId)
    corejob.NewJob('builder', {enterpriseId=enterpriseId}, {}, coreutils.UniversalTime(), true, true)
end

--[[
function NewHarvestingTask(enterpriseId)
    local taskId        = coreutils.NewId()

    -- toevoegen aan de lijst
    coredht.SaveData({
        functionName    = 'role_forester.Rondje()',
        functionData    = {},
        created         = coreutils.UniversalTime(),
        notBefore       = coreutils.UniversalTime() + 12.00,
        enterpriseId    = enterpriseId,
        taskId          = taskId}, "enterprises", enterpriseId, "taskList", taskId)

    -- klaar zo
    return taskId
end
]]
