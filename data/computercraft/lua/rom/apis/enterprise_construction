--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

--                        _
--                       (_)
--    ___  ___ _ ____   ___  ___ ___  ___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|
--   \__ \  __/ |   \ V /| | (_|  __/\__ \
--   |___/\___|_|    \_/ |_|\___\___||___/


-- Service to build a blueprint.
function BuildBluePrint(buildData, callbackFunction)
    -- check input
    --
    -- buildData = {
    --    blueprintStartpoint     --> top lower left coordinate to start building the blueprint 
    --    blueprint               --> blueprint to build   
    -- }
    if type(buildData) ~= "table" then
        coreutils.Error("enterprise_construction.BuildBluePrint: bluePrintData not a table")
        return false
    else
        if type(buildData.blueprintStartpoint) ~= "table" then coreutils.Error("enterprise_construction.BuildBluePrint: blueprintStartpoint not a table") return false end
        if type(buildData.blueprint) ~= "table" then coreutils.Error("enterprise_construction.BuildBluePrint: blueprint not a table") return false end
        if type(buildData.blueprint.layerList) ~= "table" then coreutils.Error("enterprise_construction.BuildBluePrint: blueprint.layerList not a table") return false end
    end
    --
    -- callbackFunction
    if type(callbackFunction) ~= "string" then coreutils.Error("enterprise_construction.BuildBluePrint: callbackFunction not a string") return false end

    -- loop on layers
    for i, buildLayer in ipairs(buildData.blueprint.layerList) do
        -- determine buildData for this layer
        local layerBuildData = {
            startpoint              = coremove.GetRelativeLocation(buildLayer.startpoint,
                                                                   buildData.blueprintStartpoint.x,
                                                                   buildData.blueprintStartpoint.y,
                                                                   buildData.blueprintStartpoint.z),
            buildFromAbove          = buildLayer.buildFromAbove,
            replacePresentObjects   = buildLayer.replacePresentObjects,
            pattern                 = buildLayer.pattern,
        }

        -- schedule build layer
        -- ToDo: do this in sequence by nested callbacks
        BuildRectangularPattern(layerBuildData, callbackFunction, {i})   -- callback function is now called multiple times
    end

    return true
end


-- Service to build a rectangular pattern in the x,y plane.
function BuildRectangularPattern(buildData, callbackFunction, callbackArgumentTable)
    -- check input
    --
    -- buildData = {
    --    startpoint              --> lower left coordinate to start building the pattern
    --    buildFromAbove          --> whether build should be done from above (true) or below (false)
    --    replacePresentObjects   --> whether objects should be replaced if it is already present in the minecraft world (default = true)
    --    pattern                 --> pattern to build
    -- }
    if type(buildData) ~= "table" then
        coreutils.Error("enterprise_construction.BuildRectangularPattern: buildData not a table")
        return false
    else
        if type(buildData.startpoint) ~= "table" then coreutils.Error("enterprise_construction.BuildRectangularPattern: startpoint not a table") return false end
        if type(buildData.buildFromAbove) ~= "boolean" then coreutils.Error("enterprise_construction.BuildRectangularPattern: startpoint not a boolean") return false end
--        if type(buildData.replacePresentObjects) ~= "boolean" then coreutils.Error("enterprise_construction.BuildRectangularPattern: replacePresentObjects not a boolean") return false end
        if type(buildData.pattern) ~= "table" then
            coreutils.Error("enterprise_construction.BuildRectangularPattern: pattern not a table")
            return false
        else
        --[[
        with pattern = {
            deltaX                  --> x size of pattern
            deltaY                  --> y size of pattern
            objectList              --> array of objects to build
            clearRemainingSpace     --> whether spce not in the objectlist should be cleared
        }

        with for each object = {
            x                       --> x coordinate within the pattern
            y                       --> y coordinate within the pattern
            block                   --> minecraft blocktype to build (e.g. "minecraft:torch")
        }
        --]]
        end
    end
    --
    -- callbackFunction
    if type(callbackFunction) ~= "string" then coreutils.Error("enterprise_construction.BuildRectangularPattern: callbackFunction not a string") return false end
    --
    -- callbackArgumentTable
    callbackArgumentTable = callbackArgumentTable or {} --> if no callback arguments supplied {} is sufficient
    if type(callbackArgumentTable) ~= "table" then coreutils.Error("enterprise_construction.BuildRectangularPattern: callbackArgumentTable not a table") return false end

    -- construct assignment metadata
    local metaData = role_builder.BuildRectangularPattern_MetaData(buildData)

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_builder.BuildRectangularPattern_Task", buildData, callbackFunction, callbackArgumentTable)

    return true
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

