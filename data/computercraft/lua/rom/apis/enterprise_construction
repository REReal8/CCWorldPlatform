--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

--                        _
--                       (_)
--    ___  ___ _ ____   ___  ___ ___  ___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|
--   \__ \  __/ |   \ V /| | (_|  __/\__ \
--   |___/\___|_|    \_/ |_|\___\___||___/

--[[
    Service to build a rectangular pattern (blueprint) in the x,y plane.

    buildData = {
        startpoint              --> lower left coordinate to start building the pattern
        buildFromAbove          --> whether build should be done from above (true) or below (false)
        replacePresentObjects   --> whether objects should be replaced if it is already present in the minecraft world (default = true)
        pattern                 --> pattern to build
    }

    with pattern = {
        deltaX                  --> x size of pattern
        deltaY                  --> y size of pattern
        objectList              --> array of objects to build
        clearRemainingSpace     --> whether spce not in the objectlist should be cleared
    }

    with for each object = {
        x                       --> x coordinate within the pattern
        y                       --> y coordinate within the pattern
        block                   --> minecraft blocktype to build (e.g. "minecraft:torch")
    }
--]]
function BuildRectangularPattern(buildData, callbackFunction)
    -- check input
    if type(buildData) ~= "table" then coreutils.Error("enterprise_construction.BuildRectangularPattern: buildData not a table") return end
--    coreutils.WriteToLog("BuildRectangularPattern("..textutils.serialise(buildData)..", "..callbackFunction..")")
    if type(callbackFunction) ~= "string" then coreutils.Error("enterprise_construction.BuildRectangularPattern: callbackFunction not a string") return end

    -- construct assignment metadata
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(buildData.startpoint), -- ToDo: why is a copy needed??? -- ToDo: obtain from role task
        needTool = true,
        needTurtle = true,
        fuelNeeded = 500 -- ToDo: obtain from role task
    }

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_builder.BuildRectangle", buildData, callbackFunction)

    return true
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

