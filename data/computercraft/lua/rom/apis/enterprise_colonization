--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|


function CreateNewWorld_ASrv(serviceData, callback, callbackData)
    --[[
        This public async function creates a new CCWorldPlatform world.
            It bootstraps the world logic by building an initiating several enterprise (sites). 

            The turtle should already have (either equiped or in it's inventory)
                one modem
                one axe
                one crafting station
                one birchSapling
            It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

            The function also defines the coordinate system by assuming the turtle starts at the location {x= 3, y= 2, z= 1, dx=0, dy=1}. This
            allows for the initial forest that is build to fit in the 6x6 grid that is used in patterns with the lower left coordinate of the base 
            of that forest being location {x= 0, y= 0, z= 1, dx=0, dy=1}

        Return value:
            nil

        Parameters:
            serviceData         - (table) data about the service
                <currently none>
            callback            - (string) function name to call once the new world is created
            callbackData        - (table) data to supply to callback
    --]]
    -- check input
    if type(callback) ~= "string" then corelog.Error("enterprise_colonization.CreateNewWorld_ASrv: callback not a string") return false end

    -- construct arguments
    local startLocation = {x= 3, y= 2, z= 1, dx=0, dy=1}
    local primaryTaskData =  {
        startLocation               = coremove.CopyLocation(startLocation),
    }
    local factoryLocation           = {x=12, y= 0, z= 1, dx=0, dy=1}
    local remainingSettleTaskData = {
        startLocation               = coremove.CopyLocation(startLocation),
        factoryLocation             = coremove.CopyLocation(factoryLocation),
    }
    local settleData = {
        materialsHostLocator        = enterprise_turtle.GetHostLocator_SSrv({ }).hostLocator,

        primaryTaskData             = primaryTaskData,
        startLocation               = coremove.CopyLocation(startLocation),

        plantFirstSaplingMetaData   = role_settler.PlantFirstSapling_MetaData(primaryTaskData),
        plantFirstSapling_Task      = "role_settler.PlantFirstSapling_Task",

        factoryVersion0             = "v0",
        upgradeFalse                = false,

        waitFirstTreeMetaData       = role_settler.WaitFirstTree_MetaData(primaryTaskData),
        waitFirstTree_Task          = "role_settler.WaitFirstTree_Task",

        orderPlanks                 = { ["minecraft:birch_planks"] = 4 },

        chopFirstTreeMetaData       = role_settler.ChopFirstTree_MetaData(primaryTaskData),
        chopFirstTree_Task          = "role_settler.ChopFirstTree_Task",

        refuelMetaData              = role_settler.Refuel_MetaData(primaryTaskData),
        refuel_Task                 = "role_settler.Refuel_Task",

        collectCobbleStoneMetaData  = role_settler.CollectCobbleStone_MetaData(primaryTaskData),
        collectCobbleStone_Task     = "role_settler.CollectCobbleStone_Task",

        orderFurnace                = { ["minecraft:furnace"] = 1 },

        cleanupTask                 = "Cleanup",

        factoryLocation             = coremove.CopyLocation(factoryLocation),
        factoryVersion1             = "v1",

        remainingSettleTaskData     = remainingSettleTaskData,
        remainingSettleMetaData     = role_settler.RemainingSettle_MetaData(remainingSettleTaskData),
        remainingSettle_Task        = "role_settler.RemainingSettle_Task",

        factoryVersion2             = "v2",
        upgradeToV2                 = true,

        siloLocation                = {x=12, y=12, z= 1, dx=0, dy=1},
        type                        = "silo",
        siloType                    = "basic",
        topChests                   = 2,
        layers                      = 2,
    }

    -- create project definition
    local createNewWorldProjectDef = {
        steps   = {
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "plantFirstSapling_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "plantFirstSaplingMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , valueSource = 0, keyDefSource = "startLocation" },
                { keyDef = "siteVersion"                , valueSource = 0, keyDefSource = "factoryVersion0" },
                { keyDef = "upgrade"                    , valueSource = 0, keyDefSource = "upgradeFalse" },
                { keyDef = "materialsHostLocator"       , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "waitFirstTree_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "waitFirstTreeMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_turtle.GetHostLocator_SSrv", async = false, stepDataDef = {
            }},
            { stepName = "enterprise_shop.OrderItems_ASrv", async = true, stepDataDef = {
                { keyDef = "orderItems"                 , valueSource = 0, keyDefSource = "orderPlanks" },
                { keyDef = "destinationHostLocator"     , valueSource = 4, keyDefSource = "hostLocator" },
            }},
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "chopFirstTree_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "chopFirstTreeMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_shop.OrderItems_ASrv", async = true, stepDataDef = {
                { keyDef = "orderItems"                 , valueSource = 6, keyDefSource = "orderForFuel" },
                { keyDef = "destinationHostLocator"     , valueSource = 4, keyDefSource = "hostLocator" },
            }},
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "refuel_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "refuelMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "collectCobbleStone_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "collectCobbleStoneMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "primaryTaskData" },
            }},
            { stepName = "enterprise_shop.OrderItems_ASrv", async = true, stepDataDef = {
                { keyDef = "orderItems"                 , valueSource = 0, keyDefSource = "orderFurnace" },
                { keyDef = "destinationHostLocator"     , valueSource = 4, keyDefSource = "hostLocator" },
            }},
            { stepName = "enterprise_factory.StopAndDismantleSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , valueSource = 0, keyDefSource = "startLocation" },
                { keyDef = "siteVersion"                , valueSource = 0, keyDefSource = "factoryVersion0" },
                { keyDef = "materialsHostLocator"       , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "baseLocation"               , valueSource = 0, keyDefSource = "factoryLocation" },
                { keyDef = "siteVersion"                , valueSource = 0, keyDefSource = "factoryVersion1" },
                { keyDef = "upgrade"                    , valueSource = 0, keyDefSource = "upgradeFalse" },
                { keyDef = "materialsHostLocator"       , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_turtle.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "taskFunctionName"           , valueSource = 0, keyDefSource = "remainingSettle_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "remainingSettleMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "remainingSettleTaskData" },
            }},
            { stepName = "enterprise_factory.BuildNewSite_ASrv", async = true, stepDataDef = { -- ToDo handle stopping & restarting in case of upgrade
                { keyDef = "baseLocation"               , valueSource = 0, keyDefSource = "factoryLocation" },
                { keyDef = "siteVersion"                , valueSource = 0, keyDefSource = "factoryVersion2" },
                { keyDef = "upgrade"                    , valueSource = 0, keyDefSource = "upgradeToV2" },
                { keyDef = "materialsHostLocator"       , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_storage.BuildAndStartNewSite_ASrv", async = true, stepDataDef = {
                { keyDef = "location"                   , valueSource = 0, keyDefSource = "siloLocation" },
                { keyDef = "type"                       , valueSource = 0, keyDefSource = "type" },
                { keyDef = "siloType"                   , valueSource = 0, keyDefSource = "siloType" },
                { keyDef = "topChests"                  , valueSource = 0, keyDefSource = "topChests" },
                { keyDef = "layers"                     , valueSource = 0, keyDefSource = "layers" },
                { keyDef = "materialsHostLocator"       , valueSource = 0, keyDefSource = "materialsHostLocator" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , valueSource = 2, keyDefSource = "success" },
                { keyDef = "success3"                   , valueSource = 3, keyDefSource = "success" },
                { keyDef = "success4"                   , valueSource = 4, keyDefSource = "success" },
                { keyDef = "success5"                   , valueSource = 5, keyDefSource = "success" },
                { keyDef = "success6"                   , valueSource = 6, keyDefSource = "success" },
                { keyDef = "success7"                   , valueSource = 7, keyDefSource = "success" },
                { keyDef = "success8"                   , valueSource = 8, keyDefSource = "success" },
                { keyDef = "success9"                   , valueSource = 9, keyDefSource = "success" },
                { keyDef = "success10"                  , valueSource = 10, keyDefSource = "success" },
                { keyDef = "success11"                  , valueSource = 11, keyDefSource = "success" },
                { keyDef = "success12"                  , valueSource = 12, keyDefSource = "success" },
                { keyDef = "success13"                  , valueSource = 13, keyDefSource = "success" },
                { keyDef = "success14"                  , valueSource = 14, keyDefSource = "success" },
                { keyDef = "success15"                  , valueSource = 15, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , valueSource = 16, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = createNewWorldProjectDef,
        projectData = settleData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
