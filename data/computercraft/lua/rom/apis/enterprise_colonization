--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|


function CreateNewWorld(callback, callbackData)
--[[
    This public async function creates a new CCWorldPlatform world.
        It bootstraps the world logic by building an initiating several enterprise (sites). 

        The turtle should already have (either equiped or in it's inventory)
            one modem
            one axe
            one crafting station
            one birchSapling
        It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

        The function also defines the coordinate system by assuming the turtle starts at the location {x= 3, y= 2, z= 1, dx=0, dy=1}. This
        allows for the initial forest that is build to fit in the 6x6 grid that is used in patterns with the lower left coordinate of the base 
        of that forest being location {x= 0, y= 0, z= 1, dx=0, dy=1}

    Return value:
        nil

    Parameters:
        callback     - (string) function name to call once the new world is created
        callbackData - (table) data to supply to callback
--]]
    -- check input
    if type(callback) ~= "string" then corelog.Error("enterprise_colonization.CreateNewWorld: callback not a string") return false end

    -- construct arguments
    local settleData = {
        startLocation   = {x= 3, y= 2, z= 1, dx=0, dy=1},

        siloLocation    = {x=12, y=12, z= 1, dx=0, dy=1},
        type            = "silo",
        siloType        = "basic",
        topChests       = 2,
        layers          = 2,

        factoryLocation = {x=12, y= 0, z= 1, dx=0, dy=1},
        factoryType     = "basic"
    }

    -- create project definition
    local createNewWorldProject = {
        services    = {
            { serviceName = "enterprise_colonization.PrimarySettleStep", async = true, input = {
                { keyName = "startLocation"  , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_colonization.CollectCobbleStoneStep", async = true, input = {
                { keyName = "startLocation"  , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_colonization.CreateFurnaceAndCleanupStep", async = true, input = {
                { keyName = "startLocation"  , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_factory.BuildNewSite", async = true, input = {
                { keyName = "location"  , valueSource = 0, sourceKey = "factoryLocation" },
                { keyName = "type"      , valueSource = 0, sourceKey = "factoryType" },
            }},
            { serviceName = "enterprise_colonization.IntermediateSettleStep", async = true, input = {
                { keyName = "startLocation"  , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_storage.BuildAndStartNewSite", async = true, input = {
                { keyName = "location"  , valueSource = 0, sourceKey = "siloLocation" },
                { keyName = "type"      , valueSource = 0, sourceKey = "type" },
                { keyName = "siloType"  , valueSource = 0, sourceKey = "siloType" },
                { keyName = "topChests" , valueSource = 0, sourceKey = "topChests" },
                { keyName = "layers"    , valueSource = 0, sourceKey = "layers" },
            }},
        },
        returnData  = {
        }
    }

    -- start project
    enterprise_projects.StartProject(createNewWorldProject, settleData, callback, callbackData)
end

function PrimarySettleStep(settleData, callback, callbackData)
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(settleData.startLocation),
        needTool = true,
        needTurtle = true,
        fuelNeeded = 0,                         --> per definition the settler starts without fuel
        itemsNeeded = {
            {itemName = "minecraft:crafting_table", itemCount = 1},
            {itemName = "minecraft:birch_sapling", itemCount = 1}
        }
    }

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_settler.PrimarySettle_Task", settleData, callback, callbackData)
end

function CollectCobbleStoneStep(settleData, callback, callbackData)
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(settleData.startLocation),
        needTool = true,
        needTurtle = true,
        fuelNeeded = 100, -- ToDo: how much is needed for this step?
        itemsNeeded = {
        }
    }

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_settler.CollectCobbleStone_Task", settleData, callback, callbackData)
end

function CreateFurnaceAndCleanupStep(settleData, callback, callbackData)
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(settleData.startLocation),
        needTool = true,
        needTurtle = true,
        fuelNeeded = 25, -- ToDo: how much is needed for this step?
        itemsNeeded = {
            {itemName = "minecraft:crafting_table", itemCount = 1},
            {itemName = "minecraft:cobblestone", itemCount = 8},
            {itemName = "minecraft:dirt", itemCount = 1}
        }
    }

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_settler.CreateFurnaceAndCleanup_Task", settleData, callback, callbackData)
end

function IntermediateSettleStep(settleData, callback, callbackData)
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = coremove.CopyLocation(settleData.startLocation),
        needTool = true,
        needTurtle = true,
        fuelNeeded = 100, -- ToDo: how much is needed for this step?
        itemsNeeded = {
            {itemName = "minecraft:crafting_table", itemCount = 1},
            {itemName = "minecraft:birch_sapling", itemCount = 1},
            {itemName = "minecraft:birch_log", itemCount = 2},
        }
    }

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_settler.RemainingSettle_Task", settleData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

