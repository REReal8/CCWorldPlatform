--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|


function CreateNewWorld_ASrv(serviceData, callback, callbackData)
    --[[
        This public async function creates a new CCWorldPlatform world.
            It bootstraps the world logic by building an initiating several enterprise (sites). 

            The turtle should already have (either equiped or in it's inventory)
                one modem
                one axe
                one crafting station
                one birchSapling
            It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

            The function also defines the coordinate system by assuming the turtle starts at the location {x= 3, y= 2, z= 1, dx=0, dy=1}. This
            allows for the initial forest that is build to fit in the 6x6 grid that is used in patterns with the lower left coordinate of the base 
            of that forest being location {x= 0, y= 0, z= 1, dx=0, dy=1}

        Return value:
            nil

        Parameters:
            serviceData         - (table) data about the service
                <currently none>
            callback            - (string) function name to call once the new world is created
            callbackData        - (table) data to supply to callback
    --]]
    -- check input
    if type(callback) ~= "string" then corelog.Error("enterprise_colonization.CreateNewWorld_ASrv: callback not a string") return false end

    -- construct arguments
    local startLocation = {x= 3, y= 2, z= 1, dx=0, dy=1}
    local primaryTaskData =  {
        startLocation               = coremove.CopyLocation(startLocation),
    }
    local factoryLocation           = {x=12, y= 0, z= 1, dx=0, dy=1}
    local remainingSettleTaskData = {
        startLocation               = coremove.CopyLocation(startLocation),
        factoryLocation             = coremove.CopyLocation(factoryLocation),
    }
    local settleData = {
        primaryTaskData             = primaryTaskData,
        startLocation               = coremove.CopyLocation(startLocation),

        plantFirstSaplingMetaData   = role_settler.PlantFirstSapling_MetaData(primaryTaskData),
        plantFirstSapling_Task      = "role_settler.PlantFirstSapling_Task",

        factoryVersion0             = "v0",

        waitFirstTreeMetaData       = role_settler.WaitFirstTree_MetaData(primaryTaskData),
        waitFirstTree_Task          = "role_settler.WaitFirstTree_Task",

        planksName                  = "minecraft:birch_planks",
        planksAmount1               = 4,

        chopFirstTreeMetaData       = role_settler.ChopFirstTree_MetaData(primaryTaskData),
        chopFirstTree_Task          = "role_settler.ChopFirstTree_Task",

        refuelMetaData              = role_settler.Refuel_MetaData(primaryTaskData),
        refuel_Task                 = "role_settler.Refuel_Task",

        collectCobbleStoneMetaData  = role_settler.CollectCobbleStone_MetaData(primaryTaskData),
        collectCobbleStone_Task     = "role_settler.CollectCobbleStone_Task",

        furnaceName                 = "minecraft:furnace",
        furnaceAmount               = 1,

        cleanupTask                 = "Cleanup",

        factoryLocation             = coremove.CopyLocation(factoryLocation),
        factoryVersion1             = "v1",

        remainingSettleTaskData     = remainingSettleTaskData,
        remainingSettleMetaData     = role_settler.RemainingSettle_MetaData(remainingSettleTaskData),
        remainingSettle_Task        = "role_settler.RemainingSettle_Task",

        factoryVersion2             = "v2",
        upgradeToSimple             = true,

        siloLocation                = {x=12, y=12, z= 1, dx=0, dy=1},
        type                        = "silo",
        siloType                    = "basic",
        topChests                   = 2,
        layers                      = 2,
    }

    -- create project definition
    local createNewWorldProject = {
        services    = {
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "plantFirstSapling_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "plantFirstSaplingMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "primaryTaskData" },
            }},
            { serviceName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, input = {
                { keyName = "baseLocation"              , valueSource = 0, sourceKey = "startLocation" },
                { keyName = "siteVersion"               , valueSource = 0, sourceKey = "factoryVersion0" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "waitFirstTree_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "waitFirstTreeMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "primaryTaskData" },
            }},
            { serviceName = "enterprise_turtle.GetISHURL_SSrv", async = false, input = {
            }},
            { serviceName = "enterprise_factory.ProduceItem_ASrv", async = true, input = {
                { keyName = "itemName"                  , valueSource = 0, sourceKey = "planksName" },
                { keyName = "itemAmount"                , valueSource = 0, sourceKey = "planksAmount1" },
                { keyName = "ingredientsHostLocator"    , valueSource = 4, sourceKey = "url" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "chopFirstTree_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "chopFirstTreeMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "primaryTaskData" },
            }},
            { serviceName = "enterprise_factory.ProduceItem_ASrv", async = true, input = {
                { keyName = "itemName"                  , valueSource = 0, sourceKey = "planksName" },
                { keyName = "itemAmount"                , valueSource = 6, sourceKey = "planksToProduceForFuel" },
                { keyName = "ingredientsHostLocator"    , valueSource = 4, sourceKey = "url" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "refuel_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "refuelMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "primaryTaskData" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "collectCobbleStone_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "collectCobbleStoneMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "primaryTaskData" },
            }},
            { serviceName = "enterprise_factory.ProduceItem_ASrv", async = true, input = {
                { keyName = "itemName"                  , valueSource = 0, sourceKey = "furnaceName" },
                { keyName = "itemAmount"                , valueSource = 0, sourceKey = "furnaceAmount" },
                { keyName = "ingredientsHostLocator"    , valueSource = 4, sourceKey = "url" },
            }},
            { serviceName = "enterprise_factory.StopAndDismantleSite_ASrv", async = true, input = {
                { keyName = "baseLocation"              , valueSource = 0, sourceKey = "startLocation" },
                { keyName = "siteVersion"               , valueSource = 0, sourceKey = "factoryVersion0" },
            }},
            { serviceName = "enterprise_factory.BuildAndStartNewSite_ASrv", async = true, input = {
                { keyName = "baseLocation"              , valueSource = 0, sourceKey = "factoryLocation" },
                { keyName = "siteVersion"               , valueSource = 0, sourceKey = "factoryVersion1" },
            }},
            { serviceName = "enterprise_turtle.DoAssignment_ASrv", async = true, input = {
                { keyName = "taskFunctionName"          , valueSource = 0, sourceKey = "remainingSettle_Task" },
                { keyName = "metaData"                  , valueSource = 0, sourceKey = "remainingSettleMetaData" },
                { keyName = "taskData"                  , valueSource = 0, sourceKey = "remainingSettleTaskData" },
            }},
            { serviceName = "enterprise_factory.BuildNewSite_ASrv", async = true, input = { -- ToDo handle stopping & restarting in case of upgrade
                { keyName = "baseLocation"              , valueSource = 0, sourceKey = "factoryLocation" },
                { keyName = "siteVersion"               , valueSource = 0, sourceKey = "factoryVersion2" },
                { keyName = "upgrade"                   , valueSource = 0, sourceKey = "upgradeToSimple" },
            }},
            { serviceName = "enterprise_storage.BuildAndStartNewSite_ASrv", async = true, input = {
                { keyName = "location"                  , valueSource = 0, sourceKey = "siloLocation" },
                { keyName = "type"                      , valueSource = 0, sourceKey = "type" },
                { keyName = "siloType"                  , valueSource = 0, sourceKey = "siloType" },
                { keyName = "topChests"                 , valueSource = 0, sourceKey = "topChests" },
                { keyName = "layers"                    , valueSource = 0, sourceKey = "layers" },
            }},
            { serviceName = "enterprise_projects.AreAllTrue_QSrv", async = false, input = {
                { keyName = "success1"                  , valueSource = 1, sourceKey = "success" },
                { keyName = "success2"                  , valueSource = 2, sourceKey = "success" },
                { keyName = "success3"                  , valueSource = 3, sourceKey = "success" },
                { keyName = "success4"                  , valueSource = 4, sourceKey = "success" },
                { keyName = "success5"                  , valueSource = 5, sourceKey = "success" },
                { keyName = "success6"                  , valueSource = 6, sourceKey = "success" },
                { keyName = "success7"                  , valueSource = 7, sourceKey = "success" },
                { keyName = "success8"                  , valueSource = 8, sourceKey = "success" },
                { keyName = "success9"                  , valueSource = 9, sourceKey = "success" },
                { keyName = "success10"                 , valueSource = 10, sourceKey = "success" },
                { keyName = "success11"                 , valueSource = 11, sourceKey = "success" },
                { keyName = "success12"                 , valueSource = 12, sourceKey = "success" },
                { keyName = "success13"                 , valueSource = 13, sourceKey = "success" },
                { keyName = "success14"                 , valueSource = 14, sourceKey = "success" },
                { keyName = "success14"                 , valueSource = 15, sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success"                       , valueSource = 16, sourceKey = "success" },
        }
    }
    local projectData = {
        projectDefinition = createNewWorldProject,
        projectInputData = settleData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
