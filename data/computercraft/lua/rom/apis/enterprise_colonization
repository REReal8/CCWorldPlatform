--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|


function CreateNewWorld(callback, callbackData)
    --[[
        This public async function creates a new CCWorldPlatform world.
            It bootstraps the world logic by building an initiating several enterprise (sites). 

            The turtle should already have (either equiped or in it's inventory)
                one modem
                one axe
                one crafting station
                one birchSapling
            It is not necessary for the turtle to have any energy. The turtle will start by placing the sapling in front of itself.

            The function also defines the coordinate system by assuming the turtle starts at the location {x= 3, y= 2, z= 1, dx=0, dy=1}. This
            allows for the initial forest that is build to fit in the 6x6 grid that is used in patterns with the lower left coordinate of the base 
            of that forest being location {x= 0, y= 0, z= 1, dx=0, dy=1}

        Return value:
            nil

        Parameters:
            callback     - (string) function name to call once the new world is created
            callbackData - (table) data to supply to callback
    --]]
    -- check input
    if type(callback) ~= "string" then corelog.Error("enterprise_colonization.CreateNewWorld: callback not a string") return false end

    -- construct arguments
    local settleData = {
        startLocation       = {x= 3, y= 2, z= 1, dx=0, dy=1},
        plantFirstSaplingStep       = "PlantFirstSapling",

        factoryVersion0             = "v0",

        waitFirstTreeStep           = "WaitFirstTree",

        planksName                  = "minecraft:birch_planks",
        planksAmount1               = 4,

        chopFirstTreeStep           = "ChopFirstTree",

        refuelStep                  = "Refuel",

        collectCobbleStoneStep      = "CollectCobbleStone",

        furnaceName                 = "minecraft:furnace",
        furnaceAmount               = 1,

        cleanupStep                 = "Cleanup",

        factoryLocation             = {x=12, y= 0, z= 1, dx=0, dy=1},
        factoryVersion1             = "v1",

        remainingSettleStep         = "RemainingSettle",

        factoryVersion2             = "v2",
        upgradeToSimple             = true,

        siloLocation                = {x=12, y=12, z= 1, dx=0, dy=1},
        type                        = "silo",
        siloType                    = "basic",
        topChests                   = 2,
        layers                      = 2,
    }

    -- create project definition
    local createNewWorldProject = {
        services    = {
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "plantFirstSaplingStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_factory.BuildAndStartNewSite", async = true, input = {
                { keyName = "baseLocation"      , valueSource = 0, sourceKey = "startLocation" },
                { keyName = "siteVersion"       , valueSource = 0, sourceKey = "factoryVersion0" },
            }},
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "waitFirstTreeStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_factory.ProduceItem", async = true, input = {
                { keyName = "itemName"          , valueSource = 0, sourceKey = "planksName" },
                { keyName = "itemAmount"        , valueSource = 0, sourceKey = "planksAmount1" },
            }},
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "chopFirstTreeStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_factory.ProduceItem", async = true, input = {
                { keyName = "itemName"          , valueSource = 0, sourceKey = "planksName" },
                { keyName = "itemAmount"        , valueSource = 5, sourceKey = "planksToProduceForFuel" },
            }},
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "refuelStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "collectCobbleStoneStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
            }},
            { serviceName = "enterprise_factory.ProduceItem", async = true, input = {
                { keyName = "itemName"          , valueSource = 0, sourceKey = "furnaceName" },
                { keyName = "itemAmount"        , valueSource = 0, sourceKey = "furnaceAmount" },
            }},
            { serviceName = "enterprise_factory.StopAndDismantleSite", async = true, input = {
                { keyName = "baseLocation"      , valueSource = 0, sourceKey = "startLocation" },
                { keyName = "siteVersion"       , valueSource = 0, sourceKey = "factoryVersion0" },
            }},
            { serviceName = "enterprise_factory.BuildAndStartNewSite", async = true, input = {
                { keyName = "baseLocation"      , valueSource = 0, sourceKey = "factoryLocation" },
                { keyName = "siteVersion"       , valueSource = 0, sourceKey = "factoryVersion1" },
            }},
            { serviceName = "enterprise_colonization.SettlerStep", async = true, input = {
                { keyName = "_stepName"         , valueSource = 0, sourceKey = "remainingSettleStep" },
                { keyName = "startLocation"     , valueSource = 0, sourceKey = "startLocation" },
                { keyName = "factoryLocation"   , valueSource = 0, sourceKey = "factoryLocation" },
            }},
            { serviceName = "enterprise_factory.BuildNewSite", async = true, input = {
                { keyName = "baseLocation"      , valueSource = 0, sourceKey = "factoryLocation" },
                { keyName = "siteVersion"       , valueSource = 0, sourceKey = "factoryVersion2" },
                { keyName = "upgrade"           , valueSource = 0, sourceKey = "upgradeToSimple" },
            }},
            { serviceName = "enterprise_storage.BuildAndStartNewSite", async = true, input = {
                { keyName = "location"          , valueSource = 0, sourceKey = "siloLocation" },
                { keyName = "type"              , valueSource = 0, sourceKey = "type" },
                { keyName = "siloType"          , valueSource = 0, sourceKey = "siloType" },
                { keyName = "topChests"         , valueSource = 0, sourceKey = "topChests" },
                { keyName = "layers"            , valueSource = 0, sourceKey = "layers" },
            }},
        },
        returnData  = {
        }
    }

    -- start project
    enterprise_projects.StartProject(createNewWorldProject, settleData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function SettlerStep(settleData, callback, callbackData)
    --[[
        This function wraps around a role_settler task. It first retrieves the meta data,
        then it calls the task function.

        Async service return value (to callback):
            task result                 - (table) results of the task function

        Parameters:
            settleData                  - (table) data for the task
                _stepName               - (string) name of Task.
                <other settleData needed for the task function>
    ]]
    -- check input
    if type(settleData) ~= "table" then corelog.Error("enterprise_colonization.SettlerStep: settleData not valid") return {success = false} end
    if type(settleData._stepName) ~= "string" then corelog.Error("enterprise_colonization.SettlerStep: _stepName not valid") return {success = false} end

    -- get metaData
    local stepName = settleData._stepName
    local metaDataFunctionName = "role_settler."..stepName.."_MetaData"
    local metaData = coreutils.DoSyncService(metaDataFunctionName, settleData)
    -- ToDo: consider removing _stepName from settleData

    -- add assignment
    coreassignment.AddAssignment(metaData, "role_settler."..stepName.."_Task", settleData, callback, callbackData)
end

