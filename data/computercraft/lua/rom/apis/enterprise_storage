local db = {
    enterpriseName  = "enterprise_storage",
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function StoreItems(itemList)
--[[
    This public function is for storing items.

    Return value:
        location where to drop the items

    Parameters:
        itemList - (table) list of items (name and count) to be stored
]]--
end

function ItemsDelivered(itemList, location)
--[[
    This public function notifies the storage enterprise that items have been delivered

    Return value:
        nil

    Parameters:
        itemList - (table) list of items (name and count) to be stored
        location - (table) location of the items
]]--
end

function RetrieveItems(itemList, callback)
--[[
    This public function is retrieving items from the storage.

    Return value:
        location where to drop the items

    Parameters:
        itemList - (table) list of items (name and count) to be stored
        callback - (string) function name to call once the items are ready for pickup
]]--
end



--                        _
--                       (_)
--    ___  ___ _ ____   ___  ___ ___  ___
--   / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|
--   \__ \  __/ |   \ V /| | (_|  __/\__ \
--   |___/\___|_|    \_/ |_|\___\___||___/













--          _     _
--         | |   | |
--     ___ | | __| |
--    / _ \| |/ _` |
--   | (_) | | (_| |
--    \___/|_|\__,_|

function NewSilo(data)
    -- data.location = {x=.., y=.., z=.., dx=.., dy=..}
    -- data.type = "simple" | "column"
    local enterpriseId   = coreutils.NewId()

    -- data verrijken
    data.enterpriseId   = enterpriseId
    data.enterpriseName = db.enterpriseName
    data.topchests      = {}
    data.storagechests  = {}

    -- onze gegevens opslaan
    coredht.SaveData(data, "enterprises", enterpriseId)

    -- vacature uitzetten voor een turtle die dit voor ons gaat bouwen
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        location        = coremove.CopyLocation(data.location), -- kopie van locatie van de silo, waar het werk (waarschijnlijk) plaats zal vinden
        startTime       = coreutils.UniversalTime(),
        needTool        = true,
        needTurtle      = true
    })
end

function ProcessNextTask(enterpriseId)
    local taskData = enterprise.GetNextTask(enterpriseId)

    -- did we get a task?
    if type(taskData) ~= "table" then return end

    -- execute this command using the task queue
    if taskData.subject == "organize top chests" then return coretask.AddWork(role_silo_worker.OrganizeTopChests, taskData) end
end

function ProcessNextMessage(enterpriseId)
    -- berichten die we accepteren
    --
    -- {subject="claim chest" }         --> return chest loaction and claims chest (or returns nil when no chest is available)
    -- {subject="free chest" }          --> marks the chest as free for new use (after items have been picked up)
    -- {subject="items available", }    --> request an item list from this silo
    -- {subject="items deliverd",   itemList={{itemName="minecraft:charcoal", itemCount=64}, }, source="inventory"|{location tabel} }       --> items have been delivered, ready to store
    -- {subject="items requested",  itemList={{itemName="minecraft:charcoal", itemCount=64}, }, destination="inventory"|{location tabel} }  --> request items from the storage

    -- retreive next message
    local message       = enterprise.GetNextMessage(enterpriseId)
    if type(message) ~= "table" or type(message.subject) ~= "string" then return false end

    -- what to do?
    if message.subject == "claim chest"     then ProcessClaimChestMessage(message)      end
    if message.subject == "free chest"      then ProcessFreeChestMessage(message)       end
    if message.subject == "items available" then ProcessItemsAvailableMessage(message)  end     -- returns a list of all items available in this storage
    if message.subject == "items deliverd"  then ProcessItemsDeliveredMessage(message)  end     -- notification that items have been delivered
    if message.subject == "items requested" then ProcessItemsRequestedMessage(message)  end

    -- we did something, impressive
    return true
end

function TaskComplete(enterpriseId)
    -- get enterprise data
--    local data          = coredht.GetData("enterprises", enterpriseId)

    -- moeten we nog iets doen nu de task is afgerond? nieuwe job aanmaken
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        location        = coremove.CopyLocation(coredht.GetData("enterprises", enterpriseId, "location")),
        startTime       = coreutils.UniversalTime(),
        needTool        = false,
        needTurtle      = true
    })
end

function ProcessClaimChestMessage(message)
    -- get enterprise data
    local enterpriseId  = enterprise.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)
    local topchests     = data.topchests
    local responseData  = {}

    -- look for a free chest
    for chestId, chest in pairs(topchests) do

        -- is this one free?
        if chest.status == "free" then

            -- claim chest
            coredht.SaveData("claimed", "enterprises", enterpriseId, "topchests", chestId, "status")

            -- opslaan
            responseData    = {
                chestId         = chestId,
                chestLocation   = chest.location
            }

            -- rest van de loop niet meer nodig
            break
        end
    end

    -- send message back
    enterprise.ReplyToMessage(message, "claim chest response", responseData)
end

function ProcessFreeChestMessage(message)
    -- voor wie zijn we aan het werk?
    local enterpriseId = enterprise.GetMessageRecipient(message)

    -- check parameters
    if type(message) ~= "table" or type(message.data) ~= table then return nil end

    -- controleren of deze chest wel bestaat
    if coredht.GetData("enterprises", enterpriseId, "topchests", message.data.chestId) then

        -- store new status
        coredht.SaveData("free", "enterprises", enterpriseId, "topchests", message.data.chestId, "status")
    end

    -- geen reactie terug
end

function ProcessItemsAvailableMessage(message)
    -- no paramters

    -- voor wie zijn we aan het werk?
    local enterpriseId  = enterprise.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)
    local itemList      = {}

    -- simple silo keeps everything in the top chests
    if data.type == "simple" then

        -- loop all chests for their contents
        for chestId, chest in pairs(data.topchests) do

            -- the chest holds the secrets in the itemList
            for itemName, itemCount in pairs(chest.contents) do

                -- add to the item list
                itemList[ itemName ] = (itemList[ itemName ] or 0) + itemCount
            end
        end
    end

    -- column silo keeps 1 item in a storage chest
    if data.type == "column" then

    end

    -- send message back
    enterprise.ReplyToMessage(message, "items available response", itemList)

end

function ProcessItemsDeliveredMessage(message)
    -- message.itemList
    -- message.source       --> { chestId=...., chestLocation={x=.., y=.., z=.., dx=.., dy=..} }
    if type(message) ~= "table" or type(message.source) ~= "tabel" then return coreutils.Error("ProcessItemsDeliveredMessage: invalid paramters") end

    -- voor wie zijn we aan het werk?
    local enterpriseId  = enterprise.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)

    -- good to know, we assume the itemList is correct
    local chestItemList       = data.topchests[ message.source["chestId"] ].itemList

    -- loop the itemList from the message, add to the storage
    for itemName, itemCount in pairs(message.itemList) do chestItemList[ itemName ] = (chestItemList[ itemName ] or 0) + itemCount end

    -- time to reorganize the top chests

end

function ProcessItemsRequestedMessage(message)
    -- message.itemList
    -- message.destination  --> { chestId=...., chestLocation={x=.., y=.., z=.., dx=.., dy=..} }

    -- voor wie zijn we aan het werk?
    local enterpriseId  = enterprise.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)

end


--    _           _ _     _               _   _                                 _     _                       _       _
--   | |         (_) |   | |             | | | |                        ___    | |   | |                     (_)     | |
--   | |__  _   _ _| | __| |  _ __   __ _| |_| |_ ___ _ __ _ __  ___   ( _ )   | |__ | |_   _  ___ _ __  _ __ _ _ __ | |_ ___
--   | '_ \| | | | | |/ _` | | '_ \ / _` | __| __/ _ \ '__| '_ \/ __|  / _ \/\ | '_ \| | | | |/ _ \ '_ \| '__| | '_ \| __/ __|
--   | |_) | |_| | | | (_| | | |_) | (_| | |_| ||  __/ |  | | | \__ \ | (_>  < | |_) | | |_| |  __/ |_) | |  | | | | | |_\__ \
--   |_.__/ \__,_|_|_|\__,_| | .__/ \__,_|\__|\__\___|_|  |_| |_|___/  \___/\/ |_.__/|_|\__,_|\___| .__/|_|  |_|_| |_|\__|___/
--                           | |                                                                  | |
--                           |_|                                                                  |_|

topLayerL0_pattern = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 0, y = 3,                 block = "minecraft:torch"},
        { x = 2, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
        { x = 3, y = 0,                 block = "minecraft:torch"},
        { x = 4, y = 5, dx = 0, dy = 1, block = "minecraft:chest"},
    },
    clearRemainingSpace = true,
}

shaftLayer_pattern = {
    deltaX      = 1,
    deltaY      = 1,
    objectList  = {
    },
    clearRemainingSpace = true,
}

chestLayer_pattern = {
    deltaX      = 3,
    deltaY      = 3,
    objectList  = {
        { x = 0, y = 0, dx =-1, dy = 0, block = "minecraft:chest"},
        { x = 0, y = 1, dx =-1, dy = 0, block = "minecraft:chest"},

        { x = 0, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},
        { x = 1, y = 2, dx = 0, dy = 1, block = "minecraft:chest"},

        { x = 1, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},
        { x = 2, y = 0, dx = 0, dy =-1, block = "minecraft:chest"},

        { x = 2, y = 1, dx = 1, dy = 0, block = "minecraft:chest"},
        { x = 2, y = 2, dx = 1, dy = 0, block = "minecraft:chest"},
    },
    clearRemainingSpace = true,
}

-- ToDo: later wrap this within enterprise_storage (or role_silo_worker) such that this data can become private
function GetSiloL0_blueprint()
    return {
        layerList = {
            { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove  = true, pattern = enterprise_storage.topLayerL0_pattern},
            { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove  = false, pattern = enterprise_storage.shaftLayer_pattern},
            { startpoint = { x= 2, y= 2, z= -2}, buildFromAbove  = false, pattern = enterprise_storage.chestLayer_pattern},
            { startpoint = { x= 2, y= 2, z= -3}, buildFromAbove  = false, pattern = role_builder.CopyPattern(enterprise_storage.chestLayer_pattern)}
        },
        escapeSequence = {
            { x= 3, y= 3, z=  1},
        }
    }
end

