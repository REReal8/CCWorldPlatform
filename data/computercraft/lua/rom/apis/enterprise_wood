
function BuildAndStartNewSite_ASrv(...)
    -- get & check input from description
    local checkSuccess, baseLocation, forestLevel, nTrees, callback, callbackData = coreutils.CheckInput([[
        This async public service builds a new forest site and ensures it's ready for use.

        Return value:
            nil

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the site was succesfully build and is ready for use.

        Parameters:
            serviceData                 - (table) data about this site
                baseLocation            + (table) world location of the base (lower left corner) of this site
                forestLevel             + (number) level of the site
                nTrees                  + (number) number of initial trees
                materialsHostLocator    - (URL) locating the host of the building materials
            callback                    + (string) name of function to call once service is ready
            callbackData                + (table, {}) data to supply to callback function
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_wood.BuildAndStartNewSite_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- create projectDef and projectData
    local firstTreeLocation         = coremove.GetRelativeLocation(baseLocation, 3, 2, 0)
    local plantFirstSaplingTaskData =  {
        startLocation               = coremove.CopyLocation(firstTreeLocation),
    }
    local harvestFirstTreeTaskData = {
        forestLevel                 = forestLevel, -- should be 0 ...
        firstTreeLocation           = coremove.CopyLocation(firstTreeLocation),
        nTrees                      = nTrees, -- should be 1 .,,
        waitForFirstTree            = false, -- first log should already be chopped
    }
    local projectData = {
        plantFirstSaplingTaskData   = plantFirstSaplingTaskData,
        plantFirstSaplingMetaData   = role_settler.PlantFirstSapling_MetaData(plantFirstSaplingTaskData),
        plantFirstSapling_Task      = "role_settler.PlantFirstSapling_Task",

        forestL0                    = forestLevel,
        forestFirstTree             = nTrees,

        harvestFirstTreeTaskData    = harvestFirstTreeTaskData,
        harvestFirstTreeMetaData    = role_settler.HarvestForest_MetaData(harvestFirstTreeTaskData),
        harvestFirstTree_Task       = "role_settler.HarvestForest_Task",
    }
    local projectDef = {
        steps   = {
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , valueSource = 0, keyDefSource = "plantFirstSapling_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "plantFirstSaplingMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "plantFirstSaplingTaskData" },
            }},
            { stepName = "enterprise_colonization.UpdateForest_SSrv", async = false, stepDataDef = {
                { keyDef = "forestLevel"                , valueSource = 0, keyDefSource = "forestL0" },
                { keyDef = "nTrees"                     , valueSource = 0, keyDefSource = "forestFirstTree" },
            }},
            { stepName = "enterprise_assignmentboard.DoAssignment_ASrv", async = true, stepDataDef = {
                { keyDef = "task"                       , valueSource = 0, keyDefSource = "harvestFirstTree_Task" },
                { keyDef = "metaData"                   , valueSource = 0, keyDefSource = "harvestFirstTreeMetaData" },
                { keyDef = "taskData"                   , valueSource = 0, keyDefSource = "harvestFirstTreeTaskData" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , valueSource = 2, keyDefSource = "success" },
                { keyDef = "success3"                   , valueSource = 3, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , valueSource = 4, keyDefSource = "success" },
        }
    }
    local projectServiceData = {
        projectDef  = projectDef,
        projectData = projectData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

tree_pattern = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 3, y = 3, block = "minecraft:birch_sapling"},
        { x = 3, y = 0, block = "minecraft:torch"},
        { x = 0, y = 3, block = "minecraft:torch"},
    },
    clearRemainingSpace = true,
}
