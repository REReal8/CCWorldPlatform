
--[[
    This file implements mobj_block2d.

    Note that the syntax used is such that it (prepares for) a more object oriented Lua approach. See more from here https://www.lua.org/pil/16.html .
--]]

Block2d = {
    _x      = 0,
    _y      = 0,
    _dx     = nil,
    _dy     = nil,
    _name   = "",
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function Block2d:new(o)
    --[[
        Constructs a mobj_block2d.

        Parameters:
                            - (table) table with
                _x          - (number) x position of block (within exclosing object)
                _y          - (number) x position of block (within exclosing object)
                _dx         - (number) (optional) block orientation in x
                _dy         - (number) (optional) block orientation in y
                _name       - (string) block name (.e.g. "minecraft:oak_log")
    --]]

    o = o or {}   -- create object if user does not provide one
    setmetatable(o, self)
    self.__index = self
    return o
end

function Block2d:getX()
    return self._x
end

function Block2d:setX(x)
    -- check input
    if type(x) ~= "number" then corelog.Error("mobj_block2d:setX: invalid x: "..type(x)) return end

    self._x = x
end

function Block2d:getY()
    return self._y
end

function Block2d:setY(y)
    -- check input
    if type(y) ~= "number" then corelog.Error("mobj_block2d:setY: invalid y: "..type(y)) return end

    self._y = y
end

function Block2d:getDx()
    return self._dx
end

function Block2d:setDx(dx)
    -- check input
    if type(dx) ~= "nil" and type(dx) ~= "number" then corelog.Error("mobj_block2d:setDx: invalid dx: "..type(dx)) return end

    self._x = dx
end

function Block2d:getDy()
    return self._dy
end

function Block2d:setDy(dy)
    -- check input
    if type(dy) ~= "nil" and type(dy) ~= "number" then corelog.Error("mobj_block2d:setDy: invalid dy: "..type(dy)) return end

    self._y = dy
end

function Block2d:getName()
    return self._name
end

function Block2d:setName(name)
    -- check input
    if type(name) ~= "string" then corelog.Error("mobj_block2d:setName: invalid name: "..type(name)) return end

    self._name = name
end

function IsOfType(block)
    -- check
    if type(block) ~= "table" then return false end
    if type(block._x) ~= "number" or type(block._y) ~= "number" or type(block._name) ~= "string" then return false end
    if (type(block._dx) ~= "nil" and type(block._dx) ~= "number") or (type(block._dy) ~= "nil" and type(block._dy) ~= "number") then return false end

    -- end
    return true
end

function Block2d:isSame(block)
    -- check same block
    local isSame = self._x == block._x and self._y == block._y and self._name == block._name
    if self._dx ~= nil and self._dy ~= nil then
        isSame = isSame and self._dx == block._dx and self._dy == block._dy
    end

    -- end
    return isSame
end

function Block2d:copy()
    local copy = Block2d:new({
        _x      = self._x,
        _y      = self._y,
        _dx     = self._dx,
        _dy     = self._dy,

        _name   = self._name,
    })

    return copy
end

function IsBlockList(blockList)
    -- check table
    if type(blockList) ~= "table" then return false end

    -- check elements
    for i, block in ipairs(blockList) do
        if not IsOfType(block) then return false end
    end

    -- end
    return true
end

function IsSameBlockList(blockListA, blockListB)
    -- check input
    if not IsBlockList(blockListA) or not IsBlockList(blockListB) then return false end

    -- check same size
    if table.getn(blockListA) ~= table.getn(blockListB) then return false end

    -- check same elements
    for i, blockA in ipairs(blockListA) do
        local blockB = blockListB[i]

        -- check same block
        local isSame = blockA:isSame(blockB)
        if not isSame then return false end
    end

    -- end
	return true
end

function BlockListCopy(blockList)
    -- check input
    if not IsBlockList(blockList) then corelog.Error("mobj_block2d.BlockListCopy: invalid blockList: "..type(blockList)) return end

    local blockListCopy = {}
    -- copy elements
    for i, block in ipairs(blockList) do
        blockListCopy[i] = block:copy()
    end

    -- end
	return blockListCopy
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
