--[[
    The test enterprise offers test services for debugging/ testing purposes.
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function TestPureLogicService_SSrv(serviceData)
    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_test.TestPureLogicService_SSrv: Invalid serviceData") return {success = false} end
    local testArg = serviceData.testArg
    if type(testArg) == "nil" then corelog.Error("enterprise_test.TestPureLogicService_SSrv: Invalid testArg (nil)") return {success = false} end

    corelog.WriteToLog(">calling enterprise_test.TestPureLogicService_SSrv("..textutils.serialize(serviceData)..")")

    -- determine result to return
    local serviceResult = {
        success = true,
        input = testArg,
    }
    if type(serviceData.serviceResult) == "table" then
        serviceResult.success = serviceData.serviceResult.success
    end

    return serviceResult
end

function TestServiceWithAssignmentAndCallback_ASrv(serviceData, callback)
      -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_test.TestServiceWithAssignmentAndCallback_ASrv: Invalid serviceData") return {success = false} end
    local testArg = serviceData.testArg
    if type(testArg) == "nil" then corelog.Error("enterprise_test.TestServiceWithAssignmentAndCallback_ASrv: Invalid testArg (nil)") return {success = false} end
    local callbackData = {}
    if type(callback) ~= "string" then corelog.Error('enterprise_test.TestServiceWithAssignmentAndCallback_ASrv: Invalid callback function') return coreutils.DoCallback(callback, callbackData, {success = false}) end

    corelog.WriteToLog(">calling enterprise_test.TestServiceWithAssignmentAndCallback_ASrv("..textutils.serialize(serviceData)..", "..callback..")")

    -- create assignment arguments
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = {x= 0, y= 0, z= 1, dx=0, dy=1},
        needTool = false,
        needTurtle = false,
        fuelNeeded = 0
    }
    local taskData = {
        arg1 = testArg
    }

    -- do assignment
    local assignmentServiceData = {
        metaData    = metaData,
        task        = "enterprise_test.Func1_Task",
        taskData    = taskData,
    }
    enterprise_assignmentboard.DoAssignment_ASrv(assignmentServiceData, callback, callbackData)
end

function TestServiceWithAssignmentAndCallbackAndArguments_ASrv(serviceData, callback, callbackData)
    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv: Invalid serviceData") return {success = false} end
    local testArg = serviceData.testArg
    if type(testArg) == "nil" then corelog.Error("enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv: Invalid testArg (nil)") return {success = false} end
    if type(callback) ~= "string" then corelog.Error('enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv: Invalid callback function') return coreutils.DoCallback(callback, callbackData, {success = false}) end
    callbackData = callbackData or {}

    corelog.WriteToLog(">calling enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv("..textutils.serialize(serviceData)..", "..callback..", "..textutils.serialize(callbackData)..")")

    -- create assignment arguments
    local metaData = {
        startTime = coreutils.UniversalTime(),
        location = {x= 0, y= 0, z= 1, dx=0, dy=1},
        needTool = false,
        needTurtle = false,
        fuelNeeded = 0
    }
    local taskData = {
        arg1 = testArg
    }

    -- do assignment
    local assignmentServiceData = {
        metaData    = metaData,
        task        = "enterprise_test.Func1_Task",
        taskData    = taskData,
    }
    enterprise_assignmentboard.DoAssignment_ASrv(assignmentServiceData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function Func1_Task(taskData)
    corelog.WriteToLog("  doing enterprise_test.Func1_Task("..textutils.serialise(taskData)..").")

    return { success = true, input = taskData.arg1 }
end

function ACallBackFunc1(callbackData, testResult)
    corelog.WriteToLog("  doing enterprise_test.ACallBackFunc1("..textutils.serialise(callbackData)..", "..textutils.serialise(testResult)..").")
end

