
function T_All()
    T_DeleteForests()
    T_SaveAndRemoveForest()
end

function T_DeleteForests()
    -- prepare test
    corelog.WriteToLog("# DeleteForests test")

    -- test
    enterprise_forestry.DeleteForests()
    local nForests = enterprise_forestry.GetNumberOfForests_Att()
    local expectedNForests = 0
    assert(nForests == expectedNForests, "gotten nForests(="..nForests..") not the same as expected(="..expectedNForests..")")

    -- cleanup test
end

function T_SaveAndRemoveForest()
    -- prepare test
    local forest = t_mobj_birchforest.CreateForest() if not forest then corelog.Error("failed obtaining forest") return end
    local originalNForests = enterprise_forestry.GetNumberOfForests_Att()

    -- SaveForest test
    corelog.WriteToLog("# SaveForest test")
    local forestLocator = enterprise_forestry.SaveForest(forest)
    local nForests = enterprise_forestry.GetNumberOfForests_Att()
    local expectedNForests = originalNForests + 1
    assert(nForests == expectedNForests, "gotten nForests(="..nForests..") not the same as expected(="..expectedNForests..")")

    -- RemoveForest test
    corelog.WriteToLog("# RemoveForest test")
    enterprise_forestry.RemoveForest(forestLocator)
    nForests = enterprise_forestry.GetNumberOfForests_Att()
    expectedNForests = originalNForests
    assert(nForests == expectedNForests, "gotten nForests(="..nForests..") not the same as expected(="..expectedNForests..")")

    -- cleanup test
end

local level = 0
local level1 = 1
local location = {x= 0, y= 0, z= 1, dx=0, dy=1}
local nTrees1 = 1
local nTrees3 = 3

function T_AddNewSite_ASrv()
    -- prepare test
    corelog.WriteToLog("# AddNewSite_ASrv test")
    local originalNForests = enterprise_forestry.GetNumberOfForests_Att()

    -- test
    enterprise_forestry.AddNewSite_ASrv({
        baseLocation            = coremove.CopyLocation(location),
        forestLevel             = level,
        nTrees                  = nTrees1,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, "t_forestry.AddNewSite_ASrv_Callback", { originalNForests = originalNForests,})
end

function AddNewSite_ASrv_Callback(callbackData, serviceResults)
    -- test (cont))
    assert(serviceResults.success, "failed adding forest")
    local forestLocator = serviceResults.forestLocator
    assert(forestLocator ~= nil, "failed obtaining forestLocator")
    local nForests = enterprise_forestry.GetNumberOfForests_Att()
    local expectedNForests = callbackData.originalNForests + 1
    assert(nForests == expectedNForests, "gotten nForests(="..nForests..") not the same as expected(="..expectedNForests..")")

    -- cleanup test
    enterprise_forestry.RemoveForest(forestLocator)
end

function T_UpgradeSite_ASrv_Trees()
    -- prepare test
    corelog.WriteToLog("# UpgradeSite_ASrv (trees) test")
    enterprise_forestry.AddNewSite_ASrv({
        baseLocation            = coremove.CopyLocation(location),
        forestLevel             = level,
        nTrees                  = nTrees1,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, "t_forestry.UpgradeSite_ASrv_PrepCallback", { levelWanted = level, treesWanted = nTrees3 })
end

function UpgradeSite_ASrv_PrepCallback(...)
    -- get & check input
    local checkSuccess, levelWanted, treesWanted, serviceSuccess, forestLocator = coreutils.CheckInput([[
        Parameters:
            callbackData                - (table) callback data
                levelWanted             + (number)
                treesWanted             + (number)
            serviceResults              - (table) results of the service
                success                 + (boolean)
                forestLocator           + (URL) locating the forest
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("UpgradeSite_ASrv_PrepCallback: Invalid input") return end

    -- prepare test (cont)
    assert(serviceSuccess, "failed preparing test")

    -- test
    enterprise_forestry.UpgradeSite_ASrv({
        forestLocator           = forestLocator:copy(),
        targetLevel             = levelWanted,
        targetNTrees            = treesWanted,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, "t_forestry.UpgradeSite_ASrv_TestCallback", { forestLocator = forestLocator:copy(), levelWanted = levelWanted, treesWanted = treesWanted })
end

function UpgradeSite_ASrv_TestCallback(...)
    -- get & check input
    local checkSuccess, forestLocator, levelWanted, treesWanted, serviceSuccess = coreutils.CheckInput([[
        Parameters:
            callbackData                - (table) callback data
                forestLocator           + (URL) locating the forest
                levelWanted             + (number)
                treesWanted             + (number)
            serviceResults              - (table) results of the services
                success                 + (boolean)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("UpgradeSite_ASrv_TestCallback: Invalid input") return end

    -- test result
    assert(serviceSuccess, "failed upgrading forest")
    local forest = enterprise_forestry.GetForest(forestLocator)
    assert(forest:getLevel() == levelWanted, "gotten level(="..forest:getLevel()..") not the same as expected(="..levelWanted..")")
    assert(forest:getNTrees() == treesWanted, "gotten nTrees(="..forest:getNTrees()..") not the same as expected(="..treesWanted..")")

    -- cleanup test
    enterprise_forestry.RemoveForest(forestLocator)
end

function T_UpgradeSite_ASrv_Level()
    -- prepare test
    corelog.WriteToLog("# UpgradeSite_ASrv (trees) test")
    enterprise_forestry.AddNewSite_ASrv({
        baseLocation            = coremove.CopyLocation(location),
        forestLevel             = level,
        nTrees                  = nTrees1,
        materialsHostLocator    = enterprise_turtle.GetHostLocator_Att(),
    }, "t_forestry.UpgradeSite_ASrv_PrepCallback", { levelWanted = level1, treesWanted = nTrees1 })
end
