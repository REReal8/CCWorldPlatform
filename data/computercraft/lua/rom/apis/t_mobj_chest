function T_All()
    T_Getters()
    T_IsOfType()
    T_isSame()
    T_copy()
--    T_needsTo_ProvideItemsTo_SSrv()
--    T_can_ProvideItems_QSrv()
end

local location1 = {x= 0, y= 0, z= 1, dx=0, dy=1}
local accessDirection1 = "top"
local itemsInventory1 = { } -- ToDo: add elements

local compact = { compact = true }

function T_Getters()
    -- prepare test
    corelog.WriteToLog("* Chest getter tests")
    local id = coreutils.NewId()
    local chest = CreateChest(location1, accessDirection1, itemsInventory1, id) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test
    assert(chest:getId() == id, "gotten id(="..chest:getId()..") not the same as expected(="..id..")")
    assert(chest:getLocation() == location1, "gotten getLocation(="..textutils.serialize(chest:getId())..") not the same as expected(="..textutils.serialize(location1)..")")
    assert(chest:getAccessDirection() == accessDirection1, "gotten getAccessDirection(="..chest:getAccessDirection()..") not the same as expected(="..accessDirection1..")")
    assert(chest:getItemsInventory() == itemsInventory1, "gotten getItemsInventory(="..textutils.serialize(chest:getItemsInventory(), compact)..") not the same as expected(="..textutils.serialize(itemsInventory1, compact)..")")

    -- cleanup test
end

function CreateChest(location, accessDirection, itemsInventory, id)
    -- check input
    location = location or location1
    id = id or coreutils.NewId()
    accessDirection = accessDirection or accessDirection1
    itemsInventory = itemsInventory or itemsInventory1

    -- create Chest object
    local chest = mobj_chest.Chest:new({
        _id                     = id,

        _location               = location,
        _accessDirection        = accessDirection,
        _itemsInventory         = itemsInventory,
    })

    -- end
    return chest
end

function T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* Chest.IsOfType() tests")
    local chest = CreateChest() if not chest then corelog.Error("failed obtaining Chest") return end

    -- test valid
    local isOfType = mobj_chest.Chest.IsOfType(chest)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = mobj_chest.Chest.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid _location
    chest._location = "a string"
    isOfType = mobj_chest.Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._location = location1

    -- test invalid _accessDirection
    chest._accessDirection = 20
    isOfType = mobj_chest.Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._accessDirection = accessDirection1

    -- test invalid _itemsInventory
    chest._itemsInventory = 20
    isOfType = mobj_chest.Chest.IsOfType(chest)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    chest._itemsInventory = itemsInventory1

    -- cleanup test
end

function T_isSame()
    -- prepare test
    corelog.WriteToLog("* Chest:isSame() tests")
    local id = coreutils.NewId()
    local chest = CreateChest(location1, accessDirection1, itemsInventory1, id) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test same
    local chest1 = CreateChest(location1, accessDirection1, itemsInventory1, id)
    local isSame = chest1:isSame(chest)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different _location
    chest._location = {x= 100, y= 0, z= 100, dx=0, dy=1}
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._location = location1

    -- test different _accessDirection
    chest._accessDirection = "bottom"
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._accessDirection = accessDirection1

    -- test different _itemsInventory
    chest._itemsInventory = { "ToDo: add some elements here" } -- ToDo
    isSame = chest1:isSame(chest)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    chest._itemsInventory = itemsInventory1

    -- cleanup test
end

function T_copy()
    -- prepare test
    corelog.WriteToLog("* Chest:copy() tests")
    local chest = CreateChest(location1, accessDirection1, itemsInventory1) if not chest then corelog.Error("failed obtaining Chest") return end

    -- test
    local copy = chest:copy()
    assert(copy:isSame(chest), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(chest, compact)..")")

    -- cleanup test
end

--[[
function T_needsTo_ProvideItemsTo_SSrv()
    -- prepare test
    corelog.WriteToLog("* Chest:needsTo_ProvideItemsTo_SSrv() tests")
    local chest = CreateChest() if not chest then corelog.Error("failed obtaining chest") return end
    local provideItems = {
        ["minecraft:birch_log"]  = 5,
    }
    local storageLocator = enterprise_turtle.GetHostLocator_Att()

    -- test
    local needsTo_Provide = chest:needsTo_ProvideItemsTo_SSrv({
        provideItems    = provideItems,
        storageLocator  = storageLocator,
    })
    local expectedFuelNeed = role_forester.FuelNeededPerRound(nTrees)
    assert(needsTo_Provide.success, "needsTo_ProvideItemsTo_SSrv failed")
    assert(needsTo_Provide.fuelNeed == expectedFuelNeed, "fuelNeed(="..needsTo_Provide.fuelNeed..") not the same as expected(="..expectedFuelNeed..")")
    assert(#needsTo_Provide.ingredientsNeed == 0, "ingredientsNeed(="..#needsTo_Provide.ingredientsNeed..") not the same as expected(=0)")

    -- cleanup test
end

function T_can_ProvideItems_QSrv()
    -- prepare test
    corelog.WriteToLog("* Chest:can_ProvideItems_QSrv() tests")
    local chest = CreateChest() if not chest then corelog.Error("failed obtaining chest") return end

    -- test
    local itemName = "minecraft:birch_log"
    local itemCount = 20
    local serviceResults = chest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(serviceResults.success, "can_ProvideItems_QSrv incorrectly failed for "..itemCount.." "..itemName.."'s")

    itemName = "minecraft:birch_sapling"
    itemCount = 2
    serviceResults = chest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(serviceResults.success, "can_ProvideItems_QSrv incorrectly failed for "..itemCount.." "..itemName.."'s")

    itemName = "minecraft:dirt"
    itemCount = 10
    serviceResults = chest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(not serviceResults.success, "can_ProvideItems_QSrv incorrectly success for "..itemCount.." "..itemName.."'s")

    -- cleanup test
end
]]
