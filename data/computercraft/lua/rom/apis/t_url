local host = "storage"
local port = "1"
local path = {site = 3, inputChest = 7}
local query = {["minecraft:torch"] = 5, ["minecraft:birch_log"] = 3}

local hostURI = "storage"
local portURI = ":1"
local pathURI = "/site=3/inputChest=7"
local queryURI = "?minecraft:birch_log=3&minecraft:torch=5"

function ANewFunc(Bla)
    local bla = Bla

    Func1 = function ()
        return "func result"
    end

    return { 
        bla,
--        func1 = func1,
    }
end

--local MyClass = {} -- the table representing the class, which will double as the metatable for the instances
--MyClass.__index = MyClass -- failed table lookups on the instances should fallback to the class table, to get methods

--[[
function MyClass.new(init)
  local self = setmetatable({}, MyClass)
  self.value = init
  return self
end
]]

MyClass = { value = 0}

function MyClass:new(o)
    o = o or {}   -- create object if user does not provide one
    setmetatable(o, self)
    self.__index = self
    return o
end

function MyClass:set_value(newval)
  self.value = newval
end

function MyClass:get_value()
  return self.value
end

function T_MyClass()
    -- new URL
    corelog.WriteToLog("* Simple MyClass")
--    local myObj = MyClass.new{value = 5}
    local myObj = MyClass:new({value = 5})
    corelog.WriteToLog(" type(myObj) = "..type(myObj))
    corelog.WriteToLog(" myObj = "..textutils.serialize(myObj))
    -- tbl:name(arg) is a shortcut for tbl.name(tbl, arg), except tbl is evaluated only once
--    corelog.WriteToLog(myObj:get_value()) --> 5
    myObj:set_value(6)
    corelog.WriteToLog(myObj:get_value()) --> 6
end

function T_Func_Serializing()
    -- new URL
    corelog.WriteToLog("* Func struct serialize")
    local aFuncNew = ANewFunc("data")
    corelog.WriteToLog(" type(aFuncNew) = "..type(aFuncNew))
    corelog.WriteToLog(" aFuncNew = "..textutils.serialize(aFuncNew))
    corelog.WriteToLog(" type(aFuncNew.Func1) = "..type(aFuncNew.Func1()))
    corelog.WriteToLog(" aFuncNew.Func1 = "..textutils.serialize(aFuncNew.Func1()))
end

function T_URL_Serializing()
    -- new URL
    corelog.WriteToLog("* Test URL serialize")
    local aURL = url.URLClass:new({
        _host = host,
        _port = port,
        _path = path,
        _query = query,
    })
    corelog.WriteToLog(" aURL:getURI() = "..aURL:getURI())

    corelog.WriteToLog(" aURL type = "..type(aURL))
    corelog.WriteToLog(" 1: aURL = "..aURL:getURI())
    corelog.WriteToLog(" 2: aURL = "..textutils.serialize(aURL))
end

function T_URLs()
    -- worldLocationURL
    corelog.WriteToLog("* Test URL getter")

    local storageURL = url.URLClass:new({
        _host = host,
        _port = port,
        _path = path,
        _query = query,
    })
    corelog.WriteToLog(" storageURL:getScheme() = "..storageURL:getScheme())
    corelog.WriteToLog(" storageURL:getSchemeURI() = "..storageURL:getSchemeURI())

    corelog.WriteToLog(" storageURL:getHost() = "..storageURL:getHost())
    corelog.WriteToLog(" storageURL:getHostURI() = "..storageURL:getHostURI())

    corelog.WriteToLog(" storageURL:getPort() = "..textutils.serialize(storageURL:getPort()))
    corelog.WriteToLog(" storageURL:getPortURI() = "..storageURL:getPortURI())

    corelog.WriteToLog(" storageURL:getAuthorityURI() = "..storageURL:getAuthorityURI())

    corelog.WriteToLog(" storageURL:getPath() = "..textutils.serialize(storageURL:getPath()))
    corelog.WriteToLog(" storageURL:getPathURI() = "..storageURL:getPathURI())

    corelog.WriteToLog(" storageURL:getQuery() = "..textutils.serialize(storageURL:getQuery()))
    corelog.WriteToLog(" storageURL:getQueryURI() = "..storageURL:getQueryURI())

    corelog.WriteToLog(" storageURL:getURI() = "..storageURL:getURI())

    -- setterURL
    corelog.WriteToLog("* URL setter tests")
    local setterURL = url.URLClass:new()
    setterURL:setHost(host)
    corelog.WriteToLog(" setterURL:getHost() = "..setterURL:getHost())
    setterURL:setPort(port)
    corelog.WriteToLog(" setterURL:getPort() = "..setterURL:getPort())
    setterURL:setPath(path)
    corelog.WriteToLog(" setterURL:getPath() = "..textutils.serialize(setterURL:getPath()))
    setterURL:setQuery(query)
    corelog.WriteToLog(" setterURL:getQuery() = "..textutils.serialize(setterURL:getQuery()))
    corelog.WriteToLog(" setterURL:getURI() = "..setterURL:getURI())

    corelog.WriteToLog(" setterURL = "..textutils.serialize(setterURL))

    -- uriSetterURL
    corelog.WriteToLog("* URL setter from URI tests")
    local uriSetterURL = url.URLClass:new()
    uriSetterURL:setHostURI(hostURI)
    corelog.WriteToLog(" uriSetterURL:getHost() = "..uriSetterURL:getHost())
    uriSetterURL:setPortURI(portURI)
    corelog.WriteToLog(" uriSetterURL:getPort() = "..uriSetterURL:getPort())
    uriSetterURL:setPathURI(pathURI)
    corelog.WriteToLog(" uriSetterURL:getPath() = "..textutils.serialize(uriSetterURL:getPath()))
    uriSetterURL:setQueryURI(queryURI)
    corelog.WriteToLog(" uriSetterURL:getQuery() = "..textutils.serialize(uriSetterURL:getQuery()))
    corelog.WriteToLog(" uriSetterURL:getURI() = "..uriSetterURL:getURI())

    -- new from URI
    corelog.WriteToLog("* URL from URI tests (0)")
    local newURI0=uriSetterURL:getSchemeURI()..hostURI..portURI..pathURI..queryURI
--    corelog.WriteToLog(" newURI = "..newURI)
    local fromURI_URL0 = url.NewFromURI(newURI0)
    corelog.WriteToLog(" fromURI_URL0:getURI() = "..fromURI_URL0:getURI())

    corelog.WriteToLog("* URL from URI tests (1: no host)")
    local newURI1=uriSetterURL:getSchemeURI()..portURI..pathURI..queryURI
    local fromURI_URL1 = url.NewFromURI(newURI1) -- note: should fail
    corelog.WriteToLog(" fromURI_URL1:getURI() = "..fromURI_URL1:getURI())

    corelog.WriteToLog("* URL from URI tests (2: no port)")
    local newURI2=uriSetterURL:getSchemeURI()..hostURI..pathURI..queryURI
    local fromURI_URL2 = url.NewFromURI(newURI2)
    corelog.WriteToLog(" fromURI_URL2:getURI() = "..fromURI_URL2:getURI())

    corelog.WriteToLog("* URL from URI tests (3: no path)")
    local newURI3=uriSetterURL:getSchemeURI()..hostURI..portURI..queryURI
    local fromURI_URL3 = url.NewFromURI(newURI3)
    corelog.WriteToLog(" fromURI_URL3:getURI() = "..fromURI_URL3:getURI())

    corelog.WriteToLog("* URL from URI tests (4: no query)")
    local newURI4=uriSetterURL:getSchemeURI()..hostURI..portURI..pathURI
    local fromURI_URL4 = url.NewFromURI(newURI4)
    corelog.WriteToLog(" fromURI_URL4:getURI() = "..fromURI_URL4:getURI())
end
