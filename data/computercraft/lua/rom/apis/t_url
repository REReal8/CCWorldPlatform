local scheme = "ccwprp"
local host = "storage"
local host2 = "turtle"
local port = 1
local port2 = 5
local path = {inputChest = 7, site = 3}
local path2 = {site = 3, inputChest = 4}
local query = {["minecraft:torch"] = 5, ["minecraft:birch_log"] = 3}
local query2 = {["minecraft:torch"] = 5, ["minecraft:charcoal"] = 7}

local schemeURI = "ccwprp://"
local hostURI = "storage"
local portURI = ":1"
local pathURI = "/site=3/inputChest=7"
local queryURI = "?minecraft:birch_log=3&minecraft:torch=5"

function T_URL_Serializing()
    -- new URL
    corelog.WriteToLog("* Test URL serialize")
    local aURL = url.URLClass:new({
        _host = host,
        _port = port,
        _path = path,
        _query = query,
    })
    corelog.WriteToLog(" aURL:getURI() = "..aURL:getURI())

    corelog.WriteToLog(" aURL type = "..type(aURL))
    corelog.WriteToLog(" 1: aURL = "..aURL:getURI())
    corelog.WriteToLog(" 2: aURL = "..textutils.serialize(aURL))
end

function T_Getters()
    -- prepare test
    corelog.WriteToLog("* URL getter tests")
    local getterURL = url.URLClass:new({
        _host = host,
        _port = port,
        _path = path,
        _query = query,
    })

    -- test
    local testResult = getterURL:getScheme()
    local expectedResultStr = scheme
    assert(testResult == expectedResultStr, "getScheme() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getHost()
    expectedResultStr = host
    assert(testResult == expectedResultStr, "getHost() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getPort()
    local expectedResultNumber = port
    assert(testResult == expectedResultNumber, "getPort() return(="..testResult..") different from expected(="..expectedResultNumber..")")

    testResult = getterURL:getPath()
    local expectedResultTable = path
    assert(testResult == expectedResultTable, "getPath() return(="..textutils.serialize(testResult)..") different from expected(="..textutils.serialize(expectedResultTable)..")")

    testResult = getterURL:getQuery()
    expectedResultTable = query
    assert(testResult == expectedResultTable, "getQuery() return(="..textutils.serialize(testResult)..") different from expected(="..textutils.serialize(expectedResultTable)..")")

    -- cleanup test
end

function T_GettersURI()
    -- prepare test
    corelog.WriteToLog("* URL URI getter tests")
    local getterURL = url.URLClass:new({
        _host = host,
        _port = port,
        _path = path,
        _query = query,
    })

    -- test
    local testResult = getterURL:getSchemeURI()
    local expectedResultStr = schemeURI
    assert(testResult == expectedResultStr, "getSchemeURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getHostURI()
    expectedResultStr = hostURI
    assert(testResult == expectedResultStr, "getHostURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getPortURI()
    expectedResultStr = portURI
    assert(testResult == expectedResultStr, "getPortURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getAuthorityURI()
    expectedResultStr = hostURI..portURI
    assert(testResult == expectedResultStr, "getAuthorityURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getPathURI()
    expectedResultStr = pathURI
    assert(testResult == expectedResultStr, "getPathURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getQueryURI()
    expectedResultStr = queryURI
    assert(testResult == expectedResultStr, "getQueryURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    testResult = getterURL:getURI()
    expectedResultStr = schemeURI..hostURI..portURI..pathURI..queryURI
    assert(testResult == expectedResultStr, "getURI() return(="..testResult..") different from expected(="..expectedResultStr..")")

    -- cleanup test
end

function T_Setters()
    -- prepare test
    corelog.WriteToLog("* URL setter tests")
    local setterURL = url.URLClass:new()

    -- test
    setterURL:setHost(host)
    assert(setterURL:getHost() == host, "setHost() result(="..setterURL:getHost()..") different from expected(="..host..")")

    setterURL:setPort(port)
    assert(setterURL:getPort() == port, "setPort() result(="..setterURL:getPort()..") different from expected(="..port..")")

    setterURL:setPath(path)
    assert(setterURL:getPath() == path, "setPath() result(="..textutils.serialize(setterURL:getPath())..") different from expected(="..textutils.serialize(path)..")")

    setterURL:setQuery(query)
    assert(setterURL:getQuery() == query, "setHost() result(="..textutils.serialize(setterURL:getQuery())..") different from expected(="..textutils.serialize(query)..")")

--    corelog.WriteToLog(" setterURL:getURI() = "..setterURL:getURI())
--    corelog.WriteToLog(" setterURL = "..textutils.serialize(setterURL))

    -- cleanup test
end

function T_SettersFromURI()
    -- prepare test
    corelog.WriteToLog("* URL setter from URI tests")
    local uriSetterURL = url.URLClass:new()

    -- test
    uriSetterURL:setHostURI(hostURI)
    assert(uriSetterURL:getHostURI() == hostURI, "setHostURI() result(="..uriSetterURL:getHostURI()..") different from expected(="..hostURI..")")

    uriSetterURL:setPortURI(portURI)
    assert(uriSetterURL:getPortURI() == portURI, "setPortURI() result(="..uriSetterURL:getPortURI()..") different from expected(="..portURI..")")

    uriSetterURL:setPathURI(pathURI)
    assert(uriSetterURL:getPathURI() == pathURI, "setPathURI() result(="..uriSetterURL:getPathURI()..") different from expected(="..pathURI..")")

    uriSetterURL:setQueryURI(queryURI)
    assert(uriSetterURL:getQueryURI() == queryURI, "setQueryURI() result(="..uriSetterURL:getQueryURI()..") different from expected(="..queryURI..")")

    -- cleanup test
end

function T_NewFromURI()
    -- prepare test
    corelog.WriteToLog("* URL from URI tests (0)")
    local uriSetterURL = url.URLClass:new()

    -- test
    local newURI0=uriSetterURL:getSchemeURI()..hostURI..portURI..pathURI..queryURI
    local fromURI_URL0 = url.URLClass:newFromURI(newURI0)
    corelog.WriteToLog(" fromURI_URL0:getURI() = "..fromURI_URL0:getURI())

    corelog.WriteToLog("* URL from URI tests (1: no host)")
    local newURI1=uriSetterURL:getSchemeURI()..portURI..pathURI..queryURI
    local fromURI_URL1 = url.URLClass:newFromURI(newURI1) -- note: should fail
    corelog.WriteToLog(" fromURI_URL1:getURI() = "..fromURI_URL1:getURI())

    corelog.WriteToLog("* URL from URI tests (2: no port)")
    local newURI2=uriSetterURL:getSchemeURI()..hostURI..pathURI..queryURI
    local fromURI_URL2 = url.URLClass:newFromURI(newURI2)
    corelog.WriteToLog(" fromURI_URL2:getURI() = "..fromURI_URL2:getURI())

    corelog.WriteToLog("* URL from URI tests (3: no path)")
    local newURI3=uriSetterURL:getSchemeURI()..hostURI..portURI..queryURI
    local fromURI_URL3 = url.URLClass:newFromURI(newURI3)
    corelog.WriteToLog(" fromURI_URL3:getURI() = "..fromURI_URL3:getURI())

    corelog.WriteToLog("* URL from URI tests (4: no query)")
    local newURI4=uriSetterURL:getSchemeURI()..hostURI..portURI..pathURI
    local fromURI_URL4 = url.URLClass:newFromURI(newURI4)
    corelog.WriteToLog(" fromURI_URL4:getURI() = "..fromURI_URL4:getURI())

    -- cleanup test
end

function T_SameURLComponents()
    corelog.WriteToLog("* URL same components tests")
    -- same Host
    local aURL = url.URLClass:new({
        _host = host,
    })
    local aSameURL = url.URLClass:new({
        _host = host,
    })
    assert(aURL:sameHost(aSameURL), "hosts should be the same")
    local aDifferentURL = url.URLClass:new({
        _host = host2,
    })
    assert(not aURL:sameHost(aDifferentURL), "hosts should not be the same")

    -- same Authority
    aURL = url.URLClass:new({
        _host = host2,
        _port = port,
    })
    aSameURL = url.URLClass:new({
        _host = host2,
        _port = port,
    })
    assert(aURL:sameAuthority(aSameURL), "authority should be the same")
    aDifferentURL = url.URLClass:new({
        _host = host2,
        _port = port2,
    })
    assert(not aURL:sameAuthority(aDifferentURL), "authority should not be the same")

    -- same path
    aURL = url.URLClass:new({
        _path = path,
    })
    aSameURL = url.URLClass:new({
        _path = path,
    })
    assert(aURL:samePath(aSameURL), "path should be the same")
    aDifferentURL = url.URLClass:new({
        _path = path2,
    })
    assert(not aURL:samePath(aDifferentURL), "path should not be the same")

    -- same base
    aURL = url.URLClass:new({
        _host = host2,
        _port = port,
        _path = path,
    })
    aSameURL = url.URLClass:new({
        _host = host2,
        _port = port,
        _path = path,
    })
    assert(aURL:samePath(aSameURL), "base should be the same")
    aDifferentURL = url.URLClass:new({
        _host = host2,
        _port = port,
        _path = path2,
    })
    assert(not aURL:samePath(aDifferentURL), "base should not be the same")

    -- same query
    aURL = url.URLClass:new({
        _query = query,
    })
    aSameURL = url.URLClass:new({
        _query = query,
    })
    assert(aURL:sameQuery(aSameURL), "query should be the same")
    aDifferentURL = url.URLClass:new({
        _query = query2,
    })
    assert(not aURL:sameQuery(aDifferentURL), "query should not be the same")
end
