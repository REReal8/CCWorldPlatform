local db	= {
	dbFilename  = "/db/coreinventory.lua",
	protocol	= "coreinventory",
    left        = "",
    right       = "",
}

-- init, read last db from file
function Init()
	-- read from file
	local dbFile = coreutils.ReadTableFromFile(db.dbFilename)

	-- check for empty table --> https://stackoverflow.com/questions/1252539/most-efficient-way-to-determine-if-a-lua-table-is-empty-contains-no-entries
	if next(dbFile) ~= nil then db = dbFile end
end

function Setup()
    -- niks te doen voor setup
    coredht.DHTReadyFunction(DHTReadySetup)
end

function DHTReadySetup()
    -- controleren of dht root bestaat
    if not coredht.GetData("allItems") then ResetAllItems() end
end

function ResetAllItems()
    coredht.SaveData({}, "allItems")
end

function GetEmptySlot(list)
    -- list is an optional table containing which slots are allowed

    -- alle slots nalopen
    for slot = 1, 16 do

        -- alleen een optie als we geen lijst gekregen hebben of de lijst aangeeft dat deze gebruikt mag worden
        if not list or list[slot] then

            -- wat zit er in dit slot
            local data = GetItemDetail(slot)

            -- deze slot wel het juiste item?
            if not data then

                -- deze selecteren
                turtle.select(slot)

                -- en we zijn klaar
                return slot
            end
        end
    end

    -- geen empty slot gevonden
    return false
end

function GetItemDetail(slot)
    -- wrap around turtle.getItemDetail to store all known information about items

    -- informatie ophalen
    local data = turtle.getItemDetail(slot)

    -- controleren of dit item al bekend is
    if data and not coredht.GetData("allItems", data.name) then
        coredht.SaveData({
            name        = data.name,
            stackSize   = turtle.getItemCount(slot) + turtle.getItemSpace(slot),
        }, "allItems", data.name)
    end

    -- klaar
    return data
end

function GetStackSize(itemName)
    -- return what the dht has, otherwise 64 as default value
    return coredht.GetData("allItems", itemName, "stackSize") or 64
end

function SelectItem(itemName)
    -- eerst huidige slot onderzoeken
    local data = GetItemDetail()

    -- juiste?
    if data and data.name == itemName then return true end

    -- alle slots nalopen
    for slot = 1, 16 do

        -- wat zit er in dit slot
        data = GetItemDetail(slot)

        -- deze slot wel het juiste item?
        if data and data.name == itemName then

            -- deze selecteren
            turtle.select(slot)

            -- en we zijn klaar
            return true
        end
    end

    -- niet gevonden, niet zo best
    return false
end

function CountItem(itemName)
    -- keep itemCount
    local itemCount = 0

    -- loop all slots
    for slot=1,16 do

        -- get detailed information about this slot
        local itemDetail = GetItemDetail(slot)

        -- right item?
        if type(itemDetail) == "table" and itemDetail.name == itemName then itemCount = itemCount + itemDetail.count end
    end

    -- we're done
    return itemCount
end

function GetAllItems(direction)
    local f    = turtle.suck

    -- andere richting?
    if direction == "up"   or direction == "Up"     then f = turtle.suckUp    end
    if direction == "down" or direction == "Down"   then f = turtle.suckDown  end

    -- net zo langs spullen opzuigen totdat er niks meer verplaatst (om welke rede dan ook)
    while f() do end
end

function GetInventoryDetail()
    -- to hold the data
    local inventory = {
        items   = {},
        slots   = {},
    }

    -- loop all slots
    for slot=1,16 do

        -- get detailed information about this slot
        local itemDetail = GetItemDetail(slot)

        -- right item?
        if type(itemDetail) == "table" then

            -- add to items
            inventory.items[ itemDetail.name ]  = (inventory.items[ itemDetail.name ] or 0) + itemDetail.count

            -- add to slots, name and count
            inventory.slots[ slot ]             = {
                itemName    = itemDetail.name,
                itemCount   = itemDetail.count,
            }
        end
    end

    -- we're done
    return inventory
end

function DetermineItemsList(slots)
    -- construct items list
    local items = {}

    -- loop on slots
    for slot, item in pairs(slots) do
        -- right item?
        if type(item) == "table" then
            -- add to items
            items[ item.name ]  = (items[ item.name ] or 0) + item.count
        end
    end

    -- end
    return items
end

function CopyInventory(...)
    -- get & check input from description
    local checkSuccess, items, slots = coreutils.CheckInput([[
        This async private function copies an inventory.

        Return value:
            inventoryCopy               - (table) copy of the inventory

        Parameters:
            inventory                   - (table) inventory to copy
                items                   + (table) items inventory
                slots                   + (table) slots inventory
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("mobj_chest.CopyInventory: Invalid input") return nil end

    -- construct copy
    local copy = {
        items   = CopyItems(items),
        slots   = CopySlots(slots),
    }

    -- end
    return copy
end

function CopyItems(...)
    -- get & check input from description
    local checkSuccess, items = coreutils.CheckInput([[
        This async private function copies items (inventory).

        Return value:
            itemsCopy                   - (table) copy of the items

        Parameters:
            items                       + (table) items to copy
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("mobj_chest.CopyItems: Invalid input") return nil end

    -- construct copy
    local copy = {}
    for itemName, itemCount in pairs(items) do
        -- add to items
        copy[ itemName ] = itemCount
    end

    -- end
    return copy
end

function CopySlots(...)
    -- get & check input from description
    local checkSuccess, slots = coreutils.CheckInput([[
        This async private function copies slots (inventory).

        Return value:
            slotsCopy                   - (table) copy of the slots

        Parameters:
            slots                       + (table) slots to copy
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("mobj_chest.CopySlots: Invalid input") return nil end

    -- construct copy
    local copy = {}
    for iSlot, slot in ipairs(slots) do
        -- add to slots, name and count
        copy[ iSlot ]             = {
            itemName    = slot.itemName,
            itemCount   = slot.itemCount,
        }
    end

    -- end
    return copy
end

function DropAllItems(direction)
    -- check the direction, lowercase only
    direction = direction or "down"
    direction = string.lower(direction)

    -- we will organize what we dropped, who knows who cares
    local cargoList = {}

    -- alle slots nalopen
    for slot = 1, 16 do

        -- select it
        turtle.select(slot)

        -- for the cargoList
        local itemData = GetItemDetail(slot)

        -- add to the cargoList
        if itemData then cargoList[ itemData.name ] = (cargoList[ itemData.name ] or 0) + itemData.count end

        -- actually drop this shit in the right direction
        if      direction == "up"   then turtle.dropUp()
        elseif  direction == "down" then turtle.dropDown()
                                    else turtle.drop()
        end
    end

    -- nicely done!
    return cargoList
end

function DropAll(itemName, direction)
    -- check the direction, lowercase only
    direction = direction or "front"
    direction = string.lower(direction)

    -- alle slots nalopen
    for slot = 1, 16 do

        -- wat zit er in dit slot
        local data = GetItemDetail(slot)

        -- deze slot wel het juiste item?
        if data and data.name == itemName then

            -- deze selecteren
            turtle.select(slot)

            -- juiste richting zoeken
            if      direction == "up"   or direction == "Up"    then turtle.dropUp()
            elseif  direction == "down" or direction == "Down"  then turtle.dropDown()
                                                                else turtle.drop()
            end
        end
    end
end

function Equip(itemName)
    local slot = nil

    -- already equiped?
    if db.right == itemName then return true end

    -- find empty spot (remove current equiped to the right when we have an empty spot)
    if GetEmptySlot() then

        -- remember this slot
        slot = turtle.getSelectedSlot()

        -- remove item on the right side (modem on the left) if there is anything equiped ofcourse
        turtle.equipRight()
    end

    -- find the crafting table
    SelectItem(itemName)

    -- did we found one?
    if GetItemDetail() then -- ToDo: shouldn't a slot be passed to GetItemDetail() ?
        -- remember this
        db.right    = itemName

       	-- write to disk
        coreutils.WriteToFile(db.dbFilename, db, "overwrite")

        -- great!
        return turtle.equipRight()
    else
        corelog.Warning("coreinventory.Equip: Could not find "..itemName.." => not equiped")

        -- not found, restore
        if slot then
            turtle.select(slot)
            turtle.equipRight()
        end

        -- done
        return nil
    end
end

function Refuel(fuel)

    -- check input arguments
    if type(fuel) ~= "table" or type(fuel.itemName) ~= "string" or type(fuel.itemCount) ~= "number" or fuel.itemCount < 1 then return false end

    -- handig voor de loop
    local itemsLeft  = fuel.itemCount

    -- find the fuel in the inventory
    while SelectItem(fuel.itemName) and itemsLeft > 0 do

        -- how many present
        local itemsPresent  = turtle.getItemCount()

        -- how many to burn
        local itemsToBurn   = nil
        if itemsLeft < itemsPresent then itemsToBurn = itemsLeft
                                    else itemsToBurn = itemsPresent
        end

        -- do the refuelling
        turtle.refuel(itemsToBurn)

        -- adjust itemsLeft
        itemsLeft = itemsLeft - itemsToBurn
    end

    -- done
    return true
end
