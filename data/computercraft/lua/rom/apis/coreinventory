-- lua

function Init()
    -- niks te doen voor init
end

function Setup()
    -- niks te doen voor setup
    coredht.DHTReadyFunction(DHTReadySetup)
end

function DHTReadySetup()
    -- controleren of dht root bestaat
    if not coredht.GetData("allItems") then coredht.SaveData({}, "allItems") end
end

function GetEmptySlot(list)
    -- list is an optional table containing which slots are allowed

    -- alle slots nalopen
    for slot = 1, 16 do

        -- alleen een optie als we geen lijst gekregen hebben of de lijst aangeeft dat deze gebruikt mag worden
        if not list or list[slot] then

            -- wat zit er in dit slot
            local data = GetItemDetail(slot)

            -- deze slot wel het juiste item?
            if not data then

                -- deze selecteren
                turtle.select(slot)

                -- en we zijn klaar
                return slot
            end
        end
    end

    -- geen empty slot gevonden
    return false
end

function GetItemDetail(slot)
    -- wrap around turtle.getItemDetail to store all known information about items

    -- informatie ophalen
    local data = turtle.getItemDetail(slot)

    -- controleren of dit item al bekend is
    if data and not coredht.GetData("allItems", data.name) then
        coredht.SaveData({
            name        = data.name,
            stackSize   = turtle.getItemCount(slot) + turtle.getItemSpace(slot),
        }, "allItems", data.name)
    end

    -- klaar
    return data
end

function SelectItem(itemName)
    -- eerst huidige slot onderzoeken
    local data = GetItemDetail()

    -- juiste?
    if data and data.name == itemName then return true end

    -- alle slots nalopen
    for slot = 1, 16 do

        -- wat zit er in dit slot
        data = GetItemDetail(slot)

        -- deze slot wel het juiste item?
        if data and data.name == itemName then

            -- deze selecteren
            turtle.select(slot)

            -- en we zijn klaar
            return true
        end
    end

    -- niet gevonden, niet zo best
    return false
end

function CountItem(itemName)
    -- keep count
    local count = 0

    -- loop all slots
    for slot=1,16 do

        -- get detailed information about this slot
        local itemDetail = GetItemDetail(slot)

        -- right item?
        if type(itemDetail) == "table" and itemDetail.name == itemName then count = count + itemDetail.count end
    end

    -- we're done
    return count
end

function GetAllItems(direction)
    local f    = turtle.suck

    -- andere richting?
    if direction == "up"   or direction == "Up"     then f = turtle.suckUp    end
    if direction == "down" or direction == "Down"   then f = turtle.suckDown  end

    -- net zo langs spullen opzuigen totdat er niks meer verplaatst (om welke rede dan ook)
    while f() do end
end

function DropAllItems(direction)
    -- check the direction, lowercase only
    direction = string.lower(direction)

    -- we will organize what we droppen, who knows who cares
    local cargoList = {}

    -- alle slots nalopen
    for slot = 1, 16 do

        -- select it
        turtle.select(slot)

        -- for the cargoList
        local itemData = GetItemDetail(slot)

        -- add to the cargoList
        if itemData then cargoList[ itemData.name ] = (cargoList[ itemData.name ] or 0) + itemData.count end

        -- actually drop this shit in the right direction
        if      direction == "up"   then turtle.dropUp()
        elseif  direction == "down" then turtle.dropDown()
                                    else turtle.drop()
        end
    end

    -- nicely done!
    return cargoList
end

function DropAll(itemName, direction)
    -- check the direction, lowercase only
    direction = string.lower(direction)

    -- alle slots nalopen
    for slot = 1, 16 do

        -- wat zit er in dit slot
        local data = GetItemDetail(slot)

        -- deze slot wel het juiste item?
        if data and data.name == itemName then

            -- deze selecteren
            turtle.select(slot)

            -- juiste richting zoeken
            if      direction == "up"   or direction == "Up"    then turtle.dropUp()
            elseif  direction == "down" or direction == "Down"  then turtle.dropDown()
                                                                else turtle.drop()
            end
        end
    end
end

function Equip(itemName)
    -- find empty spot
    coreinventory.GetEmptySlot()

    -- remember this slot
    local slot  = turtle.getSelectedSlot()

    -- remove item on the right side (modem on the left) if there is anything equiped ofcourse
    turtle.equipRight()

    -- find the crafting table
    coreinventory.SelectItem(itemName)

    -- did we found one?
    local itemDetail = coreinventory.GetItemDetail()

    -- equip when found
    if itemDetail then return turtle.equipRight()
    else
        -- not found, restore
        turtle.select(slot)
        turtle.equipRight()

        -- done
        return nil
    end
end

function Refuel(fuel)
    -- find the fuel in the inventory
    SelectItem(fuel.itemName)

    -- do the refuelling
    turtle.refuel(fuel.itemCound)
end