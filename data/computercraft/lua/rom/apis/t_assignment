function End(assignmentId)
    coreassignment.EndAssignment(assignmentId)
end

function T_EndAssignments()
    coreassignment.EndAssignments()
end

function T_MetaDataConditionsMet()
    local now = coreutils.UniversalTime()
    local currentTurtleId = os.getComputerID()
    local metaData = {
        startTime = now,
        needTurtle = true,
        needTurtleId = currentTurtleId,
        needTool = true,
        fuelNeeded = 0,
        itemsNeeded = {},
        location = nil,
    }

    -- test startTime
    corelog.WriteToLog("# Test startTime condition")
    metaData.startTime = now + 1000
    local conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.Error("  condition incorrectly met")
    end
    metaData.startTime = now

    -- test needTurtleId
    corelog.WriteToLog("# Test needTurtleId (other)")
    metaData.needTurtleId = currentTurtleId + 1000
    conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.Error("  condition incorrectly met")
    end
    metaData.needTurtleId = currentTurtleId

    corelog.WriteToLog("# Test needTurtleId (current)")
    conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.WriteToLog("  condition met")
    end
    metaData.needTurtleId = nil

    -- test fuelNeeded
    corelog.WriteToLog("# Test fuelNeeded")
    metaData.fuelNeeded = 10000
    conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.Error("  condition incorrectly met")
    end
    metaData.fuelNeeded = 5

    -- test itemsNeeded
    corelog.WriteToLog("# Test itemsNeeded")
    local itemsNeeded = {
        ["minecraft:torch"] = 1,
        ["minecraft:chest"] = 1000,
    }
    metaData.itemsNeeded = itemsNeeded
    conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.Error("  condition incorrectly met")
    end
    metaData.itemsNeeded = {}

    -- test other conditions
    corelog.WriteToLog("# Test Other conditions")
    conditionsMet, skipReason = coreassignment.MetaDataConditionsMet(metaData)
    if not conditionsMet then
        corelog.WriteToLog("  condition not met: "..skipReason)
    else
        corelog.WriteToLog("  conditions met")
    end
end

function T_BestCandidate()
    -- init candidate 1
    local now = coreutils.UniversalTime()
    local metaData1 = {
        startTime = now,
        needTurtle = true,
        needTurtleId = nil,
        needTool = true,
        fuelNeeded = 0,
        itemsNeeded = {},
        location = nil,
    }
    local assignmentId1  = coreutils.NewId()
    local candidateData1 = {
        id = assignmentId1,
        metaData = metaData1,
    }

    -- init candidate 2
    local metaData2 = {
        startTime = now,
        needTurtle = true,
        needTurtleId = nil,
        needTool = true,
        fuelNeeded = 0,
        itemsNeeded = {},
        location = nil,
    }
    local assignmentId2  = coreutils.NewId()
    local candidateData2 = {
        id = assignmentId2,
        metaData = metaData2,
    }

    -- test needTurtleId
    corelog.WriteToLog("# Test needTurtleId is a preferred candidate")
    local currentTurtleId = os.getComputerID()
    candidateData2.metaData.needTurtleId = currentTurtleId
    local bestCandidate = coreassignment.BestCandidate(candidateData1, candidateData2)
    if bestCandidate ~= candidateData2 then 
        corelog.Error("t_assignment.T_BestCandidate: candidate with needTurtleId not returned as best candidate")
    else
        corelog.WriteToLog("  needTurtleId is preferred")
    end
    candidateData2.metaData.needTurtleId = nil
end
