local db = {
    -- turtle slots
    -- [ 1] [ 2] [ 3] [ 4]
    -- [ 5] [ 6] [ 7] [ 8]
    -- [ 9] [10] [11] [12]
    -- [13] [14] [15] [16]
    recipes        = {
        ["minecraft:stick"] = {
            crafting  = {
                  [6]    = { itemName = "minecraft:birch_planks",   itemCount = 1 },
                 [10]    = { itemName = "minecraft:birch_planks",   itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:charcoal"] = {
            smelting  = {
                itemName    = "minecraft:birch_log",
                itemCount   = 1,
                yield       = 1,
            },
        },
        ["minecraft:torch"] = {
            crafting  = {
                 [6]    = { itemName = "minecraft:charcoal",        itemCount = 1 },
                [10]    = { itemName = "minecraft:stick",           itemCount = 1 },
               yield   = 4
           },
        },
        ["minecraft:birch_planks"] = {
            crafting  = {
                 [6]    = { itemName = "minecraft:birch_log",       itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:chest"] = {
            crafting  = {
                 [6]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                 [7]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                 [8]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                [10]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                [12]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                [14]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                [15]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                [16]    = { itemName = "minecraft:birch_planks",    itemCount = 1 },
                yield   = 1
            },
        },
    }
}

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|



--   _           _ _     _               _   _                      
--   | |         (_) |   | |             | | | |                     
--   | |__  _   _ _| | __| |  _ __   __ _| |_| |_ ___ _ __ _ __  ___ 
--   | '_ \| | | | | |/ _` | | '_ \ / _` | __| __/ _ \ '__| '_ \/ __|
--   | |_) | |_| | | | (_| | | |_) | (_| | |_| ||  __/ |  | | | \__ \
--   |_.__/ \__,_|_|_|\__,_| | .__/ \__,_|\__|\__\___|_|  |_| |_|___/
--                           | |                                     
--                           |_|                                     

storageChestL0_pattern = {
    deltaX      = 1,
    deltaY      = 1,
    objectList  = {},
    clearRemainingSpace = true
}

underTheFurnanceLayerL0_pattern = {
    deltaX      = 1,
    deltaY      = 2,
    objectList  = {},
    clearRemainingSpace = true
}

furnanceLayerL0_pattern = {
    deltaX      = 1,
    deltaY      = 2,
    objectList  = {
        { x = 0, y = 1, block = "minecraft:furnace"},
    },
    clearRemainingSpace = true
}

storageChestL1_pattern = {
    deltaX      = 1,
    deltaY      = 1,
    objectList  = {
        { x = 0, y = 0, block = "minecraft:chest"},
    },
    clearRemainingSpace = false
}

topLayerL1_pattern = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 0, y = 3, block = "minecraft:torch"},
        { x = 2, y = 5, block = "minecraft:chest"},
        { x = 3, y = 0, block = "minecraft:torch"},
        { x = 4, y = 5, block = "minecraft:chest"},
    },
    clearRemainingSpace = true
}

--          _     _                                              _                        _                 _      
--         | |   | |                                            | |                      | |               | |     
--     ___ | | __| |  _ __ ___   ___  ___ ___  __ _  __ _  ___  | |__   __ _ ___  ___  __| |   ___ ___   __| | ___ 
--    / _ \| |/ _` | | '_ ` _ \ / _ \/ __/ __|/ _` |/ _` |/ _ \ | '_ \ / _` / __|/ _ \/ _` |  / __/ _ \ / _` |/ _ \
--   | (_) | | (_| | | | | | | |  __/\__ \__ \ (_| | (_| |  __/ | |_) | (_| \__ \  __/ (_| | | (_| (_) | (_| |  __/
--    \___/|_|\__,_| |_| |_| |_|\___||___/___/\__,_|\__, |\___| |_.__/ \__,_|___/\___|\__,_|  \___\___/ \__,_|\___|
--                                                   __/ |                                                         
--                                                  |___/                                                          

function NewAlchemieSite(data)
    -- data.location = {x=.., y=.., z=.., dx=.., dy=..}
    -- data.type = "simple" | "regular"
    local enterpriseId   = coreutils.NewId()
    local enterpriseName  = "enterprise_factory"


    -- data verrijken
    data.enterpriseId   = enterpriseId
    data.enterpriseName = enterpriseName
    data.topchests      = {}
    data.furnaces       = {}
    data.taskList       = {}
    data.activeTasks    = {}
    data.craftingTable  = "inventory" -- or {location table} if the site has one

    -- onze gegevens opslaan
    coredht.SaveData(data, "enterprises", enterpriseId)

    -- vacature uitzetten voor een turtle die dit voor ons gaat bouwen
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        location        = coremove.CopyLocation(data.location, 0), -- kopie van locatie van het alchemisten centrum, waar het werk (waarschijnlijk) plaats zal vinden
        startTime       = coreutils.UniversalTime(),
        needTool        = true,
        needTurtle      = true
    })
end

function ProcessNextTask(enterpriseId)
    local taskList          = coredht.GetData("enterprises", enterpriseId, "taskList")
    local taskId, taskTable = next(taskList)

    -- did we get a task?
    if not taskId or type(taskTable) ~= "table" then return end

    -- remove from the task list once completed
    coredht.SaveData(nil, "enterprises", enterpriseId, "taskList", taskId)

    -- execute this command using the task queue
        if taskTable.alchemieType == "craft"    then return coretask.AddWork(role_alchemist.Craft,  taskTable)
    elseif taskTable.alchemieType == "smelt"    then return coretask.AddWork(role_alchemist.Smelt,  taskTable)
    elseif taskTable.alchemieType == "pickup"   then return coretask.AddWork(role_alchemist.Pickup, taskTable)
    end
end

function ProcessNextMessage(enterpriseId)
    -- berichten die we accepteren
    --
    -- {subject="item list", itemName="minecraft:charcoal", itemCount=64} --> returns one or more item lists needed to craft this
    -- {subject="claim chest" } --> return chest loaction and claims chest (or returns nil when no chest is available)
    -- {subject="free chest" }  --> marks the chest as free for new use
    -- {subject="make item", itemName="minecraft:charcoal", itemCount=64, resource="inventory"|{location tabel} } --> will make the items and returns message when complete

    -- retreive next message
    local message       = enterprise.GetNextMessage(enterpriseId)
    if type(message) ~= "table" then return false end

    -- what to do?
    if message.subject == "item list"   then ProcessItemListMessage(message)    end
    if message.subject == "claim chest" then ProcessClaimChestMessage(message)  end
    if message.subject == "free chest"  then ProcessFreeChestMessage(message)   end
    if message.subject == "make item"   then ProcessMakeItemMessage(message)    end

    -- we did something, impressive
    return true
end

function TaskComplete(enterpriseId)
    -- get enterprise data
--    local data          = coredht.GetData("enterprises", enterpriseId)

    -- moeten we nog iets doen nu de task is afgerond? nieuwe job aanmaken
    corejob.NewJob({
        enterpriseId    = enterpriseId,
--        location        = data.location,                -- locatie van het alchemisten centrum, waar het werk (waarschijnlijk) plaats zal vinden
        startTime       = coreutils.UniversalTime(),
        needTool        = false,                        -- geen bijzondere turtle nodig
        needTurtle      = true
    })
end

function ProcessItemListMessage(message)
    -- makes item list needed for crafting / smelting this item
    local messageData   = message.data

    -- valid message?
    if type(messageData.itemName) ~= "string" or type(messageData.itemCount) ~= "number" then corelog.Warning("Received message without required fields") return nil end

    -- do we know this item?
    local recipe = db.recipes[ messageData.itemName ]
    if not recipe then corelog.Warning("No recipe found for "..messageData.itemName) return nil end

    -- to store our reaction
    local responseData  = { possibilities = {} }

    -- via crafting te maken?
    if recipe.crafting then
        local crafting  = recipe.crafting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( messageData.itemCount / crafting.yield )

        -- calculate all the needed items
        for i=1,16 do

            -- this slot needed for this recipe?
            if crafting[ i ] then

                -- add to list
                data.itemList[ crafting[ i ].itemName ] = (data.itemList[ crafting[ i ].itemName ] or 0) + times * crafting[ i ].itemCount

            end
        end

        -- calculate the output
        data.output = times * crafting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- via smelting te maken?
    if recipe.smelting then
        local smelting  = recipe.smelting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( messageData.itemCount / smelting.yield )

        -- add to list
        data.itemList[ smelting.itemName ] = times * smelting.itemCount

        -- calculate the output
        data.output = times * smelting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- send message back
    enterprise.ReplyToMessage(message, "item list response", responseData)
end

function ProcessClaimChestMessage(message)
    -- get enterprise data
    local enterpriseId  = enterprise.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)
    local topchests     = data.topchests
    local responseData  = {}

    -- look for a free chest
    for chestId, chest in pairs(topchests) do

        -- is this one free?
        if chest.status == "free" then

            -- claim chest
            coredht.SaveData("claimed", "enterprises", enterpriseId, "topchests", chestId, "status")

            -- opslaan
            responseData    = {
                chestId         = chestId,
                chestLocation   = chest.location
            }

            -- rest van de loop niet meer nodig
            break
        end
    end

    -- send message back
    enterprise.ReplyToMessage(message, "claim chest response", responseData)
end

function ProcessFreeChestMessage(message)
    -- voor wie zijn we aan het werk?
    local enterpriseId = enterprise.GetMessageRecipient(message)

    -- check parameters
    if type(message) ~= "table" or type(message.data) ~= table then return nil end

    -- controleren of deze chest wel bestaat
    if coredht.GetData("enterprises", enterpriseId, "topchests", message.data.chestId) then

        -- store new status
        coredht.SaveData("free", "enterprises", enterpriseId, "topchests", message.data.chestId, "status")
    end

    -- geen reactie terug
end

function ProcessMakeItemMessage(message)
    -- message.data.itemName            -- mandatory
    -- message.data.itemCount           -- default: 1
    -- message.data.ingredientsLocation -- "inventory"|{location table}

    -- voor wie zijn we aan het werk?
    local enterpriseId = enterprise.GetMessageRecipient(message)

    -- check parameters
    local messageData               = message.data
    if not type(messageData.itemName) == "string" then return nil end                  -- "minecraft:chest"
    messageData.itemCount           = messageData.itemCount or 1                       -- 8
    messageData.ingredientsLocation = messageData.ingredientsLocation  or "inventory"  -- "inventory"|{location tabel}

    -- check if the item is known in our recipes
    if type(db.recipes[ messageData.itemName ]) ~= "table" then corelog.WriteToLog("No recipe for item "..messageData.itemName) return end

    -- make a copy of the locations
    if type(messageData.ingredientsLocation) == "table" then messageData.ingredientsLocation = coremove.CopyLocation(messageData.ingredientsLocation) end
    local workingLocation   = coremove.CopyLocation(coredht.GetData("enterprises", enterpriseId, "location"))

    -- see if it's crafting (no waiting time) or smelting (waiting time)
    local craftingRecipe    = db.recipes[ messageData.itemName ].crafting
    local smeltingRecipe    = db.recipes[ messageData.itemName ].smelting

    -- get us a nice fresh id
    local taskId            = coreutils.NewId()

    -- for now just one way supported, just crafting
    if craftingRecipe ~= nil then
        coredht.SaveData({
            taskId              = taskId,
            messageId           = enterprise.GetMessageId(message),
            created             = coreutils.UniversalTime(),
            alchemieType        = "craft",
            recipe              = textutils.unserialize(textutils.serialize(craftingRecipe)),
            itemName            = messageData.itemName,
            itemCount           = messageData.itemCount,
            ingredientsLocation = messageData.ingredientsLocation,
            workingLocation     = workingLocation,
        }, "enterprises", enterpriseId, "taskList", taskId)

    -- other way around
    elseif smeltingRecipe then



    else
        -- no recipe known for this item!
    end
end
