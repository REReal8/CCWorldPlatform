--
-- A Transport enterprise provides services to transport items.
--   It uses courier(s) to transport the items.
--

--
-- Public services offered by the enterprise.
--   The functions are asynch. A callback function is called once the items are delivered.
--

--function TrEnterprise:TransportItem(fromChest, toChest, itemType, itemAmount, callbackFunc)
    -- ToDo: implement
--end


--
-- ? functions
--

function NewEnterprise()
    -- create new Id
    local enterpriseId = coreutils.NewId()

    -- add to dht
    coredht.SaveData({
        type = "transport"
--        lastHarvest = 0,
--        inbox       = {},
--        taskList    = {},
--        diepte      = 4,
--        breedte     = 4,
--        startpunt   = {},
    }, "enterprises", enterpriseId)

    -- nu hebben we maar 1 taak, dus ff ID en taak zelf maken
--    NewHarvestingTask(enterpriseId)

    -- init enterprise
    Init(enterpriseId)
end

function Init(enterpriseId)
    -- create
    coreutils.WriteToLog("Enterprise Transport "..enterpriseId.." created");

    -- ToDo: get this from message box later
--    NewBuilderJob(enterpriseId)
end

--
-- corejob Functions
--

function ProcessNextTask(jobId)
end

function ProcessNextMessage(jobId)
end

function TaskComplete(jobId)
end

--
-- Internal functions
--

--function NewBuilderJob(enterpriseId)
--    corejob.NewJob({
--        enterpriseId    = enterpriseId,
--        location        = coredht.GetData("enterprises", enterpriseId, "location"), -- locatie van het bos, waar het werk plaats zal vinden
--        needTool        = true,                                                     -- waarschijnlijk het bos weer omhakken, dus tool nodig
--        needTurtle      = true                                                      -- waarschijnlijk het bos weer omhakken, dus turtle nodig
--    })
--end
