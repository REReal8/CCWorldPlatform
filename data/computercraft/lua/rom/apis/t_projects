function T_CombineStepResults()
    -- init
    local projectDefinition = {
        services    = {
            { serviceName = "enterprise_test.TestPureLogicService_SSrv", async = false, input = {
                { keyName = "testArg"       , valueSource = 0, sourceKey = "testData1" },
            }},
            { serviceName = "enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv", async = true, input = {
                { keyName = "testArg"       , valueSource = 0, sourceKey = "testData2" },
            }},
            { serviceName = "enterprise_test.TestPureLogicService_SSrv", async = false, input = {
                { keyName = "testArg"       , valueSource = 0, sourceKey = "testData3" },
                { keyName = "serviceResult" , valueSource = 0, sourceKey = "falseServiceResult" },
            }},
            { serviceName = "enterprise_test.TestPureLogicService_SSrv", async = false, input = {
                { keyName = "testArg"       , valueSource = 0, sourceKey = "testData4" },
            }},
            { serviceName = "enterprise_projects.AreAllTrue_QSrv", async = false, input = { -- ToDo: consider introducing simple syntax to the projectDefinition whether this step should automatically be added at the end of the sequence
                { keyName = "success1"      , valueSource = 1, sourceKey = "success" },
                { keyName = "success2"      , valueSource = 2, sourceKey = "success" },
                { keyName = "success3"      , valueSource = 3, sourceKey = "success" },
                { keyName = "success4"      , valueSource = 4, sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success"           , valueSource = 5, sourceKey = "success" },
        }
    }
    local projectData = {
        testData1 = "some testData1",
        testData2 = "some testData2",
        testData3 = "some testData3",
        falseServiceResult = {success = false},
        testData4 = "some testData4",
    }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = { "rootCallBackData" }
    local serviceData = {
        projectDefinition = projectDefinition,
        projectInputData = projectData,
    }

    enterprise_projects.StartProject_ASrv(serviceData, callbackFunction, callbackData)
end

function T_StartProject()
    -- init
    local testArgValue = 20
    local projectDefinition = {
        services    = {
            { serviceName = "enterprise_test.TestPureLogicService_SSrv", async = false, input = {
                { keyName = "testArg"   , valueSource = 0, sourceKey = "testArgSource" },
            }},
            { serviceName = "enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments_ASrv", async = true, input = {
                { keyName = "testArg"   , valueSource = 0, sourceKey = "testArgSource" },
            }},
            { serviceName = "enterprise_test.TestPureLogicService_SSrv", async = false, input = {
                { keyName = "testArg"   , valueSource = 0, sourceKey = "testTableSource.key3.nKey2" },
            }},
        },
        returnData  = {
            { keyName = "testBArg0"     , valueSource = 0, sourceKey = "testArgSource" },
            { keyName = "testBArg1"     , valueSource = 1, sourceKey = "input" },
            { keyName = "testBArg2"     , valueSource = 2, sourceKey = "input" },
            { keyName = "testBArg3"     , valueSource = 3, sourceKey = "input" },
        }
    }
    local projectData = { 
        testArgSource = testArgValue,
        testTableSource = {
            key1 = 11,
            key2 = 22,
            key3 = {
                nKey1 = 111,
                nKey2 = 222,
                nKey3 = 333,
            }
        }
    }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = { "rootCallBackData" }
    local serviceData = {
        projectDefinition = projectDefinition,
        projectInputData = projectData,
    }

    enterprise_projects.StartProject_ASrv(serviceData, callbackFunction, callbackData)
end

function T_DeleteProjects()
    enterprise_projects.DeleteProjects()
end

