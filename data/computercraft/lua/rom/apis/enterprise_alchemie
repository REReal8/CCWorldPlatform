-- [ 1] [ 2] [ 3] [ 4]
-- [ 5] [ 6] [ 7] [ 8]
-- [ 9] [10] [11] [12]
-- [13] [14] [15] [16]

local db = {
    enterpriseName  = "enterprise_alchemie",
    recipes        = {
        ["minecraft:stick"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [4]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:charcoal"] = {
            smelting  = {
                itemName    = "minecraft:birch_log",
                itemCount   = 1,
                yield       = 1,
            },
        },
        ["minecraft:torch"] = {
            crafting  = {
                [1]    = { itemName = "minecraft:charcoal", itemCount = 1 },
                [4]    = { itemName = "minecraft:stick", itemCount = 1 },
               yield   = 4
           },
        },
        ["minecraft:birch_planks"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_log", itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:chest"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [2]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [3]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [5]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [7]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [9]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                [10]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                [11]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                yield   = 1
            },
        },
    }
}

function Init(data)
    -- data.location = {x=.., y=.., z=.., dx=.., dy=..}
    -- data.type = "simpel" | "regular"

    -- data verrijken
    data.enterpriseId   = coreutils.NewId()
    data.enterpriseName = db.enterpriseName     -- handig voor debug
    data.topchests      = {}
    data.furnaces       = {}
    data.taskList       = {}
    data.activeTasks    = {}

    -- onze gegevens opslaan
    coredht.SaveData(data, "enterprises", data.enterpriseId)

    -- vacature uitzetten voor een turtle die dit voor ons gaat bouwen
    corejob.NewJob(db.enterpriseName, {enterpriseId=data.enterpriseId}, data.location, coreutils.UniversalTime(), true, true)
end

function ProcessNextTask(data)
    -- task markeren als in behandeling

    --de task in de queue zetten
end

function ProcessNextMessage(data)
    -- berichten die we accepteren
    --
    -- {subject="item list", itemName="minecraft:charcoal", itemCount=64} --> returns one or more item lists needed to craft this
    -- {subject="claim chest" } --> return chest loaction and claims chest (or returns nil when no chest is available)
    -- {subject="free chest" }  --> marks the chest as free for new use
    -- {subject="make item", itemName="minecraft:charcoal", itemCount=64, resource="inventory"|{location tabel} destination="inventory"|{location tabel} } --> will make the items and returns message when complete

    -- retreive next message
    local message = GetNextMessage(data.enterpriseId)
    if type(message) ~= "table" then return end

    -- what to do?
    if message.subject == "item list"   then ProcessItemListMessage(message)    end
    if message.subject == "claim chest" then ProcessClaimChestMessage(message)  end
    if message.subject == "free chest"  then ProcessFreeChestMessage(message)   end
    if message.subject == "make item"   then ProcessMakeItemMessage(message)    end
end

function TaskComplete(task)
    -- moeten we nog iets doen nu de task is afgerond?
    corejob.NewJob(db.enterpriseName, {enterpriseId=task.enterpriseId}, task.location, coreutils.UniversalTime(), false, true)
end

function ProcessItemListMessage(message)
    -- valid message?
    if type(message.itemName) ~= "string" or type(message.itemCount) ~= "number" then coreutils.Warning("Received message without required fields") return nil end

    -- do we know this item?
    local recipe = db.recipes[ message.itemName ]
    if not recipe then coreutils.Warning("No recipe found for "..message.itemName) return nil end

    -- to store our reaction
    local responseData  = { possibilities = {} }

    -- via crafting te maken?
    if recipe.crafting then
        local crafting  = recipe.crafting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( message.itemCount / crafting.yield )

        -- calculate all the needed items
        for i=1,16 do

            -- this slot needed for this recipe?
            if crafting[ i ] then

                -- add to list
                data.itemList[ crafting[ i ].itemName ] = (data.itemList[ crafting[ i ].itemName ] or 0) + times * crafting[ i ].itemCount

            end
        end

        -- calculate the output
        data.output = times * crafting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- via smelting te maken?
    if recipe.smelting then
        local smelting  = recipe.smelting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( message.itemCount / smelting.yield )

        -- add to list
        data.itemList[ smelting.itemName ] = times * smelting.itemCount

        -- calculate the output
        data.output = times * smelting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- send message back
    coremessage.ReplyToMessage(message, responseData)
end

function ProcessClaimChestMessage(message)
    --
end

function ProcessFreeChestMessage(message)
    --
end

function ProcessMakeItemMessage(message)
    --
end

