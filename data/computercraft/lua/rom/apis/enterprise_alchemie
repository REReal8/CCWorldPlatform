-- [ 1] [ 2] [ 3] [ 4]
-- [ 5] [ 6] [ 7] [ 8]
-- [ 9] [10] [11] [12]
-- [13] [14] [15] [16]

local db = {
    enterpriseName  = "enterprise_alchemie",
    recipes        = {
        ["minecraft:stick"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [4]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:charcoal"] = {
            smelting  = {
                itemName    = "minecraft:birch_log",
                itemCount   = 1,
                yield       = 1,
            },
        },
        ["minecraft:torch"] = {
            crafting  = {
                [1]    = { itemName = "minecraft:charcoal", itemCount = 1 },
                [4]    = { itemName = "minecraft:stick", itemCount = 1 },
               yield   = 4
           },
        },
        ["minecraft:birch_planks"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_log", itemCount = 1 },
                yield   = 4
            },
        },
        ["minecraft:chest"] = {
            crafting  = {
                 [1]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [2]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [3]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [5]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [7]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                 [9]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                [10]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                [11]    = { itemName = "minecraft:birch_planks", itemCount = 1 },
                yield   = 1
            },
        },
    }
}

function NewAlchemieSite(data)
    -- data.location = {x=.., y=.., z=.., dx=.., dy=..}
    -- data.type = "simpel" | "regular"
    local enterpriseId   = coreutils.NewId()

    -- data verrijken
    data.enterpriseId   = enterpriseId
    data.enterpriseName = db.enterpriseName
    data.topchests      = {}
    data.furnaces       = {}
    data.taskList       = {}
    data.activeTasks    = {}
    data.craftingTable  = "inventory" -- or {location table} if the site has one

    -- onze gegevens opslaan
    coredht.SaveData(data, "enterprises", data.enterpriseId)

    -- vacature uitzetten voor een turtle die dit voor ons gaat bouwen
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        location        = data.location,                -- locatie van het alchemisten centrum, waar het werk (waarschijnlijk) plaats zal vinden
        startTime       = coreutils.UniversalTime(),
        needTool        = true,
        needTurtle      = true
    })
end

function ProcessNextTask(jobId)
    local enterpriseId      = corejob.GetJobEnterpriseId(jobId)
    local taskList          = coredht.GetData("enterprises", enterpriseId, "taskList")
    local taskId, taskTable = next(taskList)

    -- remove from the task list
    coredht.SaveData(nil, "enterprises", enterpriseId, "taskList", taskId)

    -- execute this command using the task queue
        if taskTable.alchemieType == "craft"    then coretask.AddWork(role_alchemist.Craft,  taskTable)
    elseif taskTable.alchemieType == "smelt"    then coretask.AddWork(role_alchemist.Smelt,  taskTable)
    elseif taskTable.alchemieType == "pickup"   then coretask.AddWork(role_alchemist.Pickup, taskTable)
    end
end

function ProcessNextMessage(jobId)
    -- berichten die we accepteren
    --
    -- {subject="item list", itemName="minecraft:charcoal", itemCount=64} --> returns one or more item lists needed to craft this
    -- {subject="claim chest" } --> return chest loaction and claims chest (or returns nil when no chest is available)
    -- {subject="free chest" }  --> marks the chest as free for new use
    -- {subject="make item", itemName="minecraft:charcoal", itemCount=64, resource="inventory"|{location tabel} } --> will make the items and returns message when complete

    -- retreive next message
    local enterpriseId  = corejob.GetJobEnterpriseId(jobId)
    local message       = coremessage.GetNextMessage(enterpriseId)
    if type(message) ~= "table" then return false end

    -- what to do?
    if message.subject == "item list"   then ProcessItemListMessage(message.data)   end
    if message.subject == "claim chest" then ProcessClaimChestMessage(message.data) end
    if message.subject == "free chest"  then ProcessFreeChestMessage(message.data)  end
    if message.subject == "make item"   then ProcessMakeItemMessage(message.data)   end

    -- we did something, impressive
    return true
end

function TaskComplete(jobId)
    -- get enterprise data
    local enterpriseId  = corejob.GetJobEnterpriseId(jobId)
    local data          = coredht.GetData("enterprises", enterpriseId)

    -- moeten we nog iets doen nu de task is afgerond? nieuwe job aanmaken
    corejob.NewJob({
        enterpriseId    = enterpriseId,
        location        = data.location,                -- locatie van het alchemisten centrum, waar het werk (waarschijnlijk) plaats zal vinden
        startTime       = coreutils.UniversalTime(),
        needTool        = false,                        -- geen bijzondere turtle nodig
        needTurtle      = true
    })
end

function ProcessItemListMessage(message)
    -- valid message?
    if type(message.itemName) ~= "string" or type(message.itemCount) ~= "number" then coreutils.Warning("Received message without required fields") return nil end

    -- do we know this item?
    local recipe = db.recipes[ message.itemName ]
    if not recipe then coreutils.Warning("No recipe found for "..message.itemName) return nil end

    -- to store our reaction
    local responseData  = { possibilities = {} }

    -- via crafting te maken?
    if recipe.crafting then
        local crafting  = recipe.crafting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( message.itemCount / crafting.yield )

        -- calculate all the needed items
        for i=1,16 do

            -- this slot needed for this recipe?
            if crafting[ i ] then

                -- add to list
                data.itemList[ crafting[ i ].itemName ] = (data.itemList[ crafting[ i ].itemName ] or 0) + times * crafting[ i ].itemCount

            end
        end

        -- calculate the output
        data.output = times * crafting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- via smelting te maken?
    if recipe.smelting then
        local smelting  = recipe.smelting
        local data      = { itemList = {}, output = 0 }

        -- how often do we need to perform this recipe?
        local times = math.ceil( message.itemCount / smelting.yield )

        -- add to list
        data.itemList[ smelting.itemName ] = times * smelting.itemCount

        -- calculate the output
        data.output = times * smelting.yield

        -- add to responseData
        responseData.possibilities[#responseData.possibilities + 1] = data
    end

    -- send message back
    coremessage.ReplyToMessage(message, responseData)
end

function ProcessClaimChestMessage(message)
    -- get enterprise data
    local enterpriseId  = coremessage.GetMessageRecipient(message)
    local data          = coredht.GetData("enterprises", enterpriseId)
    local topchests     = data.topchests
    local responseData  = {}

    -- look for a free chest
    for chestId, chest in pairs(topchests) do

        -- is this one free?
        if chest.status == "free" then

            -- claim chest
            coredht.SaveData("claimed", "enterprises", enterpriseId, "topchests", chestId, "status")

            -- opslaan
            responseData    = {
                chestId         = chestId,
                chestLocation   = chest.location
            }

            -- rest van de loop niet meer nodig
            break
        end
    end

    -- send message back
    coremessage.ReplyToMessage(message, responseData)
end

function ProcessFreeChestMessage(message)
    -- voor wie zijn we aan het werk?
    local enterpriseId = coremessage.GetMessageRecipient(message)

    -- check parameters
    if type(message) ~= "table" or type(message.data) ~= table then return nil end

    -- controleren of deze chest wel bestaat
    if coredht.GetData("enterprises", enterpriseId, "topchests", message.data.chestId) then

        -- store new status
        coredht.SaveData("free", "enterprises", enterpriseId, "topchests", message.data.chestId, "status")
    end

    -- geen reactie terug
end

function ProcessMakeItemMessage(message)
    -- message.data.itemName            -- mandatory
    -- message.data.itemCount           -- default: 1
    -- message.data.ingredientsLocation -- "inventory"|{location table}

    -- voor wie zijn we aan het werk?
    local enterpriseId = coremessage.GetMessageRecipient(message)

    -- check parameters
    local messageData               = message.data
    if not messageData.itemName then return nil end                                 -- "minecraft:chest"
    messageData.itemCount           = messageData.itemCount or 1                    -- 8
    messageData.ingredientsLocation = messageData.ingredientsLocation  or "inventory"  -- "inventory"|{location tabel}

    -- see if it's crafting (no waiting time) or smelting (waiting time)
    local craftingRecipe      = db.recipes[ messageData.itemName ].crafting
    local smeltingRecipe      = db.recipes[ messageData.itemName ].smelting

    -- get us a nice fresh id
    local taskId        = coreutils.NewId()

    -- for now just one way supported
    if craftingRecipe then
        coredht.SaveData({
            taskId              = taskId,
            messageId           = coremessage.GetMessageId(message),
            created             = coreutils.UniversalTime(),
            alchemieType        = "craft",
            recipe              = craftingRecipe,
            itemName            = messageData.itemName,
            itemCount           = messageData.itemCount,
            alchemyLocation     = coredht.GetData("enterprises", enterpriseId, "location"), -- location of the alchemy site
            ingredientsLocation = messageData.ingredientsLocation,                          -- location where the ingredients can be found
        }, "enterprises", enterpriseId, "taskList", taskId)

    -- other way around
    elseif smeltingRecipe then



    else
        -- no recipe known for this item!
    end
end

