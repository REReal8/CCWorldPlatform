function T_All()
--    T_PatternsSubstract()
    T_BuildLayer_MetaData()
    T_BuildBlueprint_MetaData()
end

local testStartLocation     = {x= -6, y= 0, z= 1, dx=0, dy=1}

local size_x1 = 4
local size_y1 = 6
local itemName1 = "minecraft:chest"
local itemName2 = "minecraft:torch"
local testBuildLayer1 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = size_x1,
    _size_y     = size_y1,
    _blockList  = {
        mobj_block2d.Block2d:new({_x = 0, _y = 3,                   _name = itemName2}),
        mobj_block2d.Block2d:new({_x = 2, _y = 5, _dx = 0, _dy = 1, _name = itemName1}),
        mobj_block2d.Block2d:new({_x = 3, _y = 0,                   _name = itemName2}),
    },
    _clearRemainingSpace = true,
})

local testBuildLayer2 = mobj_layer_rectangle.LayerRectangle:new({
    _size_x     = 3,
    _size_y     = 3,
    _blockList  = {
        mobj_block2d.Block2d:new({_x = 0, _y = 0, _dx =-1, _dy = 0, _name = itemName1}),
        mobj_block2d.Block2d:new({_x = 0, _y = 1, _dx =-1, _dy = 0, _name = itemName1}),

        mobj_block2d.Block2d:new({_x = 0, _y = 2, _dx = 0, _dy = 1, _name = itemName1}),
        mobj_block2d.Block2d:new({_x = 1, _y = 2, _dx = 0, _dy = 1, _name = itemName1}),

        mobj_block2d.Block2d:new({_x = 1, _y = 0, _dx = 0, _dy =-1, _name = itemName1}),
        mobj_block2d.Block2d:new({_x = 2, _y = 0, _dx = 0, _dy =-1, _name = itemName1}),

        mobj_block2d.Block2d:new({_x = 2, _y = 1, _dx = 1, _dy = 0, _name = itemName1}),
        mobj_block2d.Block2d:new({_x = 2, _y = 2, _dx = 1, _dy = 0, _name = itemName1}),
    },
    _clearRemainingSpace = true,
})

local compact = { compact = true }

function T_BuildLayer_MetaData()
    -- prepare test
    corelog.WriteToLog("* role_builder BuildLayer_MetaData test")
    local buildFromAbove = true
    local buildData = {startpoint = testStartLocation, buildFromAbove = buildFromAbove, layer = testBuildLayer1}

    -- test
    local metaData = role_builder.BuildLayer_MetaData(buildData)
    local deltaZ = 1 if not buildFromAbove then deltaZ = -1 end
    local expectedLocation = coremove.GetRelativeLocation(testStartLocation, 0, 0, deltaZ)
    assert(coremove.IsSameLocation(metaData.location, expectedLocation), "gotten location(="..textutils.serialize(metaData.location, compact)..") not the same as expected(="..textutils.serialize(expectedLocation, compact)..")")
    assert(metaData.needTool, "gotten needTool(="..tostring(metaData.needTool)..") not the same as expected(=true)")
    assert(metaData.needTurtle, "gotten needTurtle(="..tostring(metaData.needTurtle)..") not the same as expected(=true)")
    local expectedFuelNeeded = size_x1*size_y1 - 1
    assert(metaData.fuelNeeded == expectedFuelNeeded, "gotten fuelNeeded(="..metaData.fuelNeeded..") not the same as expected(="..expectedFuelNeeded..")")
    assert(metaData.itemsNeeded[itemName1] == 1, "gotten itemCount(="..metaData.itemsNeeded[itemName1]..") for "..itemName1.."'s not the same as expected(=1)")
    assert(metaData.itemsNeeded[itemName2] == 2, "gotten itemCount(="..metaData.itemsNeeded[itemName2]..") for "..itemName2.."'s not the same as expected(=2)")

    -- cleanup test
end

function T_BuildBlueprint_MetaData()
    -- prepare test
    corelog.WriteToLog("* role_builder BuildBlueprint_MetaData test")
    local testBlueprint = {
        layerList = {
            { startpoint = { x= 0, y= 0, z=  0}, buildFromAbove  = true, layer = testBuildLayer1:copy()},
            { startpoint = { x= 3, y= 3, z= -1}, buildFromAbove  = false, layer = testBuildLayer2:copy()},
        },
        escapeSequence = {
            { x= 3, y= 3, z=  1},
        }
    }
    local blueprintBuildData = {blueprintStartpoint = coremove.GetRelativeLocation(testStartLocation, 6, 0, 0), blueprint = testBlueprint}

    -- test
    local metaData = role_builder.BuildBlueprint_MetaData(blueprintBuildData)
    local expectedLocation = coremove.GetRelativeLocation(testStartLocation, 6, 0, 0)
    assert(coremove.IsSameLocation(metaData.location, expectedLocation), "gotten location(="..textutils.serialize(metaData.location, compact)..") not the same as expected(="..textutils.serialize(expectedLocation, compact)..")")
    assert(metaData.needTool, "gotten needTool(="..tostring(metaData.needTool)..") not the same as expected(=true)")
    assert(metaData.needTurtle, "gotten needTurtle(="..tostring(metaData.needTurtle)..") not the same as expected(=true)")
    local expectedFuelNeeded = 47
    assert(metaData.fuelNeeded == expectedFuelNeeded, "gotten fuelNeeded(="..metaData.fuelNeeded..") not the same as expected(="..expectedFuelNeeded..")")
    assert(metaData.itemsNeeded[itemName1] == 9, "gotten itemCount(="..metaData.itemsNeeded[itemName1]..") for "..itemName1.."'s not the same as expected(=9)")
    assert(metaData.itemsNeeded[itemName2] == 2, "gotten itemCount(="..metaData.itemsNeeded[itemName2]..") for "..itemName2.."'s not the same as expected(=2)")

    -- cleanup test
end

function T_BuildLayer_Task()
    -- prepare test
    corelog.WriteToLog("* role_builder BuildBlueprint_MetaData test")
    local buildData = {startpoint = testStartLocation, buildFromAbove = true, replacePresentObjects = true, layer = testBuildLayer1}

    -- test
    role_builder.BuildRectangularPattern_Task(buildData)

    -- cleanup test
end
