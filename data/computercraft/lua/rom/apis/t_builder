
local pattern1 = {
    deltaX      = 6,
    deltaY      = 6,
    objectList  = {
        { x = 3, y = 3, block = "minecraft:birch_sapling"},
        { x = 3, y = 0, block = "minecraft:torch"},
        { x = 0, y = 3, block = "minecraft:torch"},
    },
    clearRemainingSpace = true,
}
local pattern2 = {
    deltaX      = 1,
    deltaY      = 1,
    objectList  = {
        { x = 0, y = 0, block = "minecraft:birch_sapling"},
    },
    clearRemainingSpace = true,
}
local compact = { compact = true }

function T_All()
    T_IsSamePattern()
    T_CopyPattern()
    T_IsPattern()
--    T_PatternsSubstract()
end

function T_IsPattern()
    -- prepare test
    corelog.WriteToLog("* role_builder IsPattern tests")

    -- test correct pattern
    local isPattern = role_builder.IsPattern(pattern1)
    local expectedIsPattern = true
    assert(isPattern == expectedIsPattern, "gotten IsPattern(="..tostring(isPattern)..") not the same as expected(="..tostring(expectedIsPattern)..")")

    -- test deltaX
    local incorrectPattern = role_builder.CopyPattern(pattern1)
    incorrectPattern.deltaX = nil
    isPattern = role_builder.IsPattern(incorrectPattern)
    expectedIsPattern = false
    assert(isPattern == expectedIsPattern, "gotten IsPattern(="..tostring(isPattern)..") not the same as expected(="..tostring(expectedIsPattern)..")")

    -- test deltaY
    incorrectPattern = role_builder.CopyPattern(pattern1)
    incorrectPattern.deltaY = nil
    isPattern = role_builder.IsPattern(incorrectPattern)
    expectedIsPattern = false
    assert(isPattern == expectedIsPattern, "gotten IsPattern(="..tostring(isPattern)..") not the same as expected(="..tostring(expectedIsPattern)..")")

    -- test clearRemainingSpace
    incorrectPattern = role_builder.CopyPattern(pattern1)
    incorrectPattern.clearRemainingSpace = nil
    isPattern = role_builder.IsPattern(incorrectPattern)
    expectedIsPattern = false
    assert(isPattern == expectedIsPattern, "gotten IsPattern(="..tostring(isPattern)..") not the same as expected(="..tostring(expectedIsPattern)..")")

    -- test clearRemainingSpace not nil
    incorrectPattern = role_builder.CopyPattern(pattern1)
    incorrectPattern.objectList = nil
    isPattern = role_builder.IsPattern(incorrectPattern)
    expectedIsPattern = false
    assert(isPattern == expectedIsPattern, "gotten IsPattern(="..tostring(isPattern)..") not the same as expected(="..tostring(expectedIsPattern)..")")

    -- cleanup test
end

function T_IsSamePattern()
    -- prepare test
    corelog.WriteToLog("* role_builder IsSamePattern tests")

    -- test same
    local isSamePattern = role_builder.IsSamePattern(pattern1, pattern1)
    local expectedIsSamePattern = true
    assert(isSamePattern == expectedIsSamePattern, "gotten IsSamePattern(="..tostring(isSamePattern)..") not the same as expected(="..tostring(expectedIsSamePattern)..")")

    -- test different
    isSamePattern = role_builder.IsSamePattern(pattern1, pattern2)
    expectedIsSamePattern = false
    assert(isSamePattern == expectedIsSamePattern, "gotten IsSamePattern(="..tostring(isSamePattern)..") not the same as expected(="..tostring(expectedIsSamePattern)..")")

    -- test both nil
    isSamePattern = role_builder.IsSamePattern(nil, nil)
    expectedIsSamePattern = true
    assert(isSamePattern == expectedIsSamePattern, "gotten IsSamePattern(="..tostring(isSamePattern)..") not the same as expected(="..tostring(expectedIsSamePattern)..")")

    -- test 1st nil
    isSamePattern = role_builder.IsSamePattern(nil, pattern2)
    expectedIsSamePattern = false
    assert(isSamePattern == expectedIsSamePattern, "gotten IsSamePattern(="..tostring(isSamePattern)..") not the same as expected(="..tostring(expectedIsSamePattern)..")")

    -- test 2nd nil
    isSamePattern = role_builder.IsSamePattern(pattern1, nil)
    expectedIsSamePattern = false
    assert(isSamePattern == expectedIsSamePattern, "gotten IsSamePattern(="..tostring(isSamePattern)..") not the same as expected(="..tostring(expectedIsSamePattern)..")")

    -- cleanup test
end

function T_CopyPattern()
    -- prepare test
    corelog.WriteToLog("* role_builder CopyPattern tests")

    -- test
    local patternCopy = role_builder.CopyPattern(pattern1)
    assert(role_builder.IsSamePattern(patternCopy, pattern1), "gotten CopyPattern(="..textutils.serialize(patternCopy, compact)..") not the same as expected(="..textutils.serialize(pattern1, compact)..")")

    -- cleanup test
end

function T_PatternsSubstract()
    -- prepare test
    corelog.WriteToLog("* role_builder PatternsSubstract tests")

    -- test
    local offset_x = 3
    local offset_y = 3
    local resultPattern = role_builder.PatternsSubstract(pattern1, pattern2, offset_x, offset_y)
    local expectedPattern = {
        deltaX      = 6,
        deltaY      = 6,
        objectList  = {
            { x = 3, y = 0, block = "minecraft:torch"},
            { x = 0, y = 3, block = "minecraft:torch"},
        },
        clearRemainingSpace = true,
    }
    assert(role_builder.IsSamePattern(resultPattern, expectedPattern), "gotten PatternsSubstract(="..textutils.serialize(resultPattern, compact)..") not the same as expected(="..textutils.serialize(expectedPattern, compact)..")")

    -- cleanup test
end
