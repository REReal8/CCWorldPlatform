-- the table that stores the data
local db = {
    x  = 0,
    y  = 0,
    z  = 0,
    dx = 0,
    dy = 1,
}

-- for writing db to file
local filename			= "/db/move.lua"
local writeToFileQueued	= false

-- moving forward, up, down and turning all need 8 ticks (0.40 sec) to complete
-- turtle.select takes 1 tick (0.05 second)

function Init()
	-- read last known location from file
	db = coreutils.ReadTableFromFile(filename)

	-- reset if the location from file was not valid
	if not db or db.x == nil then Reset() end
end

function Setup()
	-- Status()
end

function DoIdle()
	-- used to write to disk, will do no longer
end

function Reset()
    db = {
        x	= 0,
        y	= 0,
        z	= 0,
        dx	= 0,
        dy	= 1,
    }
end

function Status()
	if turtle then
		print( "Location:" )
		print( "x: " .. db.x )
		print( "y: " .. db.y )
		print( "z: " .. db.z )
		print( "Direction:" )
		print( "x: " .. db.dx )
		print( "y: " .. db.dy )
		print( "Fuel:" )
		print( turtle.getFuelLevel() )
	end
end

function Left(c)
	-- init parameter
    c = c or 1
    c = math.floor(c + 0.5) or 1

    -- loop
    for n=1,c do
    	-- remember direction
	    local ox = db.dx
	    local oy = db.dy

		-- do the turn!
	    turtle.turnLeft()

		-- new direction
	    db.dx = -1 * oy
	    db.dy = ox

		-- save new direction right away
		SaveDB()
	end
end

function Right(c)
	-- init parameter
	c = c or 1
	c = math.floor(c + 0.5)

	-- loop
	for n=1,c do

		-- remember direction
		local ox = db.dx
		local oy = db.dy

		-- do the turn!
		turtle.turnRight()

		-- new direction
		db.dx = oy
		db.dy = -1 * ox

		-- save new direction right away
		SaveDB()
	end
end

function Forward(c, force)
	-- init parameter
	c = c or 1
	c = math.floor(c + 0.5)

	-- loop the movement
	for i=1,c do

		-- keep trying
		local tries		= 0
		local success	= turtle.forward()

		-- if it did not work, attack the space in front of us
		while not success and force do

			-- do our magic
			turtle.dig()
			turtle.attack()
			sleep(0.1)

			-- update how often we tried so far
			tries = tries + 1
			if tries > 50 then print("Error: can't move forward.") return false end

			-- retry
			success = turtle.forward()
		end

		-- did we move?
		if success then

			-- update db
			db.x = db.x + db.dx
			db.y = db.y + db.dy

			-- save db
			SaveDB()
		end
	end

	-- done succesfully
	return true
end

function Backward(c, force)
	-- init parameter
	c = c or 1
	c = math.floor(c + 0.5)

	-- loop
	for i=1,c do

		-- can we move backward?
		if turtle.back() ~= true then

			-- can we use force?
			if force then

				-- turn around to attack the block
				Left(2)
				local success = Forward(1, force)
				Right(2)

				-- did it work?
				if not success then return false end
			else
				-- we are not using force, but we cannot move backwards
				return false
			end
		else
			-- update db
			db.x = db.x - db.dx
			db.y = db.y - db.dy

			-- save db
			SaveDB()
		end
	end

	return true
end

function Up(c, force)
	-- init parameter
	c = c or 1
	c = math.floor(c + 0.5)

	-- loop
	for i=1,c do
		local tries = 0
		local success = turtle.up()

		-- did we move up?
		while not success and force do

			-- use force
			turtle.digUp()
			turtle.attackUp()
			sleep(0.1)

			-- update how ofter we tried
			tries = tries + 1
			if tries>50 then print("Error: can't move up.") return false end

			-- give it another try
			success = turtle.up()
    	end

		-- successfull?
		if success then

			-- update location
			db.z = db.z + 1

			-- dave location
			SaveDB()
		end
	end

	-- we did it!
	return true
end

function Down(c, force)
	-- init parameter
	c = c or 1
	c = math.floor(c + 0.5)

	-- loop
	for i=1,c do
		local tries = 0
		local success = turtle.down()

		-- did we go down?
		while not success and force do

			-- let's use force
			turtle.digDown()
			turtle.attackDown()
			sleep(0.2)

			-- update how often we tried
			tries = tries + 1
			if tries>50 then print("Error: can't move down.") return false end

			-- try again
			success = turtle.down()
		end

		-- did we managed to go down?
		if success then

			-- update location
			db.z = db.z - 1

			-- save location
			SaveDB()
		end
	end

	-- we went down
	return true
end

function ToBottom()
	-- simple loop going down, without force
  	while turtle.down() do

		-- keep track of our location
		db.z = db.z - 1

		-- save our location
		SaveDB()
	end

	-- will always work, might have done zero steps down though
  	return true
end
--[[
function NeedTorch()
  local x = db.x
  local y = db.y
  local z = db.z

  if y/6 == math.floor(y/6) and z/4 == math.floor(z/4) then
    local bonus
    if y/12 == math.floor(y/12) then
      bonus = 0
    else
      bonus = 3
    end
    return ((x+bonus)/6) == math.floor((x+bonus)/6)
  else
    return false
  end
end
function NeedSappling()
  local x = db.x
  local y = db.y + 3
  local z = db.z

  if y/6 == math.floor(y/6) and z/4 == math.floor(z/4) then
    local bonus
    if y/12 == math.floor(y/12) then
      bonus = 0
    else
      bonus = 3
    end
    return ((x+bonus)/6) == math.floor((x+bonus)/6)
  else
    return false
  end
end
--]]
function GetLocation()
	return {
		x = db.x,
		y = db.y,
		z = db.z,
		dx = db.dx,
		dy = db.dy,
	}
end

function GetLocationFront( c )
	c = c or 1
	return {
		x = db.x + c * db.dx,
		y = db.y + c * db.dy,
		z = db.z,
		dx = db.dx,
		dy = db.dy,
	}
end

function GetLocationUp( c )
	c = c or 1
	return {
		x = db.x,
		y = db.y,
		z = db.z + c,
		dx = db.dx,
		dy = db.dy,
	}
end

function GetLocationDown( c )
	c = c or 1
	return {
		x = db.x,
		y = db.y,
		z = db.z - c,
		dx = db.dx,
		dy = db.dy,
	}
end

function SetLocation(location)
	-- set to memory
	db = {
		x	= location.x,
		y	= location.y,
		z	= location.z,
		dx	= location.dx,
		dy	= location.dy
	}

	-- save to file
	SaveDB()
end

function CopyLocation(location)
	return {
		x	= location.x,
		y 	= location.y,
		z 	= location.z,
		dx  = location.dx,
		dy  = location.dy
	}
end

function IsSameLocation(a, b)	return a.x  == b.x  and a.y  == b.y  and a.z == b.z	end
function IsSameDirection(a, b)	return a.dx == b.dx and a.dy == b.dy			    end

function GetDivergentDirection(location, dx, dy)
	return {
		x	= location.x,
		y 	= location.y,
		z 	= location.z,
		dx  = dx,
		dy  = dy
	}
end

function GetRelativeLocation(location, addX, addY, addZ)
	return {
		x	= location.x + addX,
		y 	= location.y + addY,
		z 	= location.z + addZ,
		dx  = location.dx,
		dy  = location.dy
	}
end

function GetRelativeLocationFront(location, steps)
	-- check input
	if type(location) ~= "table" or location.x == nil or location.y == nil or location.z == nil or location.dx == nil or location.dy == nil then return location end

	-- default
	steps	= steps or 1

	-- done before we started :-)
	return {
		x   = location.x + steps * location.dx,
		y   = location.y + steps * location.dy,
		z   = location.z,
		dx  = location.dx,
		dy  = location.dy,
	}
end

function GetRelativeLocationUp(location, steps)
	-- default
	steps	= steps or 1

	-- done before we started :-)
	return {
		x   = location.x,
		y   = location.y,
		z   = location.z + steps,
		dx  = location.dx,
		dy  = location.dy,
	}
end

function GetRelativeLocationDown(location, steps)
	-- default
	steps	= steps or 1

	-- done before we started :-)
	return {
		x	= location.x,
		y	= location.y,
		z   = location.z - steps,
		dx  = location.dx,
		dy  = location.dy,
	}
end

function GetRelativeLocationLeft(location, steps)
	-- default
	steps	= steps or 1
	steps	= math.fmod(steps, 4)

	-- make a deep copy of the location table
	local newLocation	= {
		x	= location.x,
		y	= location.y,
		z   = location.z,
		dx  = location.dx,
		dy  = location.dy,
	}

	-- do as requested
	for turn=1, steps do
		-- don't forget those
		local oldX		= newLocation.dx
		local oldY		= newLocation.dy

		-- new direction
		newLocation.dx	= -1 * oldY
		newLocation.dy	= oldX
	end

	-- this is where we ended
	return newLocation
end

function GetRelativeLocationRight(location, steps)
	-- default
	steps	= steps or 1
	steps	= math.fmod(steps, 4)

	-- make a deep copy of the location table
	local newLocation	= {
		x	= location.x,
		y	= location.y,
		z   = location.z,
		dx  = location.dx,
		dy  = location.dy,
	}

	-- do as requested
	for turn=1, steps do
		-- don't forget those
		local oldX		= newLocation.dx
		local oldY		= newLocation.dy

		-- new direction
		newLocation.dx	= oldY
		newLocation.dy	= -1 * oldX
	end

	-- this is where we ended
	return newLocation
end

function GetDepth()
	return db.z
end

function Above( t )
	return {
		x = t.x,
		y = t.y,
		z = t.z + 1,
		dx = t.xy,
		dy = t.dy,
	}
end

function Nextto( target, pref )
	local temp = target
	pref = pref or "x"

	-- maybe the y axis is preffered
	if pref == "y" and db.y ~= target.y then
		if db.y < target.y	then temp.y = temp.y - 1
							else temp.y = temp.y + 1
		end
	-- maybe the x axis is usable
	elseif db.x ~= target.x then
		if db.x < target.x	then temp.x = temp.x - 1
							else temp.x = temp.x + 1
		end
	-- maybe the y axis anyways
	elseif db.x ~= target.x then
		if db.y < target.y	then temp.y = temp.y - 1
							else temp.y = temp.y + 1
		end
	else
		print("Cannot move next to, already same x and same y")
	end

	return temp -- BUG? is temp meant here???
end

function Below( t )
	return {
		x = t.x,
		y = t.y,
		z = t.z - 1,
		dx = t.xy,
		dy = t.dy,
	}
end

function MoveTo(t, force)
	if t == nil then
		print("Cannot move to nil location")
		corelog.WriteToLog("function coremove.MoveTo: Cannot move to nil location")
		corelog.WriteToLog(debug.traceback())
		return false
	end

	-- might be partly given coordinates, enricht with the current coordinates
	t.x  = t.x  or db.x
	t.y  = t.y  or db.y
	t.z  = t.z  or db.z
	t.dx = t.dx or db.dx
	t.dy = t.dy or db.dy

	-- might be a difficult route, try more times
	for i=1,3 do
		-- first, get to the right z
		if t.z > db.z	then Up(t.z - db.z, force) end

		-- next is the right y
		if t.y > db.y then TurnTo({ dx = 0, dy =  1 })
		elseif t.y < db.y then TurnTo({ dx = 0, dy = -1 })
		end
		Forward( math.abs( t.y - db.y ), force )

		-- next is the right x
				if t.x > db.x then TurnTo({ dx =  1, dy = 0 })
		elseif t.x < db.x then TurnTo({ dx = -1, dy = 0 })
		end
		Forward( math.abs( t.x - db.x ), force )

		-- now go down
		if t.z < db.z then Down(db.z - t.z, force) end
	end
end

function TurnTo( t )
	if t == nil then
		print("Cannot turn to nil location")
		corelog.WriteToLog("function coremove.TurnTo: Cannot turn to nil location")
		corelog.WriteToLog(debug.traceback())
		return false
	end

	-- check input
	if t.dx * t.dy ~= 0 or math.abs( t.dx + t.dy ) ~= 1 then
		print("move.TurnTo( "..t.dx..", "..t.dy.."): Invalid direction")
		return false
	end

	-- make a left turn?
	if t.dx == -1 * db.dy and t.dy == db.dx then
		Left(1)
	else
		-- make the turn right
		while t.dx ~= db.dx or t.dy ~= db.dy do
			Right(1)
		end
	end
end

function GoTo( t, force )
	MoveTo( t, force )
	TurnTo( t )
end

-- local functions
function SaveDB()
    -- save the db table to a file
    if not writeToFileQueued then

        -- now it is in the queue
        writeToFileQueued = true

        -- add to the work queue
        coretask.AddWork(SaveDBToFile)
    end
end

function SaveDBToFile()
    -- no longer in the queue since we are doing it now
    writeToFileQueued = false

    -- save the db table to a file (this may take some time with larger dht's)
    coreutils.WriteToFile(filename, db, "overwrite")
end