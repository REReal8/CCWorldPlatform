function T_dummy()
    corelog.WriteToLog("Running T_()")
    print("!")
end

function T_enterprise_factory_buildNewSite()
    enterprise_factory.BuildNewSite({location={x=12, y= 0, z= 1, dx=0, dy=1}, type="basic"}, "coreassignment.Dummy_Callback", {})
end

function T_enterprise_storage_buildAndStartNewSite()
    enterprise_storage.BuildAndStartNewSite({location={x=12, y=12, z= 1, dx=0, dy=1}, type="silo", siloType="basic", topChests=2, layers=2}, "coreassignment.Dummy_Callback", {})
end

function T_enterpise_colonization()
    -- test CreateNewWorld
    corelog.WriteToLog("# Test CreateNewWorld")
    local callbackFunction = "t_main.GoHomeCallBack"
    local callbackData = {}

    corelog.WriteToLog("T_enterpise_colonization calling CreateNewWorld("..callbackFunction..", "..textutils.serialize(callbackData)..")")
    enterprise_colonization.CreateNewWorld(callbackFunction, callbackData)
end

function T_enterprise_test()
    -- init
    local testArg = 20

    -- test service 1
    corelog.WriteToLog("# Test 1")
    local testResult = enterprise_test.TestPureLogicService(testArg)
    corelog.WriteToLog("  TestPureLogicService("..testArg..") => " .. testResult .. ".")

    -- test service 2
    corelog.WriteToLog("# Test 2")
    enterprise_test.TestServiceWithAssignment(testArg)

    -- test service 3
    corelog.WriteToLog("# Test 3")
    local callbackFunction = "t_main.Func1_Callback"
    enterprise_test.TestServiceWithAssignmentAndCallback(testArg, callbackFunction)

    -- test service 4
    corelog.WriteToLog("# Test 4")
    local callbackArgumentTable = {"calbackArg1"}
    enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments(testArg, callbackFunction, callbackArgumentTable)
end

function T_enterprise_projects()
    -- init
    local testArgValue = 20
    local projectDefinition = {
        services    = {
            { serviceName = "enterprise_test.TestPureLogicService", async = false, input = {
                { keyName = "testArg1", valueSource = 0, sourceKey = "testArgSource" },
            }},
            { serviceName = "enterprise_test.TestServiceWithAssignmentAndCallbackAndArguments", async = true, input = {
                { keyName = "testArg2", valueSource = 0, sourceKey = "testArgSource" },
            }},
            { serviceName = "enterprise_test.TestPureLogicService", async = false, input = {
                { keyName = "testArg3", valueSource = 0, sourceKey = "testArgSource" },
            }},
        },
        returnData  = {
            { keyName = "testBArg0", valueSource = 0, sourceKey = "testArgSource" },
            { keyName = "testBArg1", valueSource = 1, sourceKey = "testArg1" },
            { keyName = "testBArg2", valueSource = 2, sourceKey = "testArg2" },
            { keyName = "testBArg3", valueSource = 3, sourceKey = "testArg3" },
        }
    }
    local projectData = { testArgSource = testArgValue }
    local callbackFunction = "t_main.Func1_Callback"
    local callbackData = { "rootCallBackData" }

    enterprise_projects.StartProject(projectDefinition, projectData, callbackFunction, callbackData)
end

function Func1_Callback(callbackArgumentTable, taskResult)
    corelog.WriteToLog("t_main.Func1_Callback("..textutils.serialise(callbackArgumentTable)..", "..textutils.serialise(taskResult)..") called")
end

function GoHomeCallBack(callbackArgumentTable, taskResult)
    corelog.WriteToLog("t_main.GoHomeCallBack("..textutils.serialise(callbackArgumentTable)..", "..textutils.serialise(taskResult)..") called")

    t_move.T_GoHome()
end





