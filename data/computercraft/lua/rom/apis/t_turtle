local itemsQuery = {
    ["minecraft:birch_log"] = 1,
    ["minecraft:torch"]     = 5,
}

local callbackFunction = "t_main.Func1_Callback"
local callbackData = {"some callback data"}

function T_TransferItemsFromTo_Turtles()
    corelog.WriteToLog("* Test TransferItemsFromTo_ASrv between turtles:")
    -- create transferData
    local sourceItemsLocator = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = os.getComputerID(), itemsQuery = itemsQuery }).itemsLocator
    local destinationStorageLocator = enterprise_turtle.GetHostLocator_SSrv({ }).hostLocator
    local transferData = {
        sourceItemsLocator          = sourceItemsLocator,
        destinationStorageLocator   = destinationStorageLocator,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_isp.TransferItemsFromTo_ASrv("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    enterprise_isp.TransferItemsFromTo_ASrv(transferData, callbackFunction, callbackData)
end

function T_Can_ProvideItems()
    corelog.WriteToLog("* Test Can_ProvideItems_QSrv for turtles:")
    -- create transferData
    local itemsLocator = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = os.getComputerID(), itemsQuery = itemsQuery }).itemsLocator
    local queryData = {
        itemsLocator = itemsLocator,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_isp.Can_ProvideItems_QSrv("..textutils.serialize(queryData)..")")
    local result = enterprise_isp.Can_ProvideItems_QSrv(queryData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end
