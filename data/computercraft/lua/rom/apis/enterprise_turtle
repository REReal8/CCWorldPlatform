local db = {
    hostName    = "turtle",
}


--[[
    The Turtle enterprise provides services related to turtles.

    This enterprise is an Item Service Host (ISH), hence it provides the mandatory services and functions for an ISH (like e.g. ItemsAvailableVia_SSrv, GetItemsIntoTurtle_ASrv and PutItemsFromTurtle_ASrv).

    Furthermore it provides the following additional services
        IsTurtleURL_QSrv    - provide if URL is of a turtle
        GetTurtleURL_SSrv   - provide the URL of a turtle
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function GetISHURL()
    --[[
        This sync public ISH function provides the (base) URL of this ISH.

        Return value:
            ishURL                  - (table) URL of this ISH

        Parameters:
            nil
    --]]

    local hostURL = url.URLClass:new()
    hostURL:setHost(db.hostName)

    return hostURL
end

function GetTurtleURL_SSrv(serviceData)
    --[[
        This sync public services provides the URL of (the items in) a turtle in the ISH.

        Return value:
                                    - (table)
                success             - (boolean) wether the URL was correctly obtained
                url                 - (table) URL of the turtle

        Parameters:
            serviceData             - (table) data for this service
                turtleId            - (number) optional id of the turtle (if none is provided the current turtle computer id is used)
                itemQuery           - (table) optional items to locate in turtle
    --]]

    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_isp.GetTurtletURL: Invalid serviceData input.") return {success = false} end
    local turtleId = serviceData.turtleId or os.getComputerID()
    local itemQuery = serviceData.itemQuery or {}

    -- construct URL
    local turtleURL = GetISHURL()
    turtleURL:setPort(turtleId)
    turtleURL:setQuery(itemQuery)

    -- end
    local result = {
        success = true,
        url = turtleURL,
    }
    return result
end

function IsTurtleURL_QSrv(queryData)
    --[[
        This sync public service answers the question if a URL is that of a turtle.
        
        Return value:
                                    - (table)
                success             - (boolean) wether the answer to the question is true

        Parameters:
            queryData               - (table) data about the query
                aURL                - (table) a URL that needs to be queried
    --]]

    -- check input
    if type(queryData) ~= "table" or type(queryData.aURL) ~= "table" then
        corelog.Error("enterprise_turtle.IsTurtleURL_QSrv: Invalid queryData input.")
        return {success = false}
    end

    -- check if of a turtle
    local aURL = url.URLClass:new(queryData.aURL)
    local host = aURL:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_turtle.IsTurtleURL_QSrv: Invalid host input in URL (="..aURL:getURI()..").") return {success = false} end
    if host == db.hostName then
        return {success = true} -- ToDo: consider distinquishing between service failure and question answer
    else
        return {success = false}
    end
end

function ItemsAvailableVia_SSrv(queryData)
    --[[
        This sync public ISH service queries this enterprise for the availability of items. The ISH and query are specified by the "base" (i.e. "ccwprp://host:port/path")
        and "query" component (i.e. `?itemName=itemCount`) of an URL.

        Return value:
                                    - (table)
                success             - (boolean) whether all the queried items are available via this ISH.

        Parameters:
            queryData               - (table) data about the query
                itemQueryURL        - (table) a URL stating the items availability that needs to be queried
                                        (the "base" component of the URL specifies this ISH)
                                        (the "query" component of the URL specifies the items to query for)
    --]]

    -- check input
    if type(queryData) ~= "table" or type(queryData.itemQueryURL) ~= "table" then
        corelog.Error("enterprise_isp.ItemsAvailableVia_SSrv: Invalid queryData input.")
        return {success = false}
    end

    -- check itemQueryURL is for this enterprise
    local itemQueryURL = url.URLClass:new(queryData.itemQueryURL)
    local itemQueryIsTurtle = IsTurtleURL_QSrv({ aURL = itemQueryURL})
    if not itemQueryIsTurtle.success then corelog.Error("enterprise_turtle.ItemsAvailableVia_SSrv: Invalid itemQueryURL (="..itemQueryURL:getURI()..").") return {success = false} end

    -- select turtle
    local currentTurtleId = os.getComputerID()
    local itemQueryTurtleId = itemQueryURL:getPort()
    if itemQueryTurtleId and currentTurtleId ~= itemQueryTurtleId then corelog.Error("enterprise_turtle.ItemsAvailableVia_SSrv: Querying items in one (id="..itemQueryTurtleId..") turtle from another (id="..currentTurtleId..") not implemented (?yet).") return {success = false} end

    -- query turtle for items
    local query = itemQueryURL:getQuery()     -- e.g. {"minecraft:torch"=5, "minecraft:birch_log"=3}
    local inventory = coreinventory.GetInventoryDetail()
    for itemName, itemCount in pairs(query) do
        if type(itemName) ~= "string" then corelog.Error("enterprise_turtle.ItemsAvailableVia_SSrv: itemName of wrong type = "..type(itemName)..".") return {success = false} end
        if type(itemCount) ~= "number" then corelog.Error("enterprise_turtle.ItemsAvailableVia_SSrv: itemCount of wrong type = "..type(itemName)..".") return {success = false} end

        local inventoryCount = inventory.items[itemName]
        if inventoryCount == nil or inventoryCount < itemCount then
            corelog.WriteToLog("enterprise_turtle.ItemsAvailableVia_SSrv: not enough (="..itemCount..") "..itemName.." items in inventory (="..(inventoryCount or 0)..").") return {success = false}
        end
    end

    -- end
    return {success = true}
end

function GetItemsIntoTurtle_ASrv(transferData, callback, callbackData)
    --[[
        This async public ISH service ensures items are gathered in the ISH and transferred to the inventory of a turtle.

        Return value:
            nil 

        Async service return value (to callback):
                                - (table)
                success         - (boolean) whether the items were succesfully transferred to a turtle
                turtleURL       - (table) a URL stating the turtle and the items it has gotton in it's inventory

        Parameters:
            transferData        - (table) data about the transfer
                sourceURL       - (table) a URL stating where the items that need transfer can be located (in/ by this ISH)
                                    (the "query" component of the URL specifies the items to be transferred)
            callback            - (string) name of function to call once service is ready
            callbackData        - (table) data to supply to callback function                                                
    --]]

    -- check input
    if type(transferData) ~= "table" or type(transferData.sourceURL) ~= "table" then
        corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Invalid transferData input.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    if type(callback) ~= "string" then 
        corelog.Error("enterprise_isp.GetItemsIntoTurtle_ASrv: Invalid callback function.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    callbackData = callbackData or {}

    -- check source is for this enterprise
    local sourceURL = url.URLClass:new(transferData.sourceURL) -- needed in case service was called indirectly via a loadstring (hence use of serialize)
    local sourceIsTurtle = IsTurtleURL_QSrv({ aURL = sourceURL})
    if not sourceIsTurtle.success then corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Invalid turtle source URL (="..sourceURL:getURI()..").") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- check turtle id's
    local currentTurtleId = os.getComputerID()
    local sourceTurtleId = sourceURL:getPort()
    if sourceTurtleId and currentTurtleId ~= sourceTurtleId then
        corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Get items from one (id="..sourceTurtleId..") turtle to another (id="..currentTurtleId..") not implemented (?yet).")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- do the (virtual) transfer

    -- create (partial) output turtleURL
    local getURLResult = GetTurtleURL_SSrv({turtleId = currentTurtleId})
    if not getURLResult.success then corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Failed creating turtleURL.") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local turtleURL = getURLResult.url
    if turtleURL == nil then corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Invalid turtleURL created.") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- check if current turtle has the requested items in it's inventory
    -- ToDo: consider also checking if items are available (i.e. not reserved)
    local sourceQuery = sourceURL:getQuery()     -- e.g. {"minecraft:torch"=5, "minecraft:birch_log"=3}
    local inventory = coreinventory.GetInventoryDetail()
    for itemName, itemCount in pairs(sourceQuery) do
        if type(itemName) ~= "string" then corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: itemName of wrong type = "..type(itemName)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(itemCount) ~= "number" then corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: itemCount of wrong type = "..type(itemName)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end

        local inventoryCount = inventory.items[itemName]
        if inventoryCount == nil or inventoryCount < itemCount then
            corelog.WriteToLog("enterprise_turtle.GetItemsIntoTurtle_ASrv: not enough (="..itemCount..") "..itemName.." items in inventory (="..(inventoryCount or 0)..").") return coreutils.DoCallback(callback, callbackData, {success = false})
        end
    end
    turtleURL:setQuery(sourceQuery)

    -- end
    local result = {success = true, turtleURL = turtleURL}
    return coreutils.DoCallback(callback, callbackData, result)
end

function PutItemsFromTurtle_ASrv(transferData, callback, callbackData)
    --[[
        This async public ISH service ensures items are transferred from the inventory of a turtle towards the ISH.

        An ISH should take special care the transfer from the turtle inventory gets priority over other assignments to the turtle.

        Return value:
            nil 

        Async service return value (to callback):
                                - (table)
                success         - (boolean) whether the items were succesfully transferred to the ISH.

        Parameters:
            transferData        - (table) data about the transfer
                turtleSourceURL - (table) a URL stating the turtle and items in it's inventory that need to be transferred
                destinationURL  - (table) a URL stating where the items need to be transferred to (in/ by this ISH)
            callback            - (string) name of function to call once service is ready
            callbackData        - (table) data to supply to callback function                                                
    --]]

    -- check input
    if type(transferData) ~= "table" or type(transferData.turtleSourceURL) ~= "table" or type(transferData.destinationURL) ~= "table" then
        corelog.Error("enterprise_isp.PutItemsFromTurtle_ASrv: Invalid transferData input.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    if type(callback) ~= "string" then 
        corelog.Error("enterprise_isp.PutItemsFromTurtle_ASrv: Invalid callback function.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    callbackData = callbackData or {}

    -- check source is a turtle
    local turtleSourceURL = url.URLClass:new(transferData.turtleSourceURL) -- needed in case service was called indirectly via a loadstring (hence use of serialize)
    local sourceIsTurtle = IsTurtleURL_QSrv({ aURL = turtleSourceURL})
    if not sourceIsTurtle.success then corelog.Error("enterprise_turtle.PutItemsFromTurtle_ASrv: Invalid turtle source URL (="..turtleSourceURL:getURI()..").") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- check destination is for this enterprise
    local destinationURL = url.URLClass:new(transferData.destinationURL) -- needed in case service was called indirectly via a loadstring (hence use of serialize)
    local destinationIsTurtle = IsTurtleURL_QSrv({ aURL = destinationURL})
    if not destinationIsTurtle.success then corelog.Error("enterprise_turtle.PutItemsFromTurtle_ASrv: Invalid destination URL (="..destinationURL:getURI()..").") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- check turtle id's
    local sourceTurtleId = turtleSourceURL:getPort()
    if sourceTurtleId == nil then corelog.Error("enterprise_turtle.PutItemsFromTurtle_ASrv: Invalid turtle source input (i.e., no turtle id).") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local currentTurtleId = os.getComputerID()
    if currentTurtleId ~= sourceTurtleId then
        corelog.Error("enterprise_turtle.GetItemsIntoTurtle_ASrv: Put items from one (id="..sourceTurtleId..") turtle to another (id="..currentTurtleId..") not implemented (?yet).")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- do the (virtual) transfer

    -- check if destination/source/current turtle has the items in it's inventory
    local sourceQuery = turtleSourceURL:getQuery()     -- e.g. {"minecraft:torch"=5, "minecraft:birch_log"=3}
    local inventory = coreinventory.GetInventoryDetail()
    for itemName, itemCount in pairs(sourceQuery) do
        if type(itemName) ~= "string" then corelog.Error("enterprise_turtle.PutItemsFromTurtle_ASrv: itemName of wrong type = "..type(itemName)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
        if type(itemCount) ~= "number" then corelog.Error("enterprise_turtle.PutItemsFromTurtle_ASrv: itemCount of wrong type = "..type(itemName)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end

        local inventoryCount = inventory.items[itemName]
        if inventoryCount == nil or inventoryCount < itemCount then
            corelog.WriteToLog("enterprise_turtle.PutItemsFromTurtle_ASrv: not enough (="..itemCount..") "..itemName.." items in inventory (="..(inventoryCount or 0)..").") return coreutils.DoCallback(callback, callbackData, {success = false})
        end
    end

    -- end
    return coreutils.DoCallback(callback, callbackData, {success = true})
end

function DoAssignment_ASrv(serviceData, callback, callbackData)
    --[[
        This async public service wraps around a turtle assignment. It first retrieves meta data from a metadata function, then it 
            adds an assignment for the task function.

        A task function takes one parameter
            taskData            - (table) data to supply to task function to be able to perform the task
        and return
            taskResult          - (table) with return data of the task function
        The task function should exist in the file <roleFilename> and have the function name <taskName>.."_Task".

        A metadata function takes one parameter
            taskData            - (table) data to supply to metadata function to be able to determine the metadata of the task
        and return
            taskMetaData        - (table) with metadata of the task function
        The metadata function should exist in the file <roleFilename> and have the name <taskName>.."_MetaData".

        Async service return value (to callback):
            task result         - (table) results of the task function

        Parameters:
            serviceData         - (table) data for this service
                roleFilename    - (string) name of the role file implementing the task
                taskName        - (string) name of the task to execute

                <all parameters for the taskData table to supply to task function to be able to perform the Task>
            callback            - (string) name of function to call once service (assignment) is ready
            callbackData        - (table) data to supply to callback function
    ]]

    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_turtle.DoAssignment_ASrv: Invalid serviceData") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local roleFilename = serviceData.roleFilename
    if type(roleFilename) ~= "string" then corelog.Error("enterprise_turtle.DoAssignment_ASrv: Invalid roleFilename") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local taskName = serviceData.taskName
    if type(taskName) ~= "string" then corelog.Error("enterprise_turtle.DoAssignment_ASrv: Invalid taskName") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    -- note: taskData parameters are not checked as this is a generic service. Checking of these parameters should be performed in metadata and task functions.

    -- determine taskData
    local taskData = serviceData -- ToDo: consider deep copy skipping roleFilename and taskName

    -- get metaData
    local metaDataFunctionName = roleFilename.."."..taskName.."_MetaData"
    local metaData = coreutils.DoSyncService(metaDataFunctionName, taskData)

    -- add assignment
    local taskFunctionName = roleFilename.."."..taskName.."_Task"
    corelog.WriteToLog(">Doing Assignment "..taskFunctionName..".")
    coreassignment.AddAssignment(metaData, taskFunctionName, taskData, callback, callbackData)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

