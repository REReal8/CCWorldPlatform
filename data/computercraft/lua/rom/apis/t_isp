local queryPartURI = "?minecraft:birch_log=1&minecraft:torch=5"

local storageURI = "ccwprp://storage"
local storageQueryURI = storageURI.."/site=2/outputchest=4/"..queryPartURI
local factoryInputChestURI = "ccwprp://factory/site=3/inputchest=2"
local factoryOutputChestURI = "ccwprp://factory/site=3/ouputchest=1"

local callbackFunction = "t_main.Func1_Callback"
local callbackData = {"some callback data"}

--local sourceChestId = "0:1" -- ToDo: consider getting from elsewhere
--local destinationChestId = "0:2" -- ToDo: consider getting from elsewhere

function T_TransferItemsFromTo_Chests() -- ToDo: consider removing/ changing as partly already present in t_chests
    corelog.WriteToLog("* Test TransferItemsFromTo between chests:")

    -- create project definition
    local transferItemsBetweenChestsProject = {
        services    = {
            { serviceName = "enterprise_projects.StartProject", async = true, input = {
                { keyName = "projectDefinition" , valueSource = 0, sourceKey = "projectDefinition1" },
                { keyName = "projectInputData" , valueSource = 0, sourceKey = "projectInputData1" },
            }},
            { serviceName = "enterprise_projects.StartProject", async = true, input = {
                { keyName = "projectDefinition" , valueSource = 0, sourceKey = "projectDefinition2" },
                { keyName = "projectInputData" , valueSource = 0, sourceKey = "projectInputData2" },
            }},
            { serviceName = "enterprise_projects.AllTrue", async = false, input = {
                { keyName = "success1"  , valueSource = 1, sourceKey = "success" },
                { keyName = "success2"  , valueSource = 2, sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success", valueSource = 3, sourceKey = "success" },
        }
    }
    local serviceData = {
        projectDefinition = transferItemsBetweenChestsProject,
        projectInputData = {
            -- chest 1
            projectDefinition1 = t_chests.GetRegisterAndUpdateChestProject(),
            projectInputData1 = {
                chestLocation        = {x= 14, y= 17, z= 1, dx=0, dy=1},
                chestAccessDirection = "top",
            },

            -- chest 2
            projectDefinition2 = t_chests.GetRegisterAndUpdateChestProject(),
            projectInputData2 = {
                chestLocation        = {x= 16, y= 17, z= 1, dx=0, dy=1},
                chestAccessDirection = "back",
            },
        },
    }

    -- start project
    enterprise_projects.StartProject(serviceData, callbackFunction, callbackData)

    --[[
    -- create transferData
    local sourceURL = enterprise_chests.GetChestURL({chestId = sourceChestId}).url
    sourceURL:setQueryURI(queryPartURI)
    local destinationURL = enterprise_chests.GetChestURL({chestId = destinationChestId}).url
    local transferData = {
        sourceURL =  sourceURL,
        destinationURL = destinationURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_isp.TransferItemsFromTo("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    enterprise_isp.TransferItemsFromTo(transferData, callbackFunction, callbackData)
    ]]
end

function T_ISPUsingProject()
    -- create project definition
    local projectInputData = {
        itemsSourceURL = url.URLClass:newFromURI(storageQueryURI),
        itemsLocalInputURL = url.URLClass:newFromURI(factoryInputChestURI),
        itemsLocalOutputURL = url.URLClass:newFromURI(factoryOutputChestURI),
        itemsDestinationURL = url.URLClass:newFromURI(storageURI)
     }
    local aTypicalServiceUsingItemsProject = {
        services    = {
            { serviceName = "enterprise_isp.TransferItemsFromTo", async = true, input = {
                { keyName = "sourceURL"         , valueSource = 0, sourceKey = "itemsSourceURL" },
                { keyName = "destinationURL"    , valueSource = 0, sourceKey = "itemsLocalInputURL" },
            }},

            -- other services (that e.g. could require items in a turtle's iventory) to implement the typical service

            { serviceName = "enterprise_isp.TransferItemsFromTo", async = true, input = {
                { keyName = "sourceURL"         , valueSource = 0, sourceKey = "itemsLocalOutputURL" },
                { keyName = "destinationURL"    , valueSource = 0, sourceKey = "itemsDestinationURL" },
            }},
            { serviceName = "enterprise_projects.AllTrue", async = false, input = {
                { keyName = "success1"          , valueSource = 1, sourceKey = "success" },
                { keyName = "successN"          , valueSource = 2 --[[ likely higher]], sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success"               , valueSource = 3 --[[ likely higher]], sourceKey = "success" },
        }
    }
    local serviceData = {
        projectDefinition = aTypicalServiceUsingItemsProject,
        projectInputData = projectInputData,
    }

    -- call test method
    enterprise_projects.StartProject(serviceData, callbackFunction, callbackData)
end

function T_TransferItemsFromTo_Turtles()
    corelog.WriteToLog("* Test TransferItemsFromTo between turtles:")
    -- create transferData
    local sourceURL = enterprise_turtle.GetISHURL()
    sourceURL:setQueryURI(queryPartURI)
    local destinationURL = enterprise_turtle.GetISHURL()
    local transferData = {
        sourceURL =  sourceURL,
        destinationURL = destinationURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_isp.TransferItemsFromTo("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    enterprise_isp.TransferItemsFromTo(transferData, callbackFunction, callbackData)
end

function T_ItemsAvailableVia_Turtle()
    corelog.WriteToLog("* Test ItemsAvailableVia for turtles:")
    -- create transferData
    local queryURL = enterprise_turtle.GetISHURL()
    queryURL:setQueryURI(queryPartURI)
    local queryData = {
        itemQueryURL = queryURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_isp.ItemsAvailableVia("..textutils.serialize(queryData)..")")
    local result = enterprise_isp.ItemsAvailableVia(queryData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end
