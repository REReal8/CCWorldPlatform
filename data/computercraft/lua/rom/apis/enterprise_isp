local db = {
}

--[[
    The Item Service Provider (ISP) is an enterprise that provides services to handle items. From the perspective of an enterprise that needs
    items to be handled acros (possibly) multiple enterprises the ISP can be seen as a single(ton) entry point (or hub or router) for handling 
    those items.

    The ISP provides the following services
        ItemsAvailableVia        - providing if a set of items are available at an itemQueryURL
        TransferItemsFromTo     - transferring items from a sourceURL to a destinationURL
        
    The ISP implements it's services by using services of Item Service Hosts (ISH's). Typically an ISH is another enterprise. For an enterprise
    to be an ISH it needs to implement the following services:

        ItemsAvailableVia        - providing if a set of items are available at the ISH
    ToDo: consider adding these
        GetItemsIntoTurtle      - ensuring a set of items are gathered in the ISH and transferred to the inventory of a turtle 
        PutItemsFromTurtle      - ensuring a set of items are transferred from the inventory of a turtle to the ISH. 
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function ItemsAvailableVia(queryData) -- ToDo: investigate if this (sometimes) needs to be an async service
    --[[
        This sync public service queries an ISH for the availability of items. The ISH and query are specified by the "base" (i.e. "ccwprp://host:port/path")
        and "query" component (i.e. `?itemName=itemCount`) of an URL.

        Return value:
                                    - (table)
                success             - (boolean) whether all the queried items are available via the URL

        Parameters:
            queryData               - (table) data about the query
                itemQueryURL        - (table) a URL specifying the items availability that needs to be queried
                                        (the "base" component of the URL specifies the ISH to query)
                                        (the "query" component of the URL specifies the items to query for)
    --]]

    -- check input
    if type(queryData) ~= "table" or type(queryData.itemQueryURL) ~= "table" then
        corelog.Error("enterprise_isp.ItemsAvailableVia: Invalid queryData input")
        return {success = false}
    end

    -- get ISH
    local itemQueryURL = queryData.itemQueryURL
--    corelog.WriteToLog("enterprise_isp: itemQueryURL = "..textutils.serialize(itemQueryURL))
    local host = itemQueryURL:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_isp.ItemsAvailableVia: Invalid host input") return {success = false} end
--    corelog.WriteToLog("enterprise_isp: host = "..host)

    -- relay to ISH service
    if host == "turtle" then
        return enterprise_turtle.ItemsAvailableVia(queryData)
    else
        corelog.Error("enterprise_isp.ItemsAvailableVia: Not implemented for "..host .." ISH") return {success = false}
    end
end

function TransferItemsFromTo(transferData, callback, callbackData)
    --[[
        This async public service relays the transfer of items from a source to a destination URL.

        Return value:
            nil 

        Async service return value (to callback):
                                - (table)
                success         - (boolean) whether the items were succesfully transferred

        Parameters:
            transferData        - (table) data about the transfer
                sourceURL       - (table) a URL specifying where the items that need transfer can be located
                                    (the "query" component of the URL specifies the items to be transferred)
                destinationURL  - (table) a URL specifying where the items need to be transferred to
            callback            - (string) name of function to call once service is ready
            callbackData        - (table) data to supply to callback function            
    --]]

    -- check input
    if type(transferData) ~= "table" or type(transferData.sourceURL) ~= "table" or type(transferData.destinationURL) ~= "table" then
        corelog.Error("enterprise_isp.TransferItemsFromTo: Invalid transferData input")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    if type(callback) ~= "string" then 
        corelog.Error("enterprise_isp.TransferItemsFromTo: Invalid callback function")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    callbackData = callbackData or {}

    -- ToDo: implement
    if (true) then
        corelog.Error("enterprise_isp.TransferItemsFromTo: Service not yet implemented!")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- end
    return nil
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

