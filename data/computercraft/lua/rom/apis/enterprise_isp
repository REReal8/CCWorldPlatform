--[[
    The Item Service Provider (ISP) is an enterprise that provides services to handle items. From the perspective of an enterprise that needs
    items to be handled across (possibly) multiple enterprises the ISP can be seen as a generic entrypoint (or hub or router) for handling
    those items.

    For an enterprise to be a Supplier it needs to implement the following services:
        ProvideItemsTo_ASrv         - providing multiple instances of a specific item to a Storage destination.
        Can_ProvideItems_QSrv       - answers the question whether the Supplier can provide specific items.
        NeedsTo_ProvideItemsTo_SSrv - return the needs for the Supplier to provide specific items to a Storage.

    For an enterprise to be a Storage it needs to implement the following services:
        GetItemsLocations_SSrv      - provides the current world locations of different items in a Storage.
        GetStorageLocation_SSrv     - provides the world location of a Storage.
        GetItemsIntoTurtle_ASrv     - ensuring items are gathered in the Storage and transferred to the inventory of a turtle.
        PutItemsFromTurtle_ASrv     - ensuring items are transferred from the inventory of a turtle to the Storage.

    Furthermore most Suppliers and Storages should implement the additional attribute
        GetHostLocator_Att          - locating this enterprise

    The ISP offers generic Supplier and Storage services by relaying them to the underlying Supplier or Storage based on the "base" component of URL's. The interface
    of the corresponding ISP services is the same. Hence, one could see the ISP as a Supplier and Storage itself.

    The ISP provides the following additional public services
        TransferItemsFromTo_ASrv    - transferring items from one Storage to another.
        NeedsTo_TransferItems_SSrv  - returns the (fuel) needs for the transfer of items from one Storage to another.
        AddItemsLocators_SSrv       - adds the items of multiple itemsLocators into one itemsLocator. The itemsLocators should have the same host/ base component.
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function ProvideItemsTo_ASrv(...)
    -- get & check input from description
    local checkSuccess, serviceData, itemsLocator, callback, callbackData = coreutils.CheckInput([[
        This async public Supplier service provides multiple instances of a specific to the requested Storage.

        Return value:
            nil

        Async service return value (to callback):
                                            - (table)
                success                     - (boolean) whether the service executed correctly
                destinationItemsLocator     - (URL) locating the final Storage and the items that where transferred to it
                                                (upon service succes the "host" component of this URL should be equal to storageLocator, and
                                                the "query" should be equal to orderItems)

        Parameters:
            serviceData                     + (table) data for the service
                itemsLocator                + (URL) locating the items to provide
                                                (the "base" component of the URL specifies the Supplier that provides the items)
                                                (the "query" component of the URL specifies the items)
                storageLocator              - (URL) locating the Storage where the items need to be provided to
                ingredientsSupplierLocator  - (URL) locating where the production ingredients can be retrieved
                assignmentsPriorityKey      - (string, "") priorityKey that should be set for all assignments triggered by this service
            callback                        + (string) name of function to call once service is ready
            callbackData                    + (table) data to supply to callback function
    ]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.ProvideItemsTo_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- get Supplier
    local serviceResults = GetSupplierName_SSrv( { supplierLocator = itemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.ProvideItemsTo_ASrv: failed obtaining supplierName for "..itemsLocator:getURI()..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local supplierName = serviceResults.enterpriseName

    -- call method on Supplier
    local serviceName = supplierName..".ProvideItemsTo_ASrv"
    return coreutils.DoASyncService(serviceName, serviceData, callback, callbackData)
end

function Can_ProvideItems_QSrv(...)
    -- get & check input from description
    local checkSuccess, serviceData, itemsLocator = coreutils.CheckInput([[
        This sync public query service answers the question whether the Supplier can provide specific items.

        Return value:
                                    - (table)
                success             - (boolean) whether the answer to the question is true

        Parameters:
            serviceData             + (table) data to the query
                itemsLocator        + (URL) locating the items that need to be queried for providability
                                        (the "base" component of the URL specifies the Supplier that provides the items)
                                        (the "query" component of the URL specifies the items to query for)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.Can_ProvideItems_QSrv: Invalid input") return {success = false} end

    -- get Supplier
    local serviceResults = GetSupplierName_SSrv( { supplierLocator = itemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.Can_ProvideItems_QSrv: failed obtaining supplierName for "..itemsLocator:getURI()..".") return {success = false} end
    local supplierName = serviceResults.enterpriseName

    -- call method on Supplier
    local serviceName = supplierName..".Can_ProvideItems_QSrv"
    serviceResults = coreutils.DoSyncService(serviceName, serviceData)

    -- end
    return serviceResults
end

function NeedsTo_ProvideItemsTo_SSrv(...)
    -- get & check input from description
    local checkSuccess, serviceData, itemsLocator = coreutils.CheckInput([[
        This sync public service returns the needs for a Supplier to provide specific items to a Storage.

        Return value:
                                            - (table)
                success                     - (boolean) whether the service executed correctly
                fuelNeed                    - (number) amount of fuel needed to provide items
                ingredientsNeed             - (table) ingredients needed to provide items

        Parameters:
            serviceData                     + (table) data to the query
                itemsLocator                + (URL) locating the items to provide
                                                (the "base" component of the URL specifies the Supplier that provides the items)
                                                (the "query" component of the URL specifies the items)
                storageLocator              - (URL) locating the Storage where the items need to be delivered to

                ingredientsSupplierLocator  - (URL) optionally locating another Supplier where needed ingredient items for the Supplier could be retrieved
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.NeedsTo_ProvideItemsTo_SSrv: Invalid input") return {success = false} end

    -- get Supplier
    local serviceResults = GetSupplierName_SSrv( { supplierLocator = itemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.NeedsTo_ProvideItemsTo_SSrv: failed obtaining supplierName for "..itemsLocator:getURI()..".") return {success = false} end
    local supplierName = serviceResults.enterpriseName

    -- call method on Supplier
    local serviceName = supplierName..".NeedsTo_ProvideItemsTo_SSrv"
    serviceResults = coreutils.DoSyncService(serviceName, serviceData)

    -- end
    return serviceResults
end

function TransferItemsFromTo_ASrv(...)
    -- get & check input from description
    local checkSuccess, sourceItemsLocator, destinationStorageLocator, assignmentsPriorityKey, callback, callbackData = coreutils.CheckInput([[
        This async public service relays the transfer of items from one Storage to another.

        This service is implemented using the following underlying Storage services
            GetItemsIntoTurtle_ASrv
            PutItemsFromTurtle_ASrv

        Return value:
            nil

        Async service return value (to callback):
                                            - (table)
                success                     - (boolean) whether the service executed successfully
                destinationItemsLocator     - (URL) stating the final Storage and the items that where transferred to it
                                                (upon service succes the "host" component of this URL should be equal to destinationStorageLocator, and
                                                the "query" should be equal to the "query" component of the sourceItemsLocator)

        Parameters:
            transferData                    - (table) data about the transfer
                sourceItemsLocator          + (URL) locating the items that need transfer
                                                (the "query" component of the URL specifies the items to be transferred)
                                                (the "host" component of the URL specifies the Storage where the items are located)
                destinationStorageLocator   + (URL) locating the Storage that needs to be transferred to
                assignmentsPriorityKey      + (string, "") priorityKey that should be set for all assignments triggered by this service
            callback                        + (string) name of function to call once service is ready
            callbackData                    + (table) data to supply to callback function
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid input") return coreutils.DoCallback(callback, callbackData, {success = false}) end

    -- get source Storage
    local serviceResults = GetStorageName_SSrv( { storageLocator = sourceItemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: failed obtaining storageName for "..sourceItemsLocator:getURI()..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local sourceStorageName = serviceResults.enterpriseName

    -- get target Storage
    serviceResults = GetStorageName_SSrv( { storageLocator = destinationStorageLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: failed obtaining storageName for "..destinationStorageLocator:getURI()..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local destinationStorageName = serviceResults.enterpriseName

    -- check there are actual items to transfer
    local transferItems = sourceItemsLocator:getQuery()
    if next(transferItems) == nil then
        corelog.Warning("enterprise_isp.TransferItemsFromTo_ASrv: There are 0 items to transfer (from "..sourceItemsLocator:getURI().." to "..destinationStorageLocator:getURI()..").")
        return coreutils.DoCallback(callback, callbackData, {
            success                 = true,
            destinationItemsLocator = destinationStorageLocator:copy()
        })
    end

    -- create project definition
    local transferItemsProjectDef = {
        steps   = {
            { stepName = sourceStorageName..".GetItemsIntoTurtle_ASrv", async = true, stepDataDef = {
                { keyDef = "sourceItemsLocator"         , valueSource = 0, keyDefSource = "sourceItemsLocator" },
                { keyDef = "assignmentsPriorityKey"     , valueSource = 0, keyDefSource = "assignmentsPriorityKey" },
            }},
            { stepName = destinationStorageName..".PutItemsFromTurtle_ASrv", async = true, stepDataDef = {
                { keyDef = "turtleItemsLocator"         , valueSource = 1, keyDefSource = "turtleItemsLocator" },
                { keyDef = "destinationHostLocator"     , valueSource = 0, keyDefSource = "destinationStorageLocator" },
                { keyDef = "assignmentsPriorityKey"     , valueSource = 0, keyDefSource = "assignmentsPriorityKey" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , valueSource = 2, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , valueSource = 3, keyDefSource = "success" },
            { keyDef = "destinationItemsLocator"        , valueSource = 2, keyDefSource = "destinationItemsLocator" },
        }
    }
    local projectData = {
        sourceItemsLocator          = sourceItemsLocator,
        destinationStorageLocator   = destinationStorageLocator,

        assignmentsPriorityKey      = assignmentsPriorityKey,
    }
    local projectServiceData = {
        projectDef  = transferItemsProjectDef,
        projectData = projectData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)

    -- end
    return nil
end

function NeedsTo_TransferItems_SSrv(...)
    -- get & check input from description
    local checkSuccess, sourceItemsLocator, destinationStorageLocator = coreutils.CheckInput([[
        This sync public service returns the (fuel) needs for the transfer of items from one Storage to another.

        This service is implemented using the following underlying Storage services
            GetItemsLocations_SSrv
            GetStorageLocation_SSrv

        Return value:
                                            - (table)
                success                     - (boolean) whether the service executed successfully
                fuelNeed                    - (number) amount of fuel needed to transfer the items

        Parameters:
            transferData                    - (table) data about the transfer
                sourceItemsLocator          + (URL) locating the items that need transfer
                                                (the "query" component of the URL specifies the items to be transferred)
                                                (the "host" component of the URL specifies the Storage where the items are located)
                destinationStorageLocator   + (URL) locating the Storage that needs to be transferred to
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.NeedsTo_TransferItems_SSrv: Invalid input") return {success = false} end

    -- check there are actual items to transfer
    local transferItems = sourceItemsLocator:getQuery()
    if next(transferItems) == nil then
        corelog.Warning("enterprise_isp.NeedsTo_TransferItems_SSrv: There are 0 items to transfer (from "..sourceItemsLocator:getURI().." to "..destinationStorageLocator:getURI()..").")
        return {
            success     = true,
            fuelNeed    = 0,
        }
    end

    -- determine sourceItemsLocations
    local serviceResults = GetItemsLocations_SSrv({ itemsLocator = sourceItemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.NeedsTo_TransferItems_SSrv: failed obtaining locations for items "..sourceItemsLocator:getURI()..".") return {success = false} end
    local itemsLocations = serviceResults.locations

    -- determine destinationLocation
    serviceResults = GetStorageLocation_SSrv({ storageLocator = destinationStorageLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.NeedsTo_TransferItems_SSrv: failed obtaining location for Storage "..destinationStorageLocator:getURI()..".") return {success = false} end
    local storageLocation = serviceResults.location

    -- determine fuelNeed
    local fuelNeed = 0
    for i, itemlocation in ipairs(itemsLocations) do
        -- ToDo: consider how to handle if path isn't the shortest route, should we maybe modify things to do something like GetTravelDistanceBetween
        fuelNeed = fuelNeed + role_fuel_worker.NeededFuelToFrom(storageLocation, itemlocation)
    end

    -- end
    return {
        success     = true,
        fuelNeed    = fuelNeed,
    }
end

function GetItemsLocations_SSrv(...)
    -- get & check input from description
    local checkSuccess, serviceData, itemsLocator = coreutils.CheckInput([[
        This sync public service provides the current world locations of different items in a Storage.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                locations           - (table) with locations of the different items

        Parameters:
            serviceData             + (table) data about this service
                itemsLocator        + (URL) locating the items for which to get the location
                                        (the "base" component of the URL specifies the Storage that provides the items)
                                        (the "query" component of the URL specifies the items)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.GetItemsLocations_SSrv: Invalid input") return {success = false} end

    -- get Storage
    local serviceResults = GetStorageName_SSrv( { storageLocator = itemsLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.GetItemsLocations_SSrv: failed obtaining storageName for "..itemsLocator:getURI()..".") return {success = false} end
    local storageName = serviceResults.enterpriseName

    -- call method on Storage
    local serviceName = storageName..".GetItemsLocations_SSrv"
    serviceResults = coreutils.DoSyncService(serviceName, serviceData)

    -- end
    return serviceResults
end

function GetStorageLocation_SSrv(...)
    -- get & check input from description
    local checkSuccess, serviceData, storageLocator = coreutils.CheckInput([[
        This sync public service provides the world location of a Storage.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                location            - (table) location of the Storage

        Parameters:
            serviceData             + (table) data about this service
                storageLocator      + (URL) locating the Storage for which to get the location
                                        (the "base" component of the URL should specify a Storage enterprise)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.GetStorageLocation_SSrv: Invalid input") return {success = false} end

    -- get Storage
    local serviceResults = GetStorageName_SSrv( { storageLocator = storageLocator })
    if not serviceResults.success then corelog.Error("enterprise_isp.GetStorageLocation_SSrv: failed obtaining storageName for "..storageLocator:getURI()..".") return {success = false} end
    local storageName = serviceResults.enterpriseName

    -- call method on Storage
    local serviceName = storageName..".GetStorageLocation_SSrv"
    serviceResults = coreutils.DoSyncService(serviceName, serviceData)

    -- end
    return serviceResults
end

function AddItemsLocators_SSrv(serviceData)
    --[[
        This sync public service adds the items of multiple itemsLocators into one itemsLocator. The itemsLocators should have the same host/ base component.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                itemsLocator        - (URL) locating all items

        Parameters:
            serviceData             - (table) data about the query
                itemsLocator1       - (URL) a itemsLocator locating items
                                        (the "base" component of the URL specifies the host to query)
                                        (the "query" component of the URL specifies the items to query for)
                [itemsLocator2]     - (URL) another itemsLocator locating items
                [itemsLocatorN]     - (URL) and the final itemsLocator locating items
    --]]

    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Invalid queryData") return {success = false} end

--    local itemsLocator = queryData.itemsLocator
--    if type(itemsLocator) ~= "table" then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Invalid itemsLocator") return {success = false} end

    -- use remaining input
    local allTrue = true
    local resultItemsLocator = nil
    for fieldKey, fieldvalue in pairs(serviceData) do
        -- check if it's a URL
        if type(fieldvalue) == "table" then
            -- wrap into URL
            local fieldItemsLocator = url.URLClass:new(fieldvalue)

            -- check if first
            if resultItemsLocator == nil then
                -- copy first
                resultItemsLocator = fieldItemsLocator:copy()
            else
                -- check if same host/ base as resultItemsLocator so far
                if not fieldItemsLocator:sameBase(resultItemsLocator) then
                    corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Adding itemsLocator's (resultItemsLocator="..resultItemsLocator:getURI()..", fieldItemsLocator="..fieldItemsLocator:getURI()..") with different base not supported")
                    return {success = false}
                end

                -- add query component's
                local resultItemQuery = resultItemsLocator:getQuery()
                AddItemsTo(resultItemQuery, fieldItemsLocator:getQuery())
            end
        end
    end
    if resultItemsLocator == nil then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Couldn't construct combined itemsLocator") return {success = false} end

    -- end
    local result = {
        success = allTrue,
        itemsLocator = resultItemsLocator
    }
    return result
end

function AddItemsTo(items, itemsToAdd)
    --[[
        This sync public function adds the items of itemsToAdd to items.

        Return value:
                                - (table)
                success         - (boolean) whether the function executed successfully

        Parameters:
            items               - (table) with one or more items (formatted as an array of [itemName] = itemCount key-value pairs)
            itemsToAdd          - (table) with one or more items (formatted as an array of [itemName] = itemCount key-value pairs) to add
    --]]

    -- check input
    if type(items) ~= "table" then corelog.Error("enterprise_isp.AddItemsTo: Invalid items") return {success = false} end
    if type(itemsToAdd) ~= "table" then corelog.Error("enterprise_isp.AddItemsTo: Invalid itemsToAdd") return {success = false} end

    -- add items
    for itemName, itemCount in pairs(itemsToAdd) do
        -- check
        if type(itemName) ~= "string" then corelog.Error("enterprise_isp.AddItemsTo: Invalid itemName (type="..type(itemName)..")") return {success = false} end
        if type(itemCount) ~= "number" then corelog.Error("enterprise_isp.AddItemsTo: Invalid itemCount (type="..type(itemCount)..")") return {success = false} end

        -- add
        items[itemName] = (items[itemName] or 0) + itemCount
    end

    -- end
    return {success = true}
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/

function GetSupplierName_SSrv(...)
    -- get & check input from description
    local checkSuccess, supplierLocator = coreutils.CheckInput([[
        This sync private service provides the (enterprise) name of a Supplier.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                enterpriseName      - (string) with (enterprise) name of the Supplier

        Parameters:
            serviceData             - (table) data about this service
                supplierLocator     + (URL) locating the Supplier
                                        (the "base" component of the URL should specify a Supplier enterprise)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.GetSupplierName_SSrv: Invalid input") return {success = false} end

    -- determine enterpriseName
    local host = supplierLocator:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_isp.GetSupplierName_SSrv: host of wrong type = "..type(host)..".") return {success = false} end
    local enterpriseName = nil
        if host == "enterprise_chests"  then enterpriseName = "enterprise_chests"
    elseif host == "enterprise_forestry"   then enterpriseName = "enterprise_forestry"
    elseif host == "enterprise_factory" then enterpriseName = "enterprise_factory"
    elseif host == "enterprise_shop"    then enterpriseName = "enterprise_shop"
    elseif host == "enterprise_turtle"  then enterpriseName = "enterprise_turtle"
    else corelog.Error("enterprise_isp.GetSupplierName_SSrv: Not implemented for "..host .." host.") return {success = false} end

    -- end
    return {
        success         = true,
        enterpriseName  = enterpriseName,
    }
end

function GetStorageName_SSrv(...)
    -- get & check input from description
    local checkSuccess, storageLocator = coreutils.CheckInput([[
        This sync private service provides the (enterprise) name of a Storage.

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                enterpriseName      - (string) with (enterprise) name of the Storage

        Parameters:
            serviceData             - (table) data about this service
                storageLocator      + (URL) locating the Storage
                                        (the "base" component of the URL should specify a Storage enterprise)
    --]], table.unpack(arg))
    if not checkSuccess then corelog.Error("enterprise_isp.GetStorageName_SSrv: Invalid input") return {success = false} end

    -- determine Storage name
    local host = storageLocator:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_isp.GetStorageName_SSrv: storageHost of wrong type = "..type(host)..".") return {success = false} end
    local enterpriseName = nil
        if host == "enterprise_chests"  then enterpriseName = "enterprise_chests"
    elseif host == "enterprise_turtle"  then enterpriseName = "enterprise_turtle"
    else corelog.Error("enterprise_isp.GetStorageName_SSrv: Not implemented for "..host .." host.") return {success = false} end

    -- end
    return {
        success         = true,
        enterpriseName  = enterpriseName,
    }
end
