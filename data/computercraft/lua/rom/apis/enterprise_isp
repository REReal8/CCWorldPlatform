--[[
    The Item Service Provider (ISP) is an enterprise that provides services to handle items. From the perspective of an enterprise that needs
    items to be handled across (possibly) multiple enterprises the ISP can be seen as a generic entrypoint (or hub or router) for handling 
    those items.

    The ISP provides the following services
        ItemsAvailableVia_SSrv      - providing if a set of items are available at an itemsLocator
        TransferItemsFromTo_ASrv    - transferring items from a Supplier to a Storage
        
    The ISP implements it's services by using services of Suppliers and Storages.

    For an enterprise to be a Supplier it needs to implement the following services:
        ItemsAvailableVia_SSrv      - providing if a set of items are available at the Supplier.
        GetItemsIntoTurtle_ASrv     - ensuring a set of items are gathered in the Supplier and transferred to the inventory of a turtle.

    For an enterprise to be a Storage it needs to implement the following services:
        PutItemsFromTurtle_ASrv     - ensuring a set of items are transferred from the inventory of a turtle to the Storage.

    Furthermore most Suppliers and Storages implement the additional function
        GetHostLocator_SSrv         - provide the URL of the host
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function ItemsAvailableVia_SSrv(queryData)
    --[[
        This sync public service queries a Supplier for the availability of items. The Supplier and query are specified by the "base" (i.e. "ccwprp://host:port/path")
        and "query" component (i.e. `?itemName=itemCount`) of an URL.

        This service is implemented using the following underlying Supplier services
            ItemsAvailableVia_SSrv

        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully

        Parameters:
            queryData               - (table) data about the query
                itemsLocator        - (URL) locating items which availability is queried
                                        (the "base" component of the URL specifies the Supplier to query)
                                        (the "query" component of the URL specifies the items to query for)
    --]]

    -- check input
    if type(queryData) ~= "table" then corelog.Error("enterprise_isp.ItemsAvailableVia_SSrv: Invalid queryData") return {success = false} end
    local itemsLocator = queryData.itemsLocator
    if type(itemsLocator) ~= "table" then corelog.Error("enterprise_isp.ItemsAvailableVia_SSrv: Invalid itemsLocator") return {success = false} end

    -- get Supplier
--    corelog.WriteToLog("enterprise_isp: itemsLocator = "..textutils.serialize(itemsLocator))
    local supplierName = itemsLocator:getHost()
    if type(supplierName) ~= "string" then corelog.Error("enterprise_isp.ItemsAvailableVia_SSrv: Invalid supplierName") return {success = false} end
--    corelog.WriteToLog("enterprise_isp: supplierName = "..supplierName)

    -- relay to ISH service
    if supplierName == "turtle" then
        return enterprise_turtle.ItemsAvailableVia_SSrv(queryData)
    elseif supplierName == "chests" then
        return enterprise_chests.ItemsAvailableVia_SSrv(queryData)
    else
        corelog.Error("enterprise_isp.ItemsAvailableVia_SSrv: Not implemented for "..supplierName .." Supplier.") return {success = false}
    end
end

function TransferItemsFromTo_ASrv(transferData, callback, callbackData)
    --[[
        This async public service relays the transfer of items from a Supplier to a Storage.

        This service is implemented using the following underlying Supplier and Storage services
            GetItemsIntoTurtle_ASrv
            PutItemsFromTurtle_ASrv

        Return value:
            nil 

        Async service return value (to callback):
                                        - (table)
                success                 - (boolean) whether the service executed successfully
                destinationItemsLocator - (URL) stating the final Storage and the items that where transferred to it
                                            (upon service succes the "host" component of this URL should be equal to destinationHostLocator, and
                                            the "query" should be equal to the "query" component of the sourceItemsLocator)

        Parameters:
            transferData                - (table) data about the transfer
                sourceItemsLocator      - (URL) locating the items that need transfer
                                            (the "query" component of the URL specifies the items to be transferred)
                                            (the "host" component of the URL specifies the host where the items are located)
                destinationHostLocator  - (URL) locating the Storage that needs to be transferred to
            callback                    - (string) name of function to call once service is ready
            callbackData                - (table) data to supply to callback function            
    --]]

    -- check input
    if type(transferData) ~= "table" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid transferData") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local sourceItemsLocator = url.URLClass:new(transferData.sourceItemsLocator)
    if type(sourceItemsLocator) ~= "table" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid sourceItemsLocator") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local destinationHostLocator = url.URLClass:new(transferData.destinationHostLocator)
    if type(destinationHostLocator) ~= "table" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid destinationHostLocator") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    if type(callback) ~= "string" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid callback function.") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    callbackData = callbackData or {}

    -- determine source enterprise name
    local sourceHost = sourceItemsLocator:getHost()
    if type(sourceHost) ~= "string" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: sourceHost of wrong type = "..type(sourceHost)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local sourceEnterprise = nil
    if sourceHost == "turtle" then
        sourceEnterprise = "enterprise_turtle"
    elseif sourceHost == "chests" then
        sourceEnterprise = "enterprise_chests"
    elseif sourceHost == "shop" then
        sourceEnterprise = "enterprise_shop"
    else
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Not implemented for "..sourceHost .." source ISH.") return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- determine destination enterprise name
    local destinationHost = destinationHostLocator:getHost()
    if type(destinationHost) ~= "string" then corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: destinationHost of wrong type = "..type(destinationHost)..".") return coreutils.DoCallback(callback, callbackData, {success = false}) end
    local destinationEnterprise = nil
    if destinationHost == "turtle" then
        destinationEnterprise = "enterprise_turtle"
    elseif destinationHost == "chests" then
        destinationEnterprise = "enterprise_chests"
    elseif destinationHost == "shop" then
        destinationEnterprise = "enterprise_shop"
    else
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Not implemented for "..destinationHost .." destination ISH.") return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- check there are actual items to transfer
    local transferItems = sourceItemsLocator:getQuery()
    if next(transferItems) == nil then
        corelog.Warning("enterprise_isp.TransferItemsFromTo_ASrv: There are 0 items to transfer (from "..sourceItemsLocator:getURI().." to "..destinationHostLocator:getURI()..").")
        return coreutils.DoCallback(callback, callbackData, {
            success                 = true,
            destinationItemsLocator = destinationHostLocator:copy()
        })
    end

    -- create project definition
    local transferItemsProjectDef = {
        steps   = {
            { stepName = sourceEnterprise..".GetItemsIntoTurtle_ASrv", async = true, stepDataDef = {
                { keyDef = "sourceItemsLocator"         , valueSource = 0, keyDefSource = "sourceItemsLocator" },
            }},
            { stepName = destinationEnterprise..".PutItemsFromTurtle_ASrv", async = true, stepDataDef = {
                { keyDef = "turtleItemsLocator"         , valueSource = 1, keyDefSource = "turtleItemsLocator" },
                { keyDef = "destinationHostLocator"     , valueSource = 0, keyDefSource = "destinationHostLocator" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"                   , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"                   , valueSource = 2, keyDefSource = "success" },
            }},
        },
        returnData  = {
            { keyDef = "success"                        , valueSource = 3, keyDefSource = "success" },
            { keyDef = "destinationItemsLocator"        , valueSource = 2, keyDefSource = "destinationItemsLocator" },
        }
    }
    local projectData = {
        sourceItemsLocator      = sourceItemsLocator,
        destinationHostLocator  = destinationHostLocator,
    }
    local projectServiceData = {
        projectDef  = transferItemsProjectDef,
        projectData = projectData,
    }

    -- start project
--    corelog.WriteToLog(">Transferring items from "..sourceItemsLocator:getURI().." to "..destinationHostLocator:getURI()..".")
    enterprise_projects.StartProject_ASrv(projectServiceData, callback, callbackData)

    -- end
    return nil
end

function AddItemsLocators_SSrv(serviceData)
    --[[
        This sync public service adds the items of multiple itemsLocators into one itemsLocator. The itemsLocators should have the same host/ base component.
        
        Return value:
                                    - (table)
                success             - (boolean) whether the service executed successfully
                itemsLocator        - (URL) locating all items

        Parameters:
            queryData               - (table) data about the query
                itemsLocator1       - (URL) a itemsLocator locating items
                                        (the "base" component of the URL specifies the ISH to query)
                                        (the "query" component of the URL specifies the items to query for)
                [itemsLocator2]     - (URL) another itemsLocator locating items
                [itemsLocatorN]     - (URL) and the final itemsLocator locating items
    --]]

    -- check input
    if type(serviceData) ~= "table" then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Invalid queryData") return {success = false} end

--    local itemsLocator = queryData.itemsLocator
--    if type(itemsLocator) ~= "table" then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Invalid itemsLocator") return {success = false} end

    -- use remaining input
    local allTrue = true
    local resultItemsLocator = nil
    for fieldKey, fieldvalue in pairs(serviceData) do
        -- check if it's a URL
        if type(fieldvalue) == "table" then
            -- wrap into URL
            local fieldItemsLocator = url.URLClass:new(fieldvalue)

            -- check if first
            if resultItemsLocator == nil then
                -- copy first
                resultItemsLocator = fieldItemsLocator:copy()
            else
                -- check if same host/ base as resultItemsLocator so far
                if not fieldItemsLocator:sameBase(resultItemsLocator) then 
                    corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Adding itemsLocator's (resultItemsLocator="..resultItemsLocator:getURI()..", fieldItemsLocator="..fieldItemsLocator:getURI()..") with different base not supported")
                    return {success = false}
                end

                -- add query component's
                local resultItemQuery = resultItemsLocator:getQuery()
                for itemName, itemCount in pairs(fieldItemsLocator:getQuery()) do
                    resultItemQuery[itemName] = (resultItemQuery[itemName] or 0) + itemCount
                end
            end
        end
    end
    if resultItemsLocator == nil then corelog.Error("enterprise_isp.AddItemsLocators_SSrv: Couldn't construct combined itemsLocator") return {success = false} end

    -- end
    local result = {
        success = allTrue,
        itemsLocator = resultItemsLocator
    } 
    return result
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
