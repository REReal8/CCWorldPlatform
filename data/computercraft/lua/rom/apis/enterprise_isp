--[[
    The Item Service Provider (ISP) is an enterprise that provides services to handle items. From the perspective of an enterprise that needs
    items to be handled acros (possibly) multiple enterprises the ISP can be seen as a single(ton) entry point (or hub or router) for handling 
    those items.

    The ISP provides the following services
        ItemsAvailableVia_ASrv      - providing if a set of items are available at an itemQueryURL
        TransferItemsFromTo_ASrv    - transferring items from a sourceURL to a destinationURL
        
    The ISP implements it's services by using services of Item Service Hosts (ISH's). Typically an ISH is another enterprise. For an enterprise
    to be an ISH it needs to implement the following services:

        ItemsAvailableVia_ASrv      - providing if a set of items are available at the ISH.
        GetItemsIntoTurtle_ASrv     - ensuring a set of items are gathered in the ISH and transferred to the inventory of a turtle.
        PutItemsFromTurtle_ASrv     - ensuring a set of items are transferred from the inventory of a turtle to the ISH.

    Furthermore it needs to implement the following additional functions
        GetISHURL                   - provide the base URL of the ISH
--]]

--                _     _ _         __                  _   _
--               | |   | (_)       / _|                | | (_)
--    _ __  _   _| |__ | |_  ___  | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | '_ \| | | | '_ \| | |/ __| |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | |_) | |_| | |_) | | | (__  | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   | .__/ \__,_|_.__/|_|_|\___| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--   | |
--   |_|

function ItemsAvailableVia_ASrv(queryData) -- ToDo: investigate if this (sometimes) needs to be an async service
    --[[
        This sync public service queries an ISH for the availability of items. The ISH and query are specified by the "base" (i.e. "ccwprp://host:port/path")
        and "query" component (i.e. `?itemName=itemCount`) of an URL.

        This service is implemented using the following underlying ISH services
            ItemsAvailableVia_ASrv

        Return value:
                                    - (table)
                success             - (boolean) whether all the queried items are available via the URL

        Parameters:
            queryData               - (table) data about the query
                itemQueryURL        - (table) a URL stating the items availability that needs to be queried
                                        (the "base" component of the URL specifies the ISH to query)
                                        (the "query" component of the URL specifies the items to query for)
    --]]

    -- check input
    if type(queryData) ~= "table" or type(queryData.itemQueryURL) ~= "table" then
        corelog.Error("enterprise_isp.ItemsAvailableVia_ASrv: Invalid queryData input.")
        return {success = false}
    end

    -- get ISH
    local itemQueryURL = queryData.itemQueryURL
--    corelog.WriteToLog("enterprise_isp: itemQueryURL = "..textutils.serialize(itemQueryURL))
    local host = itemQueryURL:getHost()
    if type(host) ~= "string" then corelog.Error("enterprise_isp.ItemsAvailableVia_ASrv: Invalid host input.") return {success = false} end
--    corelog.WriteToLog("enterprise_isp: host = "..host)

    -- relay to ISH service
    if host == "turtle" then
        return enterprise_turtle.ItemsAvailableVia_ASrv(queryData)
    elseif host == "chests" then
        return enterprise_chests.ItemsAvailableVia_ASrv(queryData)
    else
        corelog.Error("enterprise_isp.ItemsAvailableVia_ASrv: Not implemented for "..host .." ISH.") return {success = false}
    end
end

function TransferItemsFromTo_ASrv(transferData, callback, callbackData)
    --[[
        This async public service relays the transfer of items from a source to a destination URL.

        This service is implemented using the following underlying ISH services
            GetItemsIntoTurtle_ASrv
            PutItemsFromTurtle_ASrv

        Return value:
            nil 

        Async service return value (to callback):
                                - (table)
                success         - (boolean) whether the items were succesfully transferred

        Parameters:
            transferData        - (table) data about the transfer
                sourceURL       - (table) a URL stating where the items that need transfer can be located
                                    (the "query" component of the URL specifies the items to be transferred)
                destinationURL  - (table) a URL stating where the items need to be transferred to
            callback            - (string) name of function to call once service is ready
            callbackData        - (table) data to supply to callback function            
    --]]

    -- check input
    if type(transferData) ~= "table" or type(transferData.sourceURL) ~= "table" or type(transferData.destinationURL) ~= "table" then
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid transferData input.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    if type(callback) ~= "string" then 
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Invalid callback function.")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    callbackData = callbackData or {}

    -- determine source enterprise name
    local sourceURL = url.URLClass:new(transferData.sourceURL)
    local sourceHost = sourceURL:getHost()
    if type(sourceHost) ~= "string" then
        corelog.Error("enterprise_isp.ItemsAvailableVia_ASrv: sourceHost of wrong type = "..type(sourceHost)..".")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    local sourceEnterprise = nil
    if sourceHost == "turtle" then
        sourceEnterprise = "enterprise_turtle"
    elseif sourceHost == "chests" then
        sourceEnterprise = "enterprise_chests"
    else
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Not implemented for "..sourceHost .." source ISH.") return coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- determine destination enterprise name
    local destinationURL = url.URLClass:new(transferData.destinationURL)
    local destinationHost = destinationURL:getHost()
    if type(destinationHost) ~= "string" then
        corelog.Error("enterprise_isp.ItemsAvailableVia_ASrv: destinationHost of wrong type = "..type(destinationHost)..".")
        return coreutils.DoCallback(callback, callbackData, {success = false})
    end
    local destinationEnterprise = nil
    if destinationHost == "turtle" then
        destinationEnterprise = "enterprise_turtle"
    elseif destinationHost == "chests" then
        destinationEnterprise = "enterprise_chests"
    else
        corelog.Error("enterprise_isp.TransferItemsFromTo_ASrv: Not implemented for "..destinationHost .." destination ISH.") coreutils.DoCallback(callback, callbackData, {success = false})
    end

    -- create project definition
    local transferItemsProject = {
        services    = {
            { serviceName = sourceEnterprise..".GetItemsIntoTurtle_ASrv", async = true, input = {
                { keyName = "sourceURL"         , valueSource = 0, sourceKey = "sourceURL" },
            }},
            { serviceName = destinationEnterprise..".PutItemsFromTurtle_ASrv", async = true, input = {
                { keyName = "turtleSourceURL"   , valueSource = 1, sourceKey = "turtleURL" },
                { keyName = "destinationURL"    , valueSource = 0, sourceKey = "destinationURL" },
            }},
            { serviceName = "enterprise_projects.AreAllTrue_QSrv", async = false, input = {
                { keyName = "success1", valueSource = 1, sourceKey = "success" },
                { keyName = "success2", valueSource = 2, sourceKey = "success" },
            }},
        },
        returnData  = {
            { keyName = "success", valueSource = 3, sourceKey = "success" },
        }
    }
    local projectData = {
        sourceURL = transferData.sourceURL,
        destinationURL = transferData.destinationURL,
    }
    local serviceData = {
        projectDefinition = transferItemsProject,
        projectInputData = projectData,
    }

    -- start project
    corelog.WriteToLog(">Transferring items from "..projectData.sourceURL:getURI().." to "..projectData.destinationURL:getURI()..".")
    enterprise_projects.StartProject_ASrv(serviceData, callback, callbackData)

    -- end
    return nil
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
