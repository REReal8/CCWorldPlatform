-- the table that stores the data
local db = {
    job         = "alchemist",
}

-- main functions
function Craft(craftData)
    -- calculate how many times we need to "do" the recipe
    local crafting  = craftData.recipe
    local times     = math.ceil(craftData.itemCount / crafting.yield)

    -- only if we get an location, not needed when working from inventory
    local ingredientsLocation  = craftData.ingredientsLocation
    if type(ingredientsLocation) == "table" then
        -- get above the ingredients location
        ingredientsLocation = coremove.GetRelativeLocationUp(ingredientsLocation)

        -- move to resource location
        coremove.GoTo(ingredientsLocation)

        -- suck everything from the box
        coreinventory.GetAllItems("Down")
    end

    -- move to the crafting location
    coremove.GoTo(craftData.workingLocation)

    -- do the magic!
    coreinventory.Equip("minecraft:crafting_table")
    PrepareCraftingArea(craftData.recipe, times)
    turtle.craft()

    -- take the stuff from the box below
    coreinventory.GetAllItems("down")

    -- only if we get an location
    if type(ingredientsLocation) == "table" then

        -- move back to resource location
        coremove.GoTo(ingredientsLocation)

        -- dump the stuff
        coreinventory.DropAllItems("Down")
    end
end

function Smelt(requestDetails)
end

function Pickup(requestDetails)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--
--

function PrepareCraftingArea(recipe, times)
    -- presume we can use the storage below us
    local craftArea = {false, false, false, false, false, true,  true,  true,  false, true,  true,  true,  false, true,  true,  true,  }
    local sideArea  = {true,  true,  true,  true,  true,  false, false, false, true,  false, false, false, true,  false, false, false, }

    -- loop the crafting area
    for slot=1,16 do
        -- only for the crafting area
        if craftArea[slot] then

            -- something present here?
            local itemDetail = coreinventory.GetItemDetail(slot)
            if itemDetail then

                -- find a empty slot to store the stuff now in this slot
                local emptySlot = coreinventory.GetEmptySlot(sideArea)

                -- move all stuf from current slot to this slot
                turtle.select(slot)
                turtle.transferTo(emptySlot)
            end

            -- do we need stuff in this slot?
            if type(recipe[slot]) == "table" then
                -- find stuff that is needed here
                local itemName      =         recipe[slot].itemName
                local itemCount     = times * recipe[slot].itemCount
                local itemPresent   = turtle.getItemCount(slot)         -- slot is empty at this point

                -- go, find the stuff
                local itemSlot  = 1
                while itemCount > itemPresent and itemSlot <= 16 do

                    -- skip crafting spots allready prepared
                    if itemSlot > slot or sideArea[itemSlot] then

                        -- see what is in this slot
                        itemDetail = coreinventory.GetItemDetail(itemSlot)

                        -- usefull?
                        if type(itemDetail) == "table" and itemDetail.name == itemName then

                            -- great, transfer!
                            turtle.select(itemSlot)
                            turtle.transferTo(slot, itemCount - itemPresent)

                            -- how many in the slot right now?
                            itemPresent = turtle.getItemCount(slot)
                        end
                    end

                    -- don't forget to increase the slot
                    itemSlot = itemSlot + 1
                end
            end
        end
    end

    -- drop everything we don't need
    for slot=1,16 do

        -- this applies only to the side area (if something present)
        if sideArea[slot] and coreinventory.GetItemDetail(slot) then

            -- drop it!
            turtle.select(slot)
            turtle.dropDown()
        end
    end
end


