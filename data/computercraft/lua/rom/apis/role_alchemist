-- the table that stores the data
local db = {
    job         = "alchemist",
}

-- main functions
function Craft(craftData)
    -- calculate how many times we need to "do" the recipe
    local crafting  = db.recipes[ craftData.itemName ].crafting
    local times     = math.ceil(craftData.itemCount / crafting.yield)

    -- only if we get an location, not needed when working from inventory
    local ingredientsLocation  = coremove.GetRelativeLocationUp(craftData.ingredientsLocation)
    if type(craftData.resource) == "table" then

        -- move to resource location
        coremove.GoTo(ingredientsLocation)

        -- suck everything from the box
        coreinventory.GetAllItems("Down")
    end

    -- move to the crafting location
    coremove.GoTo(craftData.workingLocation)

    -- do the magic!
    EquipCraftingTable()
    PrepareCraftingArea(craftData.recipe, times)
    turtle.craft()

    -- take the stuff from the box below
    coreinventory.GetAllItems("down")

    -- only if we get an location
    if type(craftData.resource) == "table" then

        -- move back to resource location
        coremove.GoTo(ingredientsLocation)

        -- dump the stuff
        coreinventory.GetAllItems("Down")
    end
end

function Smelt(requestDetails)
end

function Pickup(requestDetails)
end

--    _                 _    __                  _   _
--   | |               | |  / _|                | | (_)
--   | | ___   ___ __ _| | | |_ _   _ _ __   ___| |_ _  ___  _ __  ___
--   | |/ _ \ / __/ _` | | |  _| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
--   | | (_) | (_| (_| | | | | | |_| | | | | (__| |_| | (_) | | | \__ \
--   |_|\___/ \___\__,_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
--
--

function EquipCraftingTable()
    -- find empty spot
    coreinventory.GetEmptySlot()

    -- remove item on the left side
    turtle.equipLeft()

    -- remember what we removed?
    local itemDetail = coreinventory.GetItemDetail()

    -- find the crafting table
    coreinventory.SelectItem("minecraft:crafting_table")

    -- equip it
    turtle.equipLeft()

    -- this is the tool we removed
    return itemDetail
end

function PrepareCraftingArea(recipe, times)
    -- presume we can use the storage below us
    local craftArea = {true,  true,  true,  false, true,  true,  true,  false, true,  true,  true,  false, false, false, false, false }
    local sideArea  = {false, false, false, true,  false, false, false, true,  false, false, false, true,  true,  true,  true,  true  }

    -- loop the crafting area
    for slot=1,16 do

        -- only for the crafting area
        if craftArea[slot] then

            -- something present here?
            local itemDetail = coreinventory.GetItemDetail(slot)
            if itemDetail then

                -- find a empty slot to store the stuff now in this slot
                local emptySlot = coreinventory.GetEmptySlot(sideArea)

                -- move all stuf from current slot to this slot
                turtle.select(slot)
                turtle.transferTo(emptySlot)
            end

            -- find stuff that is needed here
            local itemName      =         recipe.itemName
            local itemCount     = times * recipe.itemCount
            local itemPresent   = turtle.getItemCount(slot)         -- slot is empty at this point

            -- go, find the stuff
            local itemSlot  = slot + 1
            while itemCount > itemPresent and slot <= 16 do

                -- see what is in this slot
                itemDetail = coreinventory.GetItemDetail(itemSlot)

                -- usefull?
                if itemDetail and itemDetail.itemName == itemName then

                    -- great, transfer!
                    turtle.select(itemSlot)
                    turtle.transferTo(slot, itemCount - itemPresent)

                    -- how many in the slot right now?
                    itemPresent = turtle.getItemCount(slot)
                end

                -- don't forget to increase the slot
                itemSlot = itemSlot + 1
            end
        end
    end

    -- drop everything we don't need
    for slot=1,16 do

        -- this applies only to the side area (if something present)
        if sideArea[slot] and coreinventory.GetItemDetail(slot) then

            -- drop it!
            turtle.select(slot)
            turtle.dropDown()
        end
    end
end