function T_All()
    T_new()
    T_IsOfType()
    T_isSame()
    T_copy()

    T_IsBlockList()
    T_IsSameBlockList()
    T_BlockListCopy()
end

local x1 = 3
local x2 = 1
local x3 = 9
local y1 = 3
local y2 = 5
local dx1 = 0
local dx2 = -1
local dy1 = 1
local dy2 = 0
local name1 = "minecraft:birch_sapling"
local name2 = "minecraft:furnace"

local block1 = mobj_block2d.Block2dClass:new({
    _x      = x1,
    _y      = y1,
    _dx     = dx1,
    _dy     = dy1,
    _name   = name1,
})

local compact = { compact = true }

function T_new()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d:new() tests")

    -- test full
    local block = mobj_block2d.Block2dClass:new({
        _x      = x1,
        _y      = y1,
        _dx     = dx1,
        _dy     = dy1,

        _name   = name1,
    })
    assert(block:getX() == x1, "gotten getX(="..block:getX()..") not the same as expected(="..x1..")")
    assert(block:getY() == y1, "gotten getY(="..block:getY()..") not the same as expected(="..y1..")")
    assert(block:getDx() == dx1, "gotten getDx(="..block:getDx()..") not the same as expected(="..dx1..")")
    assert(block:getDy() == dy1, "gotten getDy(="..block:getDy()..") not the same as expected(="..dy1..")")
    assert(block:getName() == name1, "gotten getName(="..block:getName()..") not the same as expected(="..name1..")")

    -- test without orientations (i.e dx, dy)
    block = mobj_block2d.Block2dClass:new({
        _x      = x1,
        _y      = y1,

        _name   = name1,
    })
    assert(block:getX() == x1, "gotten getX(="..block:getX()..") not the same as expected(="..x1..")")
    assert(block:getY() == y1, "gotten getY(="..block:getY()..") not the same as expected(="..y1..")")
    assert(block:getDx() == nil, "gotten getDx(="..(block:getDx() or "nil")..") not the same as expected(=nil)")
    assert(block:getDy() == nil, "gotten getDy(="..(block:getDy() or "nil")..") not the same as expected(=nil)")
    assert(block:getName() == name1, "gotten getName(="..block:getName()..") not the same as expected(="..name1..")")

    -- test default
    block = mobj_block2d.Block2dClass:new()
    local defaultX = 0
    assert(block:getX() == defaultX, "gotten getX(="..block:getX()..") not the same as expected(="..defaultX..")")
    local defaultY = 0
    assert(block:getY() == defaultY, "gotten getY(="..block:getY()..") not the same as expected(="..defaultY..")")
    assert(block:getDx() == nil, "gotten getDx(="..(block:getDx() or "nil")..") not the same as expected(=nil)")
    assert(block:getDy() == nil, "gotten getDy(="..(block:getDy() or "nil")..") not the same as expected(=nil)")
    local dedaultName = ""
    assert(block:getName() == dedaultName, "gotten getName(="..block:getName()..") not the same as expected(="..dedaultName..")")

    -- cleanup test
end

function T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d.IsOfType() tests")
    local block2 = mobj_block2d.Block2dClass:new({
        _x      = x1,
        _y      = y1,
        _dx     = dx1,
        _dy     = dy1,

        _name   = name1,
    })

    -- test valid
    local isOfType = mobj_block2d.IsOfType(block2)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = mobj_block2d.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid x
    block2._x = "a string"
    isOfType = mobj_block2d.IsOfType(block2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    block2:setX(x1)

    -- test invalid y
    block2._y = "a string"
    isOfType = mobj_block2d.IsOfType(block2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    block2:setY(y1)

    -- test invalid dx
    block2._dx = "a string"
    isOfType = mobj_block2d.IsOfType(block2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    block2:setDx(dx1)

    -- test invalid dy
    block2._dy = "a string"
    isOfType = mobj_block2d.IsOfType(block2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    block2:setDy(dy1)

    -- test invalid name
    block2._name = 1000
    isOfType = mobj_block2d.IsOfType(block2)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    block2:setName(name1)

    -- cleanup test
end

function T_isSame()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d:isSame() tests")
    local block2 = mobj_block2d.Block2dClass:new({
        _x      = x1,
        _y      = y1,
        _dx     = dx1,
        _dy     = dy1,

        _name   = name1,
    })

    -- test same
    local isSame = block1:isSame(block2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different x
    block2:setX(x2)
    isSame = block1:isSame(block2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    block2:setX(x1)

    -- test different y
    block2:setY(y2)
    isSame = block1:isSame(block2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    block2:setY(y1)

    -- test different dx
    block2:setDx(dx2)
    isSame = block1:isSame(block2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    block2:setDx(dx1)

    -- test different dy
    block2:setDy(dy2)
    isSame = block1:isSame(block2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    block2:setDy(dy1)

    -- test different name
    block2:setName(name2)
    isSame = block1:isSame(block2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    block2:setName(name1)

    -- cleanup test
end

function T_copy()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d:copy() tests")

    -- test
    local copy = block1:copy()
    assert(copy:isSame(block1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(block1, compact)..")")

    -- cleanup test
end

function T_IsBlockList()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d.IsBlockList() tests")
    local block2 = mobj_block2d.Block2dClass:new({
        _x      = x2,
        _y      = y2,
        _name   = name2,
    })

    -- test two valid blocks
    local isBlockList = mobj_block2d.IsBlockList( { block1:copy(), block2:copy() } )
    local expectedIsBlockList = true
    assert(isBlockList == expectedIsBlockList, "gotten IsBlockList(="..tostring(isBlockList)..") not the same as expected(="..tostring(expectedIsBlockList)..")")

    -- test one valid block + one almost valid block
    block2._x = "a string"
    isBlockList = mobj_block2d.IsBlockList( { block1:copy(), block2:copy() } )
    expectedIsBlockList = false
    assert(isBlockList == expectedIsBlockList, "gotten IsBlockList(="..tostring(isBlockList)..") not the same as expected(="..tostring(expectedIsBlockList)..")")
    block2:setX(x1)

    -- test two valid blocks + different object
    isBlockList = mobj_block2d.IsBlockList( { block1:copy(), block2:copy(), "a string" } )
    expectedIsBlockList = false
    assert(isBlockList == expectedIsBlockList, "gotten IsBlockList(="..tostring(isBlockList)..") not the same as expected(="..tostring(expectedIsBlockList)..")")

    -- cleanup test
end

function T_IsSameBlockList()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d.IsSameBlockList() tests")
    local block2 = mobj_block2d.Block2dClass:new({
        _x      = x2,
        _y      = y2,
        _name   = name2,
    })

    -- test with same blocks in same order
    local isSameBlockList = mobj_block2d.IsSameBlockList(
        { block1:copy(), block2:copy() },
        { block1:copy(), block2:copy() }
    )
    local expectedIsSameBlockList = true
    assert(isSameBlockList == expectedIsSameBlockList, "gotten IsSameBlockList(="..tostring(isSameBlockList)..") not the same as expected(="..tostring(expectedIsSameBlockList)..")")

    -- test with 2 empty lists
    isSameBlockList = mobj_block2d.IsSameBlockList(
        { },
        { }
    )
    expectedIsSameBlockList = true
    assert(isSameBlockList == expectedIsSameBlockList, "gotten IsSameBlockList(="..tostring(isSameBlockList)..") not the same as expected(="..tostring(expectedIsSameBlockList)..")")

    -- test with same blocks in different order
    isSameBlockList = mobj_block2d.IsSameBlockList(
        { block1:copy(), block2:copy() },
        { block2:copy(), block1:copy() }
    )
    expectedIsSameBlockList = false
    assert(isSameBlockList == expectedIsSameBlockList, "gotten IsSameBlockList(="..tostring(isSameBlockList)..") not the same as expected(="..tostring(expectedIsSameBlockList)..")")

    -- test with different blocks
    isSameBlockList = mobj_block2d.IsSameBlockList(
        { block1:copy(), block2:copy() },
        { block1:copy(), mobj_block2d.Block2dClass:new({ _x = x3, _y = y2, _name = name2,}) }
    )
    expectedIsSameBlockList = false
    assert(isSameBlockList == expectedIsSameBlockList, "gotten IsSameBlockList(="..tostring(isSameBlockList)..") not the same as expected(="..tostring(expectedIsSameBlockList)..")")

    -- cleanup test
end

function T_BlockListCopy()
    -- prepare test
    corelog.WriteToLog("* mobj_block2d.BlockListCopy() tests")
    local block2 = mobj_block2d.Block2dClass:new({
        _x      = x2,
        _y      = y2,
        _name   = name2,
    })

    -- test
    local copy = mobj_block2d.BlockListCopy({ block1:copy(), block2:copy() })
    local expectedCopy = { block1:copy(), block2:copy() }
    assert(mobj_block2d.IsSameBlockList(copy, expectedCopy), "gotten BlockListCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(expectedCopy, compact)..")")

    -- cleanup test
end
