local queryPartURI = "?minecraft:birch_log=1&minecraft:torch=5"
local multipleStacksQueryPartURI = "?minecraft:birch_log=80&minecraft:torch=1"

local callbackFunction = "t_main.Func1_Callback"
local callbackData = {"some callback data"}

function T_DeleteChests()
    enterprise_chests.DeleteChests()
end

function T_RegisterAndUpdateChest()
    corelog.WriteToLog("* Test Register and Update chest")

    -- create project
    local projectData = {
        chestLocation        = {x= 16, y= 17, z= 1, dx=0, dy=1},
        chestAccessDirection = "back"
    }
    local serviceData = {
        projectDefinition = GetRegisterAndUpdateChestProject(),
        projectInputData = projectData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(serviceData, callbackFunction, callbackData)
end

function GetRegisterAndUpdateChestProject()
    return {
        services = {
            { serviceName = "enterprise_chests.RegisterChest_SSrv", async = false, input = {
                { keyName = "location"          , valueSource = 0, sourceKey = "chestLocation" },
                { keyName = "accessDirection"   , valueSource = 0, sourceKey = "chestAccessDirection" },
            }},
            { serviceName = "enterprise_chests.UpdateChestRecord_ASrv", async = true, input = {
                { keyName = "id"                , valueSource = 1, sourceKey = "id" },
            }},
            { serviceName = "enterprise_projects.AreAllTrue_QSrv", async = false, input = {
                { keyName = "success1"          , valueSource = 1, sourceKey = "success" },
                { keyName = "success2"          , valueSource = 2, sourceKey = "success" },
            }},
        },
        returnData = {
            { keyName = "success"               , valueSource = 3, sourceKey = "success" },
            { keyName = "id"                    , valueSource = 1, sourceKey = "id" },
        }
    }
end

local chest1Id = nil

function T_UpdateChestRecord1()
    corelog.WriteToLog("* Test UpdateChestRecord_ASrv 1")
    -- create chest data
    local chestIdData  = {
        id = chest1Id
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.UpdateChestRecord_ASrv("..textutils.serialize(chestIdData)..")")
    local result = enterprise_chests.UpdateChestRecord_ASrv(chestIdData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end

function T_RegisterChest1()
    corelog.WriteToLog("* Test RegisterChest_SSrv 1:")
    -- create chest data
    local chestData  = {
        location        = {x= 14, y= 17, z= 1, dx=0, dy=1},
        accessDirection = "top"
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.RegisterChest_SSrv("..textutils.serialize(chestData)..")")
    local result = enterprise_chests.RegisterChest_SSrv(chestData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
    if result.success then
        chest1Id = result.id
    end
end

function T_DelistChest1()
    corelog.WriteToLog("* Test DelistChests 1:")
    -- create chest data 1
    local chestData1  = {
        id = chest1Id
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.DelistChest_ASrv("..textutils.serialize(chestData1)..")")
    enterprise_chests.DelistChest_ASrv(chestData1, callbackFunction, callbackData)
end

function T_GetItemsIntoTurtle1()
    corelog.WriteToLog("* Test GetItemsIntoTurtle_ASrv for chests:")
    -- create transferData
    local sourceURL = enterprise_chests.GetChestURL_SSrv({id = chest1Id}).url
    sourceURL:setQueryURI(multipleStacksQueryPartURI)
    local transferData = {
        sourceURL =  sourceURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.GetItemsIntoTurtle_ASrv("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    enterprise_chests.GetItemsIntoTurtle_ASrv(transferData, callbackFunction, callbackData)
end

function T_PutItemsFromTurtle1()
    corelog.WriteToLog("* Test PutItemsFromTurtle_ASrv for chests:")
    -- create transferData
    local currentTurtleId = os.getComputerID()
    local turtleSourceURL = enterprise_turtle.GetTurtleURL_SSrv({turtleId = currentTurtleId}).url
    turtleSourceURL:setQueryURI(multipleStacksQueryPartURI)
    local destinationURL = enterprise_chests.GetChestURL_SSrv({id = chest1Id}).url
    local transferData = {
        turtleSourceURL = turtleSourceURL,
        destinationURL  = destinationURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.PutItemsFromTurtle_ASrv("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    enterprise_chests.PutItemsFromTurtle_ASrv(transferData, callbackFunction, callbackData)
end

function T_ItemsAvailableVia1()
    corelog.WriteToLog("* Test ItemsAvailableVia_ASrv for chest:")
    -- create transferData
    local queryURL = enterprise_chests.GetChestURL_SSrv({id = chest1Id}).url
    queryURL:setQueryURI(queryPartURI)
    local queryData = {
        itemQueryURL = queryURL,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.ItemsAvailableVia_ASrv("..textutils.serialize(queryData)..")")
    local result = enterprise_chests.ItemsAvailableVia_ASrv(queryData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end
