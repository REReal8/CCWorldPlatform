local testStartLocation  = {x= -6, y= 0, z= 1, dx=0, dy=1}
local testStartLocation2  = {x= -6, y= 6, z= 1, dx=0, dy=1}
local itemsQuery = {
    ["minecraft:birch_log"] = 1,
    ["minecraft:torch"]     = 5,
}
local multipleStacksItemsQuery = {
    ["minecraft:birch_log"] = 80,
    ["minecraft:torch"]     = 1,
}

local callbackFunction = "t_main.Func1_Callback"
local callbackData = {"some callback data"}

function T_DeleteChests()
    enterprise_chests.DeleteChests()
end

function T_RegisterAndUpdateChest()
    corelog.WriteToLog("* Test Register and Update chest")

    -- create project
    local projectData = {
        chestLocation        = coremove.GetRelativeLocation(testStartLocation2, 2, 5, 0),
        chestAccessDirection = "back"
    }
    local projectServiceData = {
        projectDef  = GetRegisterAndUpdateChestProjectDef(),
        projectData = projectData,
    }

    -- start project
    enterprise_projects.StartProject_ASrv(projectServiceData, callbackFunction, callbackData)
end

function GetRegisterAndUpdateChestProjectDef()
    return {
        steps = {
            { stepName = "enterprise_chests.RegisterChest_SSrv", async = false, stepDataDef = {
                { keyDef = "location"           , valueSource = 0, keyDefSource = "chestLocation" },
                { keyDef = "accessDirection"    , valueSource = 0, keyDefSource = "chestAccessDirection" },
            }},
            { stepName = "enterprise_chests.UpdateChestRecord_ASrv", async = true, stepDataDef = {
                { keyDef = "chestLocator"       , valueSource = 1, keyDefSource = "chestLocator" },
            }},
            { stepName = "enterprise_projects.AreAllTrue_QSrv", async = false, stepDataDef = {
                { keyDef = "success1"           , valueSource = 1, keyDefSource = "success" },
                { keyDef = "success2"           , valueSource = 2, keyDefSource = "success" },
            }},
        },
        returnData = {
            { keyDef = "success"                , valueSource = 3, keyDefSource = "success" },
            { keyDef = "chestLocator"           , valueSource = 1, keyDefSource = "chestLocator" },
        }
    }
end

local chestLocator1 = nil

function T_UpdateChestRecord1()
    corelog.WriteToLog("* Test UpdateChestRecord_ASrv 1")
    -- create chest data
    local serviceData = {
        chestLocator = chestLocator1
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.UpdateChestRecord_ASrv("..textutils.serialize(serviceData)..", , )")
    local result = enterprise_chests.UpdateChestRecord_ASrv(serviceData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end

function T_RegisterChest1()
    corelog.WriteToLog("* Test RegisterChest_SSrv 1:")
    -- create chest data
    local chestData  = {
        location        = coremove.GetRelativeLocation(testStartLocation, 2, 5, 0),
        accessDirection = "top"
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.RegisterChest_SSrv("..textutils.serialize(chestData)..")")
    local result = enterprise_chests.RegisterChest_SSrv(chestData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
    if result.success then
        chestLocator1 = result.chestLocator
    end
end

function T_DelistChest1()
    corelog.WriteToLog("* Test DelistChests 1:")
    -- create chest data 1
    local chestData1 = {
        chestLocator = chestLocator1
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.DelistChest_ASrv("..textutils.serialize(chestData1)..")")
    enterprise_chests.DelistChest_ASrv(chestData1, callbackFunction, callbackData)
end

function T_GetItemsIntoTurtle1()
    corelog.WriteToLog("* Test GetItemsIntoTurtle_ASrv for chests:")
    -- create transferData
    local sourceItemsLocator = enterprise_chests.GetItemsLocator_SSrv({chestLocator = chestLocator1, itemsQuery = multipleStacksItemsQuery}).itemsLocator
    local transferData = {
        sourceItemsLocator =  sourceItemsLocator,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.GetItemsIntoTurtle_ASrv("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    local result = enterprise_chests.GetItemsIntoTurtle_ASrv(transferData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end

function T_PutItemsFromTurtle1()
    corelog.WriteToLog("* Test PutItemsFromTurtle_ASrv for chests:")
    -- create transferData
    local turtleItemsLocator = enterprise_turtle.GetItemsLocator_SSrv({ turtleId = os.getComputerID(), itemsQuery = multipleStacksItemsQuery }).itemsLocator
    local destinationHostLocator = chestLocator1
    local transferData = {
        turtleItemsLocator     = turtleItemsLocator,
        destinationHostLocator = destinationHostLocator,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.PutItemsFromTurtle_ASrv("..textutils.serialize(transferData)..","..callbackFunction..","..textutils.serialize(callbackData)..")")
    local result = enterprise_chests.PutItemsFromTurtle_ASrv(transferData, callbackFunction, callbackData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end

function T_ItemsAvailableVia1()
    corelog.WriteToLog("* Test ItemsAvailableVia_SSrv for chest:")
    -- create transferData
    local itemsLocator = enterprise_chests.GetItemsLocator_SSrv({chestLocator = chestLocator1, itemsQuery = itemsQuery}).itemsLocator
    local queryData = {
        itemsLocator = itemsLocator,
    }

    -- call test method
    corelog.WriteToLog("  calling enterprise_chests.ItemsAvailableVia_SSrv("..textutils.serialize(queryData)..")")
    local result = enterprise_chests.ItemsAvailableVia_SSrv(queryData)
    corelog.WriteToLog("  result="..textutils.serialize(result))
end
