local level0 = 0
local location1 = {x= 0, y= 0, z= 1, dx=0, dy=1}
local nTrees = 1
local level2 = 1
local location2 = {x= 6, y= 12, z= 1, dx=0, dy=1}
local nTrees2 = 2
local localLogsLocator
local localSaplingsLocator

function T_All()
    T_Getters()
    T_Setters()
    T_getFuelNeed_Harvest_Att()
    T_getFuelNeedExtraTree_Att()
    T_needsTo_ProvideItemsTo_SSrv()
    T_can_ProvideItems_QSrv()
end

function T_Getters()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest getter tests")
    local id = coreutils.NewId()
    local forest = CreateForest(level0, location1, id) if not forest then corelog.Error("failed obtaining forest") return end

    -- test
    assert(forest:getId() == id, "gotten id(="..forest:getId()..") not the same as expected(="..id..")")
    assert(forest:getLevel() == level0, "gotten level(="..forest:getLevel()..") not the same as expected(="..level0..")")
    assert(forest:getLocation() == location1, "gotten getLocation(="..textutils.serialize(forest:getId())..") not the same as expected(="..textutils.serialize(location1)..")")
    assert(forest:getNTrees() == nTrees, "gotten nTrees(="..forest:getNTrees()..") not the same as expected(="..nTrees..")")
    assert(forest:getLocalLogsLocator() == localLogsLocator, "gotten localLogsLocator(="..forest:getLocalLogsLocator():getURI()..") not the same as expected(="..localLogsLocator:getURI()..")")
    assert(forest:getLocalSaplingsLocator() == localSaplingsLocator, "gotten localSaplingsLocator(="..forest:getLocalSaplingsLocator():getURI()..") not the same as expected(="..localSaplingsLocator:getURI()..")")

    -- cleanup test
end

function CreateForest(level, location, id)
    -- check input
    level = level or level0
    location = location or location1
    id = id or coreutils.NewId()
    localLogsLocator = localLogsLocator or enterprise_turtle.GetHostLocator_Att()
    localSaplingsLocator = localSaplingsLocator or enterprise_turtle.GetHostLocator_Att()

    -- create forest object
    local forest = mobj_birchforest.BirchForestClass:new({
        _id                     = id,
        _forestLevel            = level,

        _location               = location,
        _nTrees                 = nTrees,

        _localLogsLocator       = localLogsLocator,
        _localSaplingsLocator   = localSaplingsLocator,
    })

    -- end
    return forest
end

function T_Setters()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest setter tests")
    local forest = CreateForest() if not forest then corelog.Error("failed obtaining forest") return end
    local localLogsLocator2 = enterprise_chests.GetHostLocator_Att()
    local localSaplingsLocator2 = enterprise_chests.GetHostLocator_Att()

    -- test
    forest:setLevel(level2)
    assert(forest:getLevel() == level2, "gotten level(="..forest:getLevel()..") not the same as expected(="..level2..")")
    forest:setLocation(location2)
    assert(forest:getLocation() == location2, "gotten getLocation(="..textutils.serialize(forest:getId())..") not the same as expected(="..textutils.serialize(location2)..")")
    forest:setNTrees(nTrees2)
    assert(forest:getNTrees() == nTrees2, "gotten nTrees(="..forest:getNTrees()..") not the same as expected(="..nTrees2..")")
    forest:setLocalLogsLocator(localLogsLocator2)
    assert(forest:getLocalLogsLocator() == localLogsLocator2, "gotten localLogsLocator(="..forest:getLocalLogsLocator():getURI()..") not the same as expected(="..localLogsLocator2:getURI()..")")
    forest:setLocalSaplingsLocator(localSaplingsLocator2)
    assert(forest:getLocalSaplingsLocator() == localSaplingsLocator2, "gotten localLogsLocator(="..forest:getLocalSaplingsLocator():getURI()..") not the same as expected(="..localSaplingsLocator2:getURI()..")")

    -- cleanup test
end

function T_getFuelNeed_Harvest_Att()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest:getFuelNeed_Harvest_Att() tests")
    local forest = CreateForest() if not forest then corelog.Error("failed obtaining forest") return end

    -- test
    local fuelNeed = forest:getFuelNeed_Harvest_Att()
    local expectedFuelNeed = 36
    assert(fuelNeed == expectedFuelNeed, "gotten fuelNeed(="..fuelNeed..") for "..nTrees.."trees not the same as expected(="..expectedFuelNeed..")")

    forest:setNTrees(nTrees2)
    fuelNeed = forest:getFuelNeed_Harvest_Att()
    expectedFuelNeed = 2*36 + 2 * 6
    assert(fuelNeed == expectedFuelNeed, "gotten fuelNeed(="..fuelNeed..") for "..nTrees2.."trees not the same as expected(="..expectedFuelNeed..")")

    -- cleanup test
end

function T_getFuelNeedExtraTree_Att()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest:getFuelNeedExtraTree_Att() tests")
    local forest = CreateForest() if not forest then corelog.Error("failed obtaining forest") return end

    -- test
    local fuelNeed = forest:getFuelNeedExtraTree_Att()
    local expectedFuelNeed = 36 + 2*6
    assert(fuelNeed == expectedFuelNeed, "gotten fuelNeed(="..fuelNeed..") for "..nTrees.."trees not the same as expected(="..expectedFuelNeed..")")

    forest:setNTrees(nTrees2)
    fuelNeed = forest:getFuelNeedExtraTree_Att()
    expectedFuelNeed = 36 + 2*6
    assert(fuelNeed == expectedFuelNeed, "gotten fuelNeed(="..fuelNeed..") for "..nTrees2.."trees not the same as expected(="..expectedFuelNeed..")")

    -- cleanup test
end

function T_needsTo_ProvideItemsTo_SSrv()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest:needsTo_ProvideItemsTo_SSrv() tests")
    local forest = CreateForest() if not forest then corelog.Error("failed obtaining forest") return end
    local provideItems = {
        ["minecraft:birch_log"]  = 5,
    }
    local storageLocator = enterprise_turtle.GetHostLocator_Att()

    -- test
    local needsTo_Provide = forest:needsTo_ProvideItemsTo_SSrv({
        provideItems    = provideItems,
        storageLocator  = storageLocator,
    })
    local expectedFuelNeed = role_forester.FuelNeededPerRound(nTrees)
    assert(needsTo_Provide.success, "needsTo_ProvideItemsTo_SSrv failed")
    assert(needsTo_Provide.fuelNeed == expectedFuelNeed, "fuelNeed(="..needsTo_Provide.fuelNeed..") not the same as expected(="..expectedFuelNeed..")")
    assert(#needsTo_Provide.ingredientsNeed == 0, "ingredientsNeed(="..#needsTo_Provide.ingredientsNeed..") not the same as expected(=0)")

    -- cleanup test
end

function T_can_ProvideItems_QSrv()
    -- prepare test
    corelog.WriteToLog("* mobj_birchforest:can_ProvideItems_QSrv() tests")
    local forest = CreateForest() if not forest then corelog.Error("failed obtaining forest") return end

    -- test
    local itemName = "minecraft:birch_log"
    local itemCount = 20
    local serviceResults = forest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(serviceResults.success, "can_ProvideItems_QSrv incorrectly failed for "..itemCount.." "..itemName.."'s")

    itemName = "minecraft:birch_sapling"
    itemCount = 2
    serviceResults = forest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(serviceResults.success, "can_ProvideItems_QSrv incorrectly failed for "..itemCount.." "..itemName.."'s")

    itemName = "minecraft:dirt"
    itemCount = 10
    serviceResults = forest:can_ProvideItems_QSrv({ provideItems = { [itemName] = itemCount} })
    assert(not serviceResults.success, "can_ProvideItems_QSrv incorrectly success for "..itemCount.." "..itemName.."'s")

    -- cleanup test
end
