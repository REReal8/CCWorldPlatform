function T_All()
    T_IsCodeArray()
    T_IsSameCodeArray()
    T_CodeArrayCopy()

    T_IsCodeMap()
    T_IsSameCodeMap()
    T_CodeMapCopy()

    T_new()
    T_IsOfType()
    T_isSame()
    T_copy()
    T_blocksNeeded()
    T_itemsNeeded()
    T_ParseWithCheckInput()
end

local codeArray1 = {
    ["T"]   = "minecraft:torch",
    ["S"]   = "minecraft:birch_sapling",
    ["?"]   = mobj_block2d.AnyBlockName(),
    [" "]   = mobj_block2d.NoneBlockName(),
}

function T_IsCodeArray()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.IsCodeArray tests")

    -- test valid
    local isOfType = mobj_layer_rectangle.LayerRectangle.IsCodeArray(codeArray1)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsCodeArray(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = mobj_layer_rectangle.LayerRectangle.IsCodeArray("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsCodeArray(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- cleanup test
end

function T_IsSameCodeArray()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.IsSameCodeArray() tests")
    local codeArray2 = {
        ["T"]   = "minecraft:torch",
        ["S"]   = "minecraft:birch_sapling",
        ["?"]   = mobj_block2d.AnyBlockName(),
        [" "]   = mobj_block2d.NoneBlockName(),
    }

    -- test same
    local isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeArray(codeArray1, codeArray2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten IsSameCodeArray(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different
    codeArray2["T"] = "minecraft:something"
    isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeArray(codeArray1, codeArray2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten IsSameCodeArray(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    codeArray2["T"] = "minecraft:torch"

    -- test different (size)
    codeArray2["Z"] = "minecraft:something"
    isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeArray(codeArray1, codeArray2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten IsSameCodeArray(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    codeArray2["Z"] = nil

    -- cleanup test
end

local compact = { compact = true }

function T_CodeArrayCopy()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.CodeArrayCopy() tests")

    -- test
    local copy = mobj_layer_rectangle.LayerRectangle.CodeArrayCopy(codeArray1)
    assert(mobj_layer_rectangle.LayerRectangle.IsSameCodeArray(copy, codeArray1), "gotten CodeArrayCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(codeArray1, compact)..")")

    -- cleanup test
end

local codeMap1 = {
    [6] = "     ?",
    [5] = "      ",
    [4] = "T  S  ",
    [3] = "  ?   ",
    [2] = "      ",
    [1] = "   T  ",
}

function T_IsCodeMap()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.IsCodeMap tests")

    -- test valid
    local isOfType = mobj_layer_rectangle.LayerRectangle.IsCodeMap(codeMap1)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsCodeMap(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = mobj_layer_rectangle.LayerRectangle.IsCodeMap("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsCodeMap(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- cleanup test
end

function T_IsSameCodeMap()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.IsSameCodeMap() tests")
    local codeMap2 = {
        [6] = "     ?",
        [5] = "      ",
        [4] = "T  S  ",
        [3] = "  ?   ",
        [2] = "      ",
        [1] = "   T  ",
    }

    -- test same
    local isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeMap(codeMap1, codeMap2)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten IsSameCodeMap(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different
    codeMap2[4] = "TTTSTT"
    isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeMap(codeMap1, codeMap2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten IsSameCodeMap(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    codeMap2[4] = "T  S  "

    -- test different (size)
    codeMap2[7] = "TT  TT"
    isSame = mobj_layer_rectangle.LayerRectangle.IsSameCodeMap(codeMap1, codeMap2)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten IsSameCodeMap(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    codeMap2[7] = nil

    -- cleanup test
end

function T_CodeMapCopy()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.CodeMapCopy() tests")

    -- test
    local copy = mobj_layer_rectangle.LayerRectangle.CodeMapCopy(codeMap1)
    assert(mobj_layer_rectangle.LayerRectangle.IsSameCodeMap(copy, codeMap1), "gotten CodeMapCopy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(codeMap1, compact)..")")

    -- cleanup test
end

local layer1 = mobj_layer_rectangle.LayerRectangle:new({
    _codeArray  = codeArray1,
    _codeMap    = codeMap1,
})

function T_new()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle:new() tests")

    -- test full
    local layer = mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = codeArray1,
        _codeMap    = codeMap1,
    })
    local expectedNColumns = 6
    assert(layer:getNColumns() == expectedNColumns, "gotten getNColumns(="..layer:getNColumns()..") not the same as expected(="..expectedNColumns..")")
    local expectedNRows = 6
    assert(layer:getNRows() == expectedNRows, "gotten getNRows(="..layer:getNRows()..") not the same as expected(="..expectedNRows..")")
    local code = layer:getCode(4, 1)
    local expectedCode = "T"
    assert(code == expectedCode, "gotten code(="..code..") not the same as expected(="..expectedCode..")")
    code = layer:getCode(1, 4)
    assert(code == expectedCode, "gotten code(="..code..") not the same as expected(="..expectedCode..")")
    code = layer:getCode(4, 4)
    expectedCode = "S"
    assert(code == expectedCode, "gotten code(="..code..") not the same as expected(="..expectedCode..")")

    -- test default
    layer = mobj_layer_rectangle.LayerRectangle:new()
    expectedNColumns = 0
    assert(layer:getNColumns() == expectedNColumns, "gotten getNColumns(="..layer:getNColumns()..") not the same as expected(="..expectedNColumns..")")
    expectedNRows = 0
    assert(layer:getNRows() == expectedNRows, "gotten getNRows(="..layer:getNRows()..") not the same as expected(="..expectedNRows..")")

    -- cleanup test
end

function T_IsOfType()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle.IsOfType() tests")
    local layer = mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = mobj_layer_rectangle.LayerRectangle.CodeArrayCopy(codeArray1),
        _codeMap    = mobj_layer_rectangle.LayerRectangle.CodeMapCopy(codeMap1),
    })

    -- test valid
    local isOfType = mobj_layer_rectangle.LayerRectangle.IsOfType(layer)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test different object
    isOfType = mobj_layer_rectangle.LayerRectangle.IsOfType("a atring")
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- test invalid _codeArray
    layer._codeArray = "a string"
    isOfType = mobj_layer_rectangle.LayerRectangle.IsOfType(layer)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    layer._codeArray = mobj_layer_rectangle.LayerRectangle.CodeArrayCopy(codeArray1)

    -- test invalid _codeMap
    layer._codeMap = "a string"
    isOfType = mobj_layer_rectangle.LayerRectangle.IsOfType(layer)
    expectedIsOfType = false
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")
    layer._codeMap = mobj_layer_rectangle.LayerRectangle.CodeMapCopy(codeMap1)

    -- cleanup test
end

function T_isSame()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle:isSame() tests")
    local layer = mobj_layer_rectangle.LayerRectangle:new({
        _codeArray  = mobj_layer_rectangle.LayerRectangle.CodeArrayCopy(codeArray1),
        _codeMap    = mobj_layer_rectangle.LayerRectangle.CodeMapCopy(codeMap1),
    })

    -- test same
    local isSame = layer1:isSame(layer)
    local expectedIsSame = true
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")

    -- test different _codeArray
    layer._codeArray = {
        ["T"]   = "minecraft:torch",
    }
    isSame = layer1:isSame(layer)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    layer._codeArray = mobj_layer_rectangle.LayerRectangle.CodeArrayCopy(codeArray1)

    -- test different _codeMap
    layer._codeMap = {
        [2] = "      ",
        [1] = "   T  ",
    }
    isSame = layer1:isSame(layer)
    expectedIsSame = false
    assert(isSame == expectedIsSame, "gotten isSame(="..tostring(isSame)..") not the same as expected(="..tostring(expectedIsSame)..")")
    layer._codeMap = mobj_layer_rectangle.LayerRectangle.CodeMapCopy(codeMap1)

    -- cleanup test
end

function T_copy()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle:copy() tests")

    -- test
    local copy = layer1:copy()
    assert(copy:isSame(layer1), "gotten copy(="..textutils.serialize(copy, compact)..") not the same as expected(="..textutils.serialize(layer1, compact)..")")

    -- cleanup test
end

function T_blocksNeeded()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle:blocksNeeded() tests")

    -- test
    local needed = layer1:blocksNeeded()
    local name = "minecraft:torch"
    local expectedCount = 2
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = "minecraft:birch_sapling"
    expectedCount = 1
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = mobj_block2d.AnyBlockName()
    expectedCount = 2
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = mobj_block2d.NoneBlockName()
    expectedCount = 6*6 - 2 - 1 - 2
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")

    -- cleanup test
end

function T_itemsNeeded()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle:itemsNeeded() tests")

    -- test
    local needed = layer1:itemsNeeded()
    local name = "minecraft:torch"
    local expectedCount = 2
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = "minecraft:birch_sapling"
    expectedCount = 1
    assert(needed[name] == expectedCount, "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = mobj_block2d.AnyBlockName()
    expectedCount = 0
    assert(not needed[name], "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")
    name = mobj_block2d.NoneBlockName()
    expectedCount = 0
    assert(not needed[name], "gotten count(="..(needed[name] or 0)..") for "..name.."'s not the same as expected(="..expectedCount..")")

    -- cleanup test
end

function T_ParseWithCheckInput()
    -- prepare test
    corelog.WriteToLog("* LayerRectangle parsing with CheckInput tests")

    -- test
    local checkSuccess, layer = coreutils.CheckInput([[
        Parameters:
            layer   + (LayerRectangle) object to retrieve from arg
    ]], table.unpack({ textutils.unserialize(textutils.serialize(layer1)) }))
    if not checkSuccess then corelog.Error("t_mobj_layer_rectangle.T_ParseWithCheckInput: Invalid input") return {success = false} end
    local isOfType = mobj_layer_rectangle.LayerRectangle.IsOfType(layer)
    local expectedIsOfType = true
    assert(isOfType == expectedIsOfType, "gotten IsOfType(="..tostring(isOfType)..") not the same as expected(="..tostring(expectedIsOfType)..")")

    -- cleanup test
end
