local db	= {
	dbFilename  	= "/db/coreutils.lua",
	protocol		= "coreutils",
    serial			= 0,                                -- for unique id's
}

-- laatste serial uit de file lezen?
function Init()
	-- read from file
	local dbFile = ReadTableFromFile(db.dbFilename)

	-- check for empty table --> https://stackoverflow.com/questions/1252539/most-efficient-way-to-determine-if-a-lua-table-is-empty-contains-no-entries
	if next(dbFile) ~= nil then db = dbFile end

	-- uniek random nummer
	math.randomseed(os.time())
end

-- niet nodig voor utils
function Setup()
	-- start sending messages when we are ready to receive them too
	coreevent.EventReadyFunction(EventReadySetup)		-- ToDo: consider removing as nothing is done
end

function EventReadySetup()
	-- startup, read from disk or get data from peers? Why not both!
--	coreevent.SendMessage({protocol=db.protocol, subject="what is the current time"})
end

-- generates a new id
function NewId()

	-- eentje ophogen
	db.serial = db.serial + 1

	-- write to disk
	WriteToFile(db.dbFilename, db, "overwrite")

	-- id is een altijd een string
	return os.getComputerID() .. ":" .. db.serial
end

function IdCreator(id)
	local t	= {}

	-- split op :
	for str in string.gmatch(id, "([^:]+)") do table.insert(t, str) end

	-- waarde voor de : is de creator
	return t[0]
end

function IdSerial(id)
	local t	= {}

	-- split op :
	for str in string.gmatch(id, "([^:]+)") do table.insert(t, str) end

	-- waarde voor de : is de creator
	return t[1]
end

function ReadTableFromFile(filename)
	-- does the db file exist?
	if fs.exists(filename) then
		-- var's
		local fh = fs.open(filename, 'r')

		-- read from the file
		local text = fh.readAll()

		-- text to table
		local tbl = textutils.unserialize(text)

		-- close the file
		fh.close()

		-- return the table
		return tbl
	end

	-- still here? empty table
	return {}
end

function WriteToFile(filename, message, writemode)
	local mode	= "a"

	-- check writemode
	if writemode == "overwrite" then mode = "w" end

	-- if we get a table, make it a string
	if type(message) == "table" then message = textutils.serialize(message)	end

	-- bestandsnaam controleren, moet gewoon een string zijn natuurlijk
	if type(filename) ~= "string" then filename = db.logfile message = message..debug.traceback() end

	-- bestand openen, schrijven en sluiten
	local fileHandle = fs.open(filename, mode)
	if fileHandle then
		fileHandle.writeLine(message)
		fileHandle.close()
	else
		print("Cannot open file "..filename)
	end
end

function UniversalTime()
	return 24 * os.day() + os.time() -- https://computercraft.info/wiki/Os.time (waarde tussen 0 en 23.999)
end

function CoreUtilsProtocolName() -- ToDo: is this used? If not consider removing (including protocol variable from db)
	return db.protocol
end

function DoCallback(callback, callbackData, result)
    -- check input
    if type(callback) ~= "string" then corelog.Error("coreutils.DoCallback: Invalid callback function") return nil end
    if type(callbackData) ~= "table" then corelog.Error("coreutils.DoCallback: Invalid callbackData") return nil end
    if type(result) ~= "table" then corelog.Error("coreutils.DoCallback: Invalid calback result") return nil end

    -- call callBack function
    local stringToLoad = callback.."("..textutils.serialize(callbackData)..","..textutils.serialize(result).. ")"
    local f, err = loadstring(stringToLoad)
    if f then f() else corelog.Error("coreutils.DoCallback: loadstring("..stringToLoad..") did not supply a function, error given: "..err) end
end

function DoSyncService(service, serviceData)
	-- check input
	if type(service) ~= "string" then corelog.Error("coreutils.DoSyncService: Invalid service function") return nil end
	if type(serviceData) ~= "table" then corelog.Error("coreutils.DoSyncService: Invalid serviceData") return nil end

    -- check service actually exists
    -- ToDo: implement

	-- sync function call, use the results
	local f, err = loadstring("return "..service.."("..textutils.serialize(serviceData)..")")
	if not f then corelog.Error("coreutils.DoSyncService(): loadstring did not supply a function, error given: "..err) return end

	-- execute the step
	local results = f()

	-- end
	return results
end

--                         _
--                        | |
--     _____   _____ _ __ | |_ ___
--    / _ \ \ / / _ \ '_ \| __/ __|
--   |  __/\ V /  __/ | | | |_\__ \
--    \___| \_/ \___|_| |_|\__|___/
--
--
