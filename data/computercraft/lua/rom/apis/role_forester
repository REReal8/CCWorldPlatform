-- the table that stores the data
local db = {
    job         = "forester",
    schaarste   = true,
}

-- functions
function Rondje(funcData)
    -- debug
    corelog.WriteToLog("Forester.Rondje()")
    corelog.WriteToLog("Forester.Rondje("..textutils.serialize(funcData)..")")

    local axePresent    = coreinventory.Equip("minecraft:diamond_pickaxe")

    -- stop if we don't meet the needs
    if not axePresent then
        -- no good
        print("Missing item(s) for Rondje:")
        if not axePresent       then print ("* Need a diamond axe") end

        -- done here
        return false
    end

    -- init
    local depth = funcData.depth
    local width = funcData.width
    local dontCleanup = funcData.dontCleanup
--    print ("Rondje with: depth=" .. depth .. ", width=" .. width .. ", dontCleanup=" .. tostring(dontCleanup))

    -- eerst in positie komen (in de stam van de eerste boom)
    coremove.Up()
    Vooruit(1)

    -- naar de tweede boomn lopen, start positie van de lussen
    if depth > 1 then Vooruit(6) end

    -- banen langs lopen
    local aantalBanen = math.floor(width / 2)
    for i=1, aantalBanen do
        -- move to "top right" baan
        Vooruit(6 * (depth - 2))

        -- move to "top left" baan
        coremove.Left()
        Vooruit(6)
        coremove.Left()

        -- move to "bottom left" baan
        Vooruit(6 * (depth - 2))
        -- laatste bocht niet maken
        if i ~= aantalBanen then
            -- move to start ("bottom right") next baan
            coremove.Right()
            Vooruit(6)
            coremove.Right()
        end
    end

    -- terug naar huis, kan wat speciale dingen met zich mee brengen
    if aantalBanen == 0 then coremove.Right(2)  end
    if depth    > 1 then Vooruit(6)         end

    -- over de volledige breedte terug naar
    coremove.Left()
    Vooruit(6 * (width - 1))

    -- terug in positie
    coremove.Left()
    coremove.Backward()
    coremove.Down()

    -- spullen opruimen
    if not dontCleanup then
        Opruimen()
    end
end

function Vooruit(aantal)
    aantal = aantal or 1

    -- het gewenste aantal stappen zetten
    for stap = 1, aantal do

        -- staat er een boom recht voor ons?
        if DetecteedBoom() then

            -- ja, omhakken dus (doet meteen een stap naar voren)
            KapBoom()
        else

            -- niks te zien, gewoon vooruit
            coremove.Forward()
        end
    end
end

function DetecteedBoom()
    local success, data = turtle.inspect()

    -- staat er een berkenboom voor onze neus?
    return success and type(data) == "table" and data.name == "minecraft:birch_log"
end

function KapBoom() -- kost ongeveer 37 movement (inclusief buiten bladeren) - 1 blok hout levert ~ 70 movement op
    local schaarste = true
    local hoogte    = 1

    -- eerste stukkie stam weghalen en op de plek van de stam gaan staan
    turtle.dig()
    coremove.Forward(1)
    turtle.digDown()

    -- omhoog gaan totdat we bladeren zien
    while not turtle.inspect() do
        -- omhoog
        turtle.digUp()
        coremove.Up()

        -- bijhouden
        hoogte = hoogte + 1
    end

    -- eentje boven de eerste bladen staan
    turtle.digUp()
    coremove.Up()

    -- al het hout is weg (op het top blok na), nu de bladeren
    OogstBladerenVolledig()
    -- if schaarste then OogstBladerenBuitenkant(true) end
    -- OogstBladerenBuitenkant(false)

    -- terug (top blok nog ff hakken)
    turtle.digUp()

    -- do we need the crown too?
    if coreinventory.CountItem("minecraft:birch_sapling") < 2 then ChopCrown() end

    -- back to where we started
    coremove.Down(hoogte)

    -- staat er een berkenboom sapling voor onze neus?
    local success, data = turtle.inspectDown()
    if not success or type(data) ~= "table" or data.name ~= "minecraft:birch_sapling" then

        -- als er een blok staat, weghalen
        if success then turtle.digDown() end

        -- hebben we nu een sappling?
        if coreinventory.SelectItem("minecraft:birch_sapling")  then turtle.placeDown()
                                                                else corelog.Error("No birch sapling to plant") end
    end
end

function OogstBladerenVolledig()
-- 561→2
-- ↑↓↑9↓
-- ↑↓0↑↓
-- ↑7→8↓
-- 4←←←3

    OogstBladerenForward(true)
    OogstBladerenForward(false)
    coremove.Right()            -- 1
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    coremove.Right()            -- 2
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    coremove.Right()            -- 3
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    coremove.Right()            -- 4
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    OogstBladerenForward(false)
    coremove.Right()            -- 5
    OogstBladerenForward(false)
    coremove.Right()            -- 6
    OogstBladerenForward(true)
    OogstBladerenForward(true)
    OogstBladerenForward(true)
    coremove.Left()             -- 7
    OogstBladerenForward(true)
    OogstBladerenForward(true)
    coremove.Left()             -- 8
    OogstBladerenForward(true)
    OogstBladerenForward(true)
    coremove.Left()             -- 9
    coremove.Forward()
    coremove.Right()
    coremove.Backward()         -- returg op 0
end

function OogstBladerenForward(ookBoven)
    turtle.dig()
    coremove.Forward()
    if ookBoven then turtle.digUp() end
    turtle.digDown()
end

function OogstBladerenBuitenkant(buitenKant)
    -- in positie komen, twee vooruit en draaien
    if buitenKant then turtle.dig() coremove.Forward() end
    turtle.dig()
    coremove.Forward()
    coremove.Right()

    -- 4x een hoek nemen
    for i=1,4 do
        -- twee stappen naar de hoek
        if buitenKant then OogstBladerenStap(not buitenKant) end
        OogstBladerenStap(not buitenKant)

        -- draaien
        coremove.Right()

        -- twee stappen naar het midden
        if buitenKant then OogstBladerenStap(not buitenKant) end
        OogstBladerenStap(not buitenKant)
    end

    -- terug lopen
    coremove.Left()
    if buitenKant then coremove.Backward() end
    coremove.Backward()
end

function OogstBladerenStap(ookBoven)
    turtle.digDown()
    if ookBoven then turtle.digUp() end
    turtle.dig()
    coremove.Forward()
end

function ChopCrown()
    -- get to the crown
    for i=1,2 do coremove.Up() turtle.digUp() end

    -- dig around
    for i=1,4 do turtle.dig() coremove.Right() end

    -- back into position
    for i=1,2 do coremove.Down() end
end

function Opruimen()
    coremove.Backward()
    coremove.Left()
    coreinventory.DropAll("minecraft:birch_sapling")
    coreinventory.GetEmptySlot()
    turtle.suck(64)
    coremove.Left()
    coremove.Left()
    coreinventory.DropAll("minecraft:stick")
    coremove.Left()
    coremove.Forward()
    coremove.Right()
    coremove.Forward()
    coreinventory.DropAll("minecraft:birch_log")
    coremove.Backward()
    coremove.Left()
end
