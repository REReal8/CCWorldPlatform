ToDo List
---------

R  WIPAdministrator (formerly knows as AdministrationOffice)   (done)
   R  introduce enterprise_administration                      (done)
   R  finish WIPAdministrator                                  (done)
      R  load/ save itself after one if the 3 WIP calls        (done)
   R  enterprise_project: optionally administer project started and completed in WIPAdministrator  (done)
   R  write WIPAdministrator tests                             (done)

R  finish MObjHost
   R  test delistMObj_SSrv and removeMObj_ASrv
   R  remove completeRunningBusiness_AOSrv from IMObj interface   (done)
   R  rewrite waiting for completion of running business (remove usage of completeRunningBusiness_AOSrv + use WIPAdministrator)  (done)

RG ensure all MObj's follow IMObj interface
   R  mobj_birchforest
   R  mobj_chest
   R  mobj_factory
   G  mobj_mine
   R  mobj_production_spot
   G  mobj_shop
   R  mobj_silo
   R  mobj_turtle

R  use MObjHost class
   R  make enterprise_factory, enterprise_forest and enterprise_storage into an MObjHost
   R  use new MObjHost methods instead of current equivalent

-  Support building blueprints (layers) from front

G moveTo:
   G v1.2: boven maaiveld even wat intilligenter dan nu (done)
   - v2.0: (snel) wegen

G  enterprise_project
   G  description field for debugging (done, use projectMeta.title and projectMeta.description)
   G  project stappen kunnen een naam krijgen, add e.g stepName = "kaas" field to step block, e.g.
         { stepType = "SSrv", stepName = "kaas", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_SSrv" }, stepDataDef = {
                { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testTable4" },
         }},
      en worden gebruikt voor sourceStep's, e.g.
         { keyDef = "testArg"        , sourceStep = "kaas", sourceKeyDef = "testArgSource" },
   -  (nested?) sequential projectStep
            { stepType = "SerialSteps", stepTypeDef = { aoWIPId = "myId", }, stepDataDef = {                                        -- sourceStep = 10 (or stepName)
                { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_SSrv" }, stepDataDef = {   -- sourceStep = 10.1
                    { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }},
                { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_ASrv" }, stepDataDef = {   -- sourceStep = 10.2
                    { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }},

                -- additional steps to perform in sequence                                                                          -- sourceStep = 10.n

                returnData  = {
                    { keyDef = "testBArg0"              , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }
            }},
   -  (nested?) parellel projectStep
            { stepType = "ParellelSteps", stepTypeDef = { aoWIPId = "myId", }, stepDataDef = {
                -- as above with any stepType (including SerialSteps), i.e.
                -- sourceStep = 11.1
                --              11.1.1
                --              11.1.2 S
                --              11.2

                -- additional steps to perform in parellel                                                                          -- sourceStep = 11.n
            }},
   -  error handling (no_error, ignored errors, failed on error)

-  merge enterprise_chests into enterprise_storage

-  waste handling (equivalent aan de shop: enterprise_wastehandling + (m)obj_wastehandler) (enterprise_wastehandling?)
   -  v1
      - turtle registers in (m)obj_wastehandler
      - adjust part of IItemSupplier:provideItemsTo_AOSrv to get a wasteItemDepotLocator as argument
      - gebruik wasteItemDepotLocator in factory and forest, contruction
   -  v2
      - rename enterprise_storage into enterprise_warehousing
      - silo registers in (m)obj_wastehandler
   -  v3
      - registers local chests of mobj's (forest, factory, etc) in (mo)bj_wastehandler
      - ensure it takes the closest

G  mine v2 maken

G  display station (Yahoo!!, working (except for building it))
   -  system status (e.g. fuel per turtle, silo)
   -  logging

R  Factory:
   -  remove static method style code (remaining from before it was a mobj)
   -  ensure no longer need to register it as a module in the mobj library
   -  split into CraftSpot & SmeltSpot mobj's

-  rename enterprise_shop to better name enterprise_shopping or enterprise_itemsupplier

-  ItemSupplierGroup & ItemDepotGroup
   -  there seems to be a pattern where multiple (m)obj's handle groups of ItemSupplier's (or ItemDepot's), e.g.
      -  in the Shop (or WasteHandler)
      -  for top chests
      -  for storage "chests" in the Silo
      -  in the Factory?
   -  part of this code is/ seems to be the same
   -  we should investigate if we can introduce a ItemSupplierGroup object that implements the common code that can subsequentyly be reused.

-  improve IItemDepot and IItemSupplier interfaces

G  player station
   -  v1.0: input & output chest UI

-  IItemSupplier & IItemDepot interface
   -  consider better name for provideTo and storeFrom reflecting the fact that storeFrom is simpler

-  recipe book

-  create (& use) multiple turtles

-  availability
   -  e.g. no 2 turtles into 1 silo shaft

-  claiming
   -  items (in suppliers)
   -  free slots (in depot's)

-  IObj logic semi-automatic
   -  copy
   -  isSame
   -  etc

-  enterprise_energy
   -  coal fuel (v5 enterprise)

-  tool management
   -  does a turtle have it's own tools?

-  add .lua extension to all lua code files (besides being a good convention, it also helps in the VSC)

-  Other ToDo's to be found everywhere in all code files

G  turtle without db/inventory.lua file should check for tool present (done)
