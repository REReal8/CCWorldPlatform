ToDo List
---------
--[[
   This section of this file contains the list of things we as developers (G & R) would like, or are considering to, ToDo w.r.t. the ccwp development project.

   ToDo List conventions:
   -  ToDo line
      -  A ToDo line start with either a "-" or the first letter of the name of the developer that has or intents to pickup the ToDo
      -  A ToDo line contains a brief description of what we want to do.
   -  Sub ToDo's
      -  ToDo's can contain sub ToDo's by adding them on the lines following the parent ToDo, and indenting the line with 3 spaces
      -  Grouping related ToDo's, in a list of sub ToDo's, is a good practice (especially if they are intended to be picked up in the same timeframe)
   -  Priority
      -  ToDo's which the developer(s) deem to have a higher priority can/will be put higher in the ToDo List.
   -  Completed ToDo's
      -  When a ToDo is completed "(done)" should be added at the end of the ToDo line
      -  A ToDo with sub ToDo's should only be marked as done if all sub ToDo's are also done
      -  When a master ToDo (i.e. those who do not have a parent ToDo) is marked as done, the other developer should move the ToDo (including the sub ToDo's)
         to the ToDo history section of this file to indicate he/ she has taken notice of the completion of the ToDo.
]]

-  Robuste way to initialize and setup (like the core files do)
   -  "not exactly sure what is meant by this ToDo, but probably the library.lua files are intended for this ..." (R)
      (see also startup.lua => ccwp.lua, and follow the code to the library.lua 's)

R  Building blueprints/layers from front                                                                                (done)
   R  Support building blueprints (layers) from front                                                                   (done)
   R  Figure out how to properly orient Monitors... (see t_builder.T_BuildLayer_Task_Front)                             (done)

R  Propely Build UtilStation by using role_builder                                                                      (done)

RG UtilStation v1.0 input & output chest UI                                                                             (....)

-  ensure all MObj's implement and follow IMObj interface                                                               (....)
   R  generalise (I)MObj test functions; i.e. for construct, destruct, etc                                              (done)
   R  mobj_test                                                                                                         (done)
   R  mobj_birchforest                                                                                                  (done)
   R  mobj_chest                                                                                                        (done)
   R  mobj_factory                                                                                                      (done)
   -  mobj_mine                                                                                                         (....)
   R  mobj_silo                                                                                                         (done)
   -  mobj_shop
   -  mobj_turtle

-  use MObjHost class                                                                                                   (....)
   R  generalise MObjHost test functions; i.e. for hosting, building, releasing, etc                                    (done)
   R  enterprise_forestry                                                                                               (done)
      R  upgrade to a MObjHost                                                                                          (done)
      R  use new MObjHost methods instead of current equivalent                                                         (done)
      R  use generalised test functions                                                                                 (done)
   R  enterprise_chest                                                                                                  (done)
      R  upgrade to a MObjHost                                                                                          (done)
      R  use new MObjHost methods instead of current equivalent                                                         (done)
      R  use generalised test functions                                                                                 (done)
   R  enterprise_manufacturing                                                                                          (done)
      R  upgrade to a MObjHost                                                                                          (done)
      R  use new MObjHost methods instead of current equivalent                                                         (done)
      R  use generalised test functions                                                                                 (done)
   -  enterprise_gathering
      R  upgrade into an MObjHost                                                                                       (done)
      R  use new MObjHost methods instead of current equivalent                                                         (done)
      -  introduce test module with generalised test functions
   R  enterprise_storage                                                                                                (done)
      R  upgrade into an MObjHost                                                                                       (done)
      R  use new MObjHost methods instead of current equivalent                                                         (done)
      R  use generalised test functions                                                                                 (done)
   -  enterprise_shop
      -  upgrade into an MObjHost
      -  use new MObjHost methods instead of current equivalent
      -  use generalised test functions
      -  rename enterprise_shop to better name: e.g. enterprise_shopping or enterprise_itemsupplier
   -  enterprise_turtle
      -  upgrade into an MObjHost
      -  use new MObjHost methods instead of current equivalent
      -  use generalised test functions

-  consider merging enterprise_chest into enterprise_storage

-  BirchForest: support more than 6 trees (in the one column)

-  replace table.unpack(arg) with ... everywhere

-  Generalised IItemSupplier test functions for MObj's
   -  generalise IItemSupplier test functions
   -  use in mobj_birchforest
   -  use in mobj_chest
   -  use in mobj_factory
   -  use in mobj_mine
   -  use in mobj_silo
   -  use in mobj_shop
   -  use in mobj_turtle

-  Generalised IItemDepot test functions for MObj's
   -  generalise IItemDepot test functions
   -  use in mobj_chest
   -  use in mobj_silo
   -  use in mobj_turtle

G  Descriptions for blueprints and project steps
   G  Blueprint layer holds a desription / name
   G  used to pass to project step (zodat het in de status schermen te zien is)
   G  description field for debugging (done, use projectMeta.title and projectMeta.description)
   G  project stappen kunnen een naam krijgen, add e.g stepName = "kaas" field to step block, e.g.
         { stepType = "SSrv", stepName = "kaas", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_SSrv" }, stepDataDef = {
                { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testTable4" },
         }},
      en worden gebruikt voor sourceStep's, e.g.
         { keyDef = "testArg"        , sourceStep = "kaas", sourceKeyDef = "testArgSource" },

R  Factory:
   -  remove static method style code (remaining from before it was a mobj)
   -  ensure no longer need to register it as a module in the mobj library
   -  split into CraftSpot & SmeltSpot MObj's

-  blueprint
   -  Introduce Blueprint objects

-  ItemSupplierGroup & ItemDepotGroup
   -  there seems to be a pattern where multiple (m)obj's handle groups of ItemSupplier's (or ItemDepot's), e.g.
      -  in the Shop (or WasteHandler)
      -  for top chests
      -  for storage "chests" in the Silo
      -  in the Factory?
   -  part of this code is/ seems to be the same
   -  we should investigate if we can introduce a ItemSupplierGroup object (which itself is also an ItemSupplier?) that implements the common code that can subsequentyly be reused.

-  waste handling (equivalent aan de shop: enterprise_wastehandling + (m)obj_wastehandler) (enterprise_wastehandling?)
   -  v1
      RG adjust part of IItemSupplier:provideItemsTo_AOSrv to get a wasteItemDepotLocator as argument                      (done)
      R  add wasteItemDepotLocator to methods where (p|P)rovideItemsTo_AOSrv, and the parent methods of those, are used    (done)
      -  gebruik wasteItemDepotLocator in factory (done)
      -  gebruik wasteItemDepotLocator in forest, contruction
      G  forrester return havested items so waste can be calculated
   -  v2
      -  create obj_wastehandler and enterprise_wastehandling
      -  turtle registers in (m)obj_wastehandler
      -  rename enterprise_storage into enterprise_warehousing
      -  silo registers in (m)obj_wastehandler
   -  v3
      -  registers local chests of mobj's (forest, factory, etc) in (mo)bj_wastehandler
      -  ensure it takes the closest

-  mobj advanced chest
   -  different class like mobj chest
   -  handles orders with item reservation
      -  discuss: should this be part of/ handled via improved IItemSupplier interface (i.e. be applicable to all ItemSupplier's)?
   -  handles waste with free space reservation
      -  discuss: should this be part of/ handled via improved IItemDepot interface  (i.e. be applicable to all ItemDepot's)?
   -  when items are pickup up / delivered, reservation is complete

RG mine v2
   -  uitdenken
   -  maken

-  Het order proces
   -  de start van het order proces is een reservering. De reservering kan gedaan worden bij een partij die reserveringen accepteerd.
      -  er zijn in eerste instantie drie type reserveringen
         -  items (provide item)
         -  fuel (zelfde als item, alleen bestemming is altijd een turtle die de brandstof gebruikt als laatste stap)
         -  opslagruimte (depot)
      -  er zijn meer type reserveringen in de toekomst te verwachten
         -  tijd van turtle om iets te doen (nu via assignmentboard)
         -  tijd van een cpu om iets te doen (langer dan 1 tick, geen turtle API nodig)
         -  ruimte in de map om te bewegen (zoals de schacht van een silo/mijn, deel van een snelweg)
         -  tijd van items in de wereld, zoals furnace, crafting table
   -  het antwoord / de return value op de reservering is altijd een object / table, twee mogelijkheden
      -  success == True
         -  Het antwoord is een order object, de benodigde middelen (items, opslagruimte, ...) zijn gereserveerd. In de order staat informatie hierover.
         -  Er wordt extra informatie gegeven over de order, bijvoorbeeld verwachte levertijd, brandstof kosten, etc.
         -  Er MOET iets met dit object gedaan worden!
            -  execute, de order wordt uitgevoerd
            -  cancel, de order (en de onderliggende reserveringen) worden geannuleerd / vrijgegeven
      -  success == False
         -  Het antwoord is een table
         -  Het antwoord bevat eventueel extra informatie, zoals bij een item order hoeveel wel geleverd kan worden.
         -  Met het antwoord kan niks gedaan worden, informatie gebruiken waar nodig.

-  order object
   -  bestaat altijd uit een OrderBase
   -  bestaat altijd uit een (of meer?) van de hieronder genoemde typen
      -  OrderBase
         -  id
         -  status
         -  bevat reservering informatie, waar zijn zaken gereserveerd (dus met een locator en details over de reservering)
         -  completeCallback, welke functie moet worden aangeroepen zodra deze order complete is
         -  description - handig voor systeem monitoring en zo
      -  ItemOrder
         -  ItemTable            - bestelde items
         -  aflever adres        - locator
      -  FuelOrder
         - Zelfde als ItemOrder, waarbij het aflever adres altijd een turtle is die alle items uit de item table gebruikt voor refuel()
      -  DepotOrder
         -  ItemTable            - te verwerken items
         -  _itemSlots           - aantal slots nodig om de items op te slaan, berekend op basis van de itemTable
         -  pick adres           - locator
      -  CraftOrder
         -  ItemTable            - to craft
         -  ItemTable            - ingredients
         -  ingredients locator  - locator
         -  aflever adres        - locator
      -  SmeltOrder
         -  ItemTable            - to craft
         -  ItemTable            - ingredients
         -  aflever adres        - locator
      -  BuiltOrder?
         -  Blueprint
         -  Location
         -  ItemTable            - ingredients
         -  ingredients locator  - locator

-  Consider creating and using "order" objects (maybe even generalise this to reservations)
   -  order object that holds an outstanding order
   -  order object holds the items concerned
   -  order object can hold more information, like description
   -  this will make an overview of outstanding orders possible
   -  Discuss: maybe we should generalise the concept of an "order" further
      -  if we set this up in a generic way it could be used to reserve/ claim
         -  items
         -  item space (slots in a slot inventory)
         -  physical turtle space (e.g. for no 2 turtles into 1 shaft)
         -  turtle physical movement time (related to the concept of WIP)
         -  (management) execution time
         -  ?energy/ fuel
         -  ?tools
         -  ...
      -  Discuss: what is the best name for this concept: ?order, ?claim, ?reservation, ...
      -  Next to having Reservation/ "order" objects, we likely need
         -  reservationHandler objects (?IReservationHandler)
            -  with methods to reserve, claim and release Reservation's
         -  reservationId  (which likely is, resolves to or is related to a locator (URL))
   -  improve IItemDepot and IItemSupplier interfaces
      -  claiming items (in IItemSupplier)
      -  free slots (in IItemDepot's)
   -  availability of physical turtle space (e.g. no 2 turtles into 1 silo shaft)
      - denk richting:
         -  silo managed de beweging door de shaft
         -  oplossingrichting:
            -  specifieke projectstap eo assignment voor de MoveTo stap met een beschikbaarheids token voor de shaft die om een aantal project stappen heen staat
            -  bijv. de stappen: [move de shaft in, haal items uit een storage kist, move de shaft uit] (binnen een protected sequence dmv de token)

-  Obj(ect) Initialisation & Destruction: v2.5/ v3.0
   -  ToDiscuss: Consider further revising Initialisation, some aspects to consider
      -  Object new(fromTable) methods: consider return nil after a CheckInput failure (instead of empty table).
         -  this propably depends on the usage of new. In case of constructing an instance we DO want to return a table. And we should set it's fields.
         -  this might change if we implement the toTable and fromTable serialise/ deserialising logic below
         -  goed testen dat alles nog goed gaat.
      -  Serialising and deserialising objects
         -  consider introducting methods newFromTable and serialiseToTable to handle from and to dht
         -  provide a default implementing class (? maybe ObjBase)
         -  replace current new method in almost all current objects with the above
      -  construct method's currently in IMObj
         -  adopt/ change to the above "new" method approach, i.e.
            -  it should not take a table with the parameters + the parameters itself (also change MObjHost to reflect this change)
            -  possibly remove them from IMObj but introduce some other mechanism for enforcing hosting child objects (via MObjHost:hostMObj_SSrv)
      -  Consider introducing one or more interfaces (e.g. IInitialisation) for the above initialisation related methods
      -  Reimplement ObjectFactory based on these developments

-  Revise modules/ libraries file directory structure

-  hosting/ releasing, building/ dismantling v2.0
   -  There are several aspects that could be taken into account in an upgraded version. Likely good to discuss:
      -  mobj_shop (currently) does not have a physical presence in the world. Hence having build and dismantle (both in mobj_shop as enterprise_shop) seems incorrect.
      -  mobj_shop can however have WIP. Waiting for WIP to be completed now is done in dismantleAndReleaseMObj_ASrv
      -  the above will also be the case for enterprise_wastehandling/(m)obj_wastehandler, and possibly also when we introduce ItemSupplierGroup and ItemDepotGroup
      -  should we introduce some intermediate abstraction between IObj and IMObj, e.g. IHObj (hostable Obj), or IWObj (Workable Obj), or IAObj (async Obj)?

-  enterprise_project
   !  consider introducing a Project object (class)!, and using that in enterprise_project
   -  (nested?) sequential projectStep
            { stepType = "SerialSteps", stepTypeDef = { aoWIPId = "myId", }, stepDataDef = {                                        -- sourceStep = 10 (or stepName)
                { stepType = "SSrv", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_SSrv" }, stepDataDef = {   -- sourceStep = 10.1
                    { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }},
                { stepType = "ASrv", stepTypeDef = { moduleName = "enterprise_test", serviceName = "Test_ASrv" }, stepDataDef = {   -- sourceStep = 10.2
                    { keyDef = "testArg"        , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }},

                -- additional steps to perform in sequence                                                                          -- sourceStep = 10.n

                returnData  = {
                    { keyDef = "testBArg0"              , sourceStep = 0, sourceKeyDef = "testArgSource" },
                }
            }},
   -  (nested?) parellel projectStep
            { stepType = "ParellelSteps", stepTypeDef = { aoWIPId = "myId", }, stepDataDef = {
                -- as above with any stepType (including SerialSteps), i.e.
                -- sourceStep = 11.1
                --              11.1.1
                --              11.1.2 S
                --              11.2

                -- additional steps to perform in parellel                                                                          -- sourceStep = 11.n
            }},
   -  error handling (no_error, ignored errors, failed on error)

-  enterprise management
   -  for claiming manament execution time

-  IItemSupplier & IItemDepot interface
   -  consider better name for provideTo and storeFrom reflecting the fact that storeFrom is simpler
   -  don't do anything when itemList is empty --> where do check?

-  World Master
   -  Operates at the (currently for seen) highest (abstraction) layer in ccwp
      -  Operates on the (mobj)enterprise layer types
   -  Implementation option 1: upgrade the world using levels
      -  It requests all enterprises to upgrade to the next world level
         -  A level of an enterprise is determined by KPI's like e.g. wood capacity, forest size, # forests, etc
      -  Once all enterprises have been upgraded, it upgrades the world to the next world level
   -  Implementation option 2: alternative without scripting via levels

-  recipe book

-  Bug: Factory:provideItemsTo_AOSrv meerdere items zorgt voor meerdere keren aanroepen van callback terwijl het er maar 1 moet zijn

-  create (& use) multiple turtles

-  enterprise_energy
   -  Investigate + possibly fix why we relatively soon need to go to L3 enterprise_energy in enterprise_colonization
   -  coal fuel (v5 enterprise)

-  tool management
   -  does a turtle have it's own tools?

-  Bij inschrijven assigment controleren of er een pickaxe in de inventory zit (indien not equiped)

-  moveTo:
   - v2.0: (snel) wegen (veel)

-  concept: stand alone turtles / turtle slaves
   -  turtle without wireless network possibility
   -  turtle does one job, no rotation (like forestry or mining)
   -  turtle stops when output chest is full / low on fuel
   -  turtle continues when output chest is cleared / fuel is delivered
   -  optional computer nearby for information hub, maybe wired connected
   +++can be build with materials found, no given modems needed
   ---differs alot from current implementation

-  Other ToDo's to be found everywhere in all code files


ToDo history
------------
--[[
   This section of this file contains the ToDo items that have been fully completed, and that all developers acknowledge to have seen.


   ToDo History conventions:
   -  Newly completed and acknowledged ToDo's should be added at the top of this list. Hence, older ToDo's will be lower on the list.
]]

G  Debug: Modem events send but not received                                                                            (....)
   - understand (seems buffer issue inside computercraft)
   - resolve/ workaround (workaround, not solved. Synchronious code should consider yielding ("coroutine.yield()"))     (done)
   - option to bundle messages, reduces count, not size.                                                                (done)

R  Initialisation: v2.0                                                                                                 (done)
   R  use Class:newInstance & instance:_init to create and initialise objects instances                                 (done)
   R  adopt this approach for all classes                                                                               (done)
      R  TestObj                                                                                                        (done)
      R  Location                                                                                                       (done)
      R  URL                                                                                                            (done) note: a lot of URL:new remaining where a table is given due to indirect dht retrieval
      R  Inventory                                                                                                      (done)
      R  ObjTable                                                                                                       (done)
      R  ObjArray                                                                                                       (done)
      R  CallDef                                                                                                        (done)
      R  Callback                                                                                                       (done)
      R  TaskCall                                                                                                       (done)
      R  WIPQueue                                                                                                       (done)
      R  Block                                                                                                          (done)
      R  CodeMap                                                                                                        (done)
      R  LayerRectangle                                                                                                 (done)
      R  ItemTable                                                                                                      (done)
      R  WIPAdministrator                                                                                               (done)
      R  ObjBase                                                                                                        (done)
      R  TestMObj                                                                                                       (done)
      R  Chest                                                                                                          (done)
      R  ProductionSpot                                                                                                 (done)
      R  Silo                                                                                                           (done)
      R  BirchForest                                                                                                    (done)
      R  Factory                                                                                                        (done)
      R  Mine                                                                                                           (done)
      R  Shop                                                                                                           (done)
      R  Turtle                                                                                                         (done)
      R  Host                                                                                                           (done)
      R  MObjHost                                                                                                       (done)

R  Obj(ect) Initialisation: improve v1.1                                                                                (done)
   R  rename section base methods => initialisation                                                                     (done)
   R  remove new from IObj (+ move most implementations to correct section)                                             (done)

R  Improve MObjHost                                                                                                     (done)
   R  Support extending and upgrading of MObj's                                                                         (done)

R  Introduce multiple inheritance                                                                                       (done)
   R  Introduce Class meta class with methods for                                                                       (done)
      R  Checking if an object (or class) is an instance of a class.                                                    (done)
      R  Creating a new class by inheriting functionality from a chain of other classes.                                (done)
      R  Creating new instances (objects) of a Class.                                                                   (done)
   R  Use Class.NewClass for creating all classes                                                                       (done)

R  ensure all ItemSupplier's inherit IItemSupplier interface                                                            (done)
   R  mobj_birchforest                                                                                                  (done)
   R  mobj_chest                                                                                                        (done)
   R  mobj_factory                                                                                                      (done)
   R  mobj_mine                                                                                                         (done)
   R  mobj_silo                                                                                                         (done)
   R  mobj_shop                                                                                                         (done)
   R  mobj_turtle                                                                                                       (done)

R  ensure all ItemDepot's inherit ItemDepot interface                                                                   (done)
   R  mobj_chest                                                                                                        (done)
   R  mobj_silo                                                                                                         (done)
   R  mobj_turtle                                                                                                       (done)

R  Generalise IObj test functions into "templates" to reduce duplication                                                (done)
   R  adopt naming convention to name generic (i.e. taking parameters) tests starting with pt_                          (done)
   R  generalise IObj test functions                                                                                    (done)

R  Introduce ObjBase, a class that can be used as the base class for any class implementing IObj interface              (done)
   R  convert Location to a proper IObj                                                                                 (done)
   R  convert URL to a proper IObj                                                                                      (done)
   R  convert Chest to a proper IObj                                                                                    (done)
   R  convert Inventory to a proper IObj                                                                                (done)
   R  convert ProductionSpot to a proper IObj                                                                           (done)
   R  convert ObjTable to a proper IObj                                                                                 (done)
   R  convert ObjArray to a proper IObj                                                                                 (done)
   R  convert TestObj to a proper IObj                                                                                  (done)
   R  convert Silo to a proper IObj                                                                                     (done)
   R  convert CallDef to a proper IObj                                                                                  (done)
   R  convert WIPQueue to a proper IObj                                                                                 (done)
   R  convert Block to a proper IObj                                                                                    (done)
   R  convert LayerRectangle to a proper IObj                                                                           (done)
   R  convert ItemTable to a proper IObj                                                                                (done)
   R  convert WIPAdministrator to a proper IObj                                                                         (done)
   R  convert TestMObj to a proper IObj                                                                                 (done)
   R  convert BirchForest to a proper IObj                                                                              (done)
   G  convert Factory to a proper IObj                                                                                  (done)
   R  convert Mine to a proper IObj                                                                                     (done)
   R  convert Shop to a proper IObj                                                                                     (done)
   R  convert Turtle to a proper IObj                                                                                   (done)
   R  convert Host to a proper IObj                                                                                     (done)
   R  convert MObjHost to a proper IObj                                                                                 (done)

R  IInterface (test) module                                                                                             (done)
   R  Introduce IInterface module file with functions other interfaces can use                                          (done)
      R  Adopt IInterface in all interfaces                                                                             (done)
   R  Introduce T_IInterface test module with test functions other tests on interfaces can use                          (done)
      R  Adopt T_IInterface for all interface related tests                                                             (done)

R  add .lua extension to almost all lua code files (besides being a good convention, it also helps in the VSC)          (done)

R  CheckInput                                                                                                           (done)
   R  add .lua to module file input_checker                                                                             (done)

G  corejob: remove module (if possible) (done)

R  IObj                                                                                                                 (done)
   R  rename isSame to isEqual                                                                                          (done)
   (based on a chat with chatgpt as well as literature study on identity and equality in OOP (e.g. look here: https://stackoverflow.com/questions/1692863/what-is-the-difference-between-identity-and-equality-in-oop) )

R  (t_)object.lua                                                                                                       (done)
   R  introduce general IsInstanceOf function                                                                           (done)

R  Dummy callback                                                                                                       (done)
   R  in more logical class                                                                                             (done)
   R  easier way to obtain (via Callback.GetNewDummyCallBack())                                                         (done)

R  finish MObjHost
   R  test delistMObj_SSrv                                                                                              (done)
   R  test removeMObj_ASrv                                                                                              (done)
   R  remove completeRunningBusiness_AOSrv from IMObj interface                                                         (done)
   R  rewrite waiting for completion of running business (remove usage of completeRunningBusiness_AOSrv + use WIPAdministrator)  (done)
   R  (re)consider relevant method naming:                                                                              (done)
                  MObjHost          MObjHost       (MObj)Host  MObj           MObj        -  MObjHost                MObjHost    (MObj)Host     MObj                 MObj        -  ent_constr
      - now:      addMObj           registerMObj   saveObject  buildBlueprint construct   -  removeMObj              delistMObj  deleteResource dismantleBlueprint   destruct    -  build
      - option1:  createNew         ?              ?           buildBlueprint construct   -  destroy                 ?           ?              dismantleBlueprint   destruct    -  build
      - option2:  hostAndBuildMObj  hostMObj       saveObject  buildBlueprint construct   -  dismantleAndReleaseMObj releaseMObj deleteResource dismantleBlueprint   destruct    -  build
      - based on the following conversation I have chosen option 2: https://chat.openai.com/share/65d3e63b-7618-4522-a436-e88964f4d293

R  WIPAdministrator (formerly knows as AdministrationOffice)   (done)
   R  introduce enterprise_administration                      (done)
   R  finish WIPAdministrator                                  (done)
      R  load/ save itself after one if the 3 WIP calls        (done)
   R  enterprise_project: optionally administer project started and completed in WIPAdministrator  (done)
   R  write WIPAdministrator tests                             (done)

G  moveTo:
   G v1.2: boven maaiveld even wat intilligenter dan nu        (done)

G  display station (Yahoo!!, working (except for building it)) (done)
   -  system status (e.g. fuel per turtle, silo)               (done)
   -  logging                                                  (done)

G  turtle without db/inventory.lua file should check for tool present (done)

G  Display verbeteren
   G  display blijft na kiezen van een test optie in de groep waar de test gekozen is (done)
   G  display gebruikt 2 kolommen als er veel tests zijn (done)

